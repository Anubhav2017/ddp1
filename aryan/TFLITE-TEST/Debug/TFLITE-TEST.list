
TFLITE-TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001251c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ff0  080126f0  080126f0  000226f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080176e0  080176e0  000623ac  2**0
                  CONTENTS
  4 .ARM          00000008  080176e0  080176e0  000276e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080176e8  080176e8  000623ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080176e8  080176e8  000276e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080176ec  080176ec  000276ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000323ac  20000000  080176f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cad4  200323b0  08049a9c  000623b0  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  2003ee84  08049a9c  0006ee84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000623ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   003027d0  00000000  00000000  000623dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001867a  00000000  00000000  00364bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00008cf8  00000000  00000000  0037d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00008ac8  00000000  00000000  00385f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ae11  00000000  00000000  0038e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005d0b4  00000000  00000000  003c97f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001dcfe4  00000000  00000000  004268ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00603891  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00029a6c  00000000  00000000  006038e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200323b0 	.word	0x200323b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080126d4 	.word	0x080126d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200323b4 	.word	0x200323b4
 800020c:	080126d4 	.word	0x080126d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b9a4 	b.w	8000ffc <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff2b 	bl	8000b30 <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fca1 	bl	800064c <__aeabi_dmul>
 8000d0a:	f000 f979 	bl	8001000 <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc22 	bl	8000558 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc98 	bl	800064c <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff fada 	bl	80002dc <__aeabi_dsub>
 8000d28:	f000 f96a 	bl	8001000 <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8083 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d947      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b142      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	f1c2 0020 	rsb	r0, r2, #32
 8000d58:	fa24 f000 	lsr.w	r0, r4, r0
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4097      	lsls	r7, r2
 8000d60:	ea40 0c01 	orr.w	ip, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d70:	fa1f fe87 	uxth.w	lr, r7
 8000d74:	fb08 c116 	mls	r1, r8, r6, ip
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 8119 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8116 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8105 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8102 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d150      	bne.n	8000e8c <__udivmoddi4+0x154>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2601      	movs	r6, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f200 80e9 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d9 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7bf      	b.n	8000dce <__udivmoddi4+0x96>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x12e>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80b1 	beq.w	8000fba <__udivmoddi4+0x282>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x140>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80b8 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	468c      	mov	ip, r1
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0a8      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e8a:	e7a5      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f603 	lsr.w	r6, r0, r3
 8000e94:	4097      	lsls	r7, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	4330      	orrs	r0, r6
 8000ea2:	0c03      	lsrs	r3, r0, #16
 8000ea4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea8:	fa1f f887 	uxth.w	r8, r7
 8000eac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb06 f108 	mul.w	r1, r6, r8
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ec6:	f080 808d 	bcs.w	8000fe4 <__udivmoddi4+0x2ac>
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	f240 808a 	bls.w	8000fe4 <__udivmoddi4+0x2ac>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	443b      	add	r3, r7
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b281      	uxth	r1, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ef2:	d273      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d971      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c6 0c20 	rsb	ip, r6, #32
 8000f08:	fa03 f406 	lsl.w	r4, r3, r6
 8000f0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f10:	431c      	orrs	r4, r3
 8000f12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f22:	431f      	orrs	r7, r3
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fa1f f884 	uxth.w	r8, r4
 8000f2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f36:	fb09 fa08 	mul.w	sl, r9, r8
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f40:	fa00 f306 	lsl.w	r3, r0, r6
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x220>
 8000f46:	1861      	adds	r1, r4, r1
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f4c:	d248      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f4e:	458a      	cmp	sl, r1
 8000f50:	d946      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4421      	add	r1, r4
 8000f58:	eba1 010a 	sub.w	r1, r1, sl
 8000f5c:	b2bf      	uxth	r7, r7
 8000f5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f6a:	fb00 f808 	mul.w	r8, r0, r8
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x24a>
 8000f72:	19e7      	adds	r7, r4, r7
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f78:	d22e      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d92c      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4427      	add	r7, r4
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	eba7 0708 	sub.w	r7, r7, r8
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	454f      	cmp	r7, r9
 8000f90:	46c6      	mov	lr, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	d31a      	bcc.n	8000fcc <__udivmoddi4+0x294>
 8000f96:	d017      	beq.n	8000fc8 <__udivmoddi4+0x290>
 8000f98:	b15d      	cbz	r5, 8000fb2 <__udivmoddi4+0x27a>
 8000f9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000fa2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fac:	40f7      	lsrs	r7, r6
 8000fae:	e9c5 2700 	strd	r2, r7, [r5]
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e70b      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6fd      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fc8:	4543      	cmp	r3, r8
 8000fca:	d2e5      	bcs.n	8000f98 <__udivmoddi4+0x260>
 8000fcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0x260>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e7d2      	b.n	8000f82 <__udivmoddi4+0x24a>
 8000fdc:	4660      	mov	r0, ip
 8000fde:	e78d      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	e7b9      	b.n	8000f58 <__udivmoddi4+0x220>
 8000fe4:	4666      	mov	r6, ip
 8000fe6:	e775      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	e74a      	b.n	8000e82 <__udivmoddi4+0x14a>
 8000fec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff0:	4439      	add	r1, r7
 8000ff2:	e713      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e724      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <__aeabi_d2uiz>:
 8001000:	004a      	lsls	r2, r1, #1
 8001002:	d211      	bcs.n	8001028 <__aeabi_d2uiz+0x28>
 8001004:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001008:	d211      	bcs.n	800102e <__aeabi_d2uiz+0x2e>
 800100a:	d50d      	bpl.n	8001028 <__aeabi_d2uiz+0x28>
 800100c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001010:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001014:	d40e      	bmi.n	8001034 <__aeabi_d2uiz+0x34>
 8001016:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800101a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800101e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001022:	fa23 f002 	lsr.w	r0, r3, r2
 8001026:	4770      	bx	lr
 8001028:	f04f 0000 	mov.w	r0, #0
 800102c:	4770      	bx	lr
 800102e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001032:	d102      	bne.n	800103a <__aeabi_d2uiz+0x3a>
 8001034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001038:	4770      	bx	lr
 800103a:	f04f 0000 	mov.w	r0, #0
 800103e:	4770      	bx	lr

08001040 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	08016f2c 	.word	0x08016f2c

08001060 <_ZN6tflite13ErrorReporterD0Ev>:
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ffe9 	bl	8001040 <_ZN6tflite13ErrorReporterD1Ev>
 800106e:	2104      	movs	r1, #4
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f00e f9a2 	bl	800f3ba <_ZdlPvj>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8001086:	2301      	movs	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8001096:	214e      	movs	r1, #78	; 0x4e
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 800109a:	f00e fbd9 	bl	800f850 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	080126f0 	.word	0x080126f0
 80010ac:	08012734 	.word	0x08012734
 80010b0:	08012754 	.word	0x08012754

080010b4 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80010bc:	687c      	ldr	r4, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fcb1 	bl	8001a28 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80010c6:	4603      	mov	r3, r0
 80010c8:	425b      	negs	r3, r3
 80010ca:	4423      	add	r3, r4
  }
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}

080010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffe7 	bl	80010b4 <_ZNK11flatbuffers5Table9GetVTableEv>
 80010e6:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 fc81 	bl	80019f0 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80010ee:	4603      	mov	r3, r0
 80010f0:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	897b      	ldrh	r3, [r7, #10]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d207      	bcs.n	800110a <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fc75 	bl	80019f0 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001106:	4603      	mov	r3, r0
 8001108:	e000      	b.n	800110c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800110a:	2300      	movs	r3, #0
  }
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	2104      	movs	r1, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fc8e 	bl	8001a44 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8001128:	4603      	mov	r3, r0
  }
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fca0 	bl	8001a80 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fc9f 	bl	8001a98 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffeb 	bl	800114a <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff ffe1 	bl	8001164 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	08016f0c 	.word	0x08016f0c

080011cc <_ZN6tflite10OpResolverD0Ev>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffe9 	bl	80011ac <_ZN6tflite10OpResolverD1Ev>
 80011da:	2104      	movs	r1, #4
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f00e f8ec 	bl	800f3ba <_ZdlPvj>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	2301      	movs	r3, #1
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	460b      	mov	r3, r1
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3318      	adds	r3, #24
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	7afa      	ldrb	r2, [r7, #11]
 800121a:	4611      	mov	r1, r2
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	4798      	blx	r3
 8001220:	4603      	mov	r3, r0
  }
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	331c      	adds	r3, #28
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	4798      	blx	r3
 8001244:	4603      	mov	r3, r0
  }
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	4a05      	ldr	r2, [pc, #20]	; (8001270 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffa3 	bl	80011ac <_ZN6tflite10OpResolverD1Ev>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08016ee0 	.word	0x08016ee0

08001274 <_ZN6tflite15MicroOpResolverD0Ev>:
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ffe7 	bl	8001250 <_ZN6tflite15MicroOpResolverD1Ev>
 8001282:	2104      	movs	r1, #4
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f00e f898 	bl	800f3ba <_ZdlPvj>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fecb 	bl	8001040 <_ZN6tflite13ErrorReporterD1Ev>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	0801722c 	.word	0x0801722c

080012b8 <_ZN6tflite18MicroErrorReporterD0Ev>:
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ffe7 	bl	8001294 <_ZN6tflite18MicroErrorReporterD1Ev>
 80012c6:	2104      	movs	r1, #4
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f00e f876 	bl	800f3ba <_ZdlPvj>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <__tcf_0>:
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim14);


  static tflite::MicroErrorReporter micro_error_reporter;
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4801      	ldr	r0, [pc, #4]	; (80012e4 <__tcf_0+0xc>)
 80012de:	f7ff ffd9 	bl	8001294 <_ZN6tflite18MicroErrorReporterD1Ev>
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200321c0 	.word	0x200321c0

080012e8 <__tcf_1>:
  {
	 error_reporter->Report("Model version does not match Schema");
	 while(1);
  }

  static tflite::MicroMutableOpResolver<3> micro_op_resolver;
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4801      	ldr	r0, [pc, #4]	; (80012f4 <__tcf_1+0xc>)
 80012ee:	f000 fd5d 	bl	8001dac <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2003ecb4 	.word	0x2003ecb4

080012f8 <__tcf_2>:
	while(1);
  }

  // Build an interpreter to run the model with.
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4801      	ldr	r0, [pc, #4]	; (8001304 <__tcf_2+0xc>)
 80012fe:	f008 fef2 	bl	800a0e6 <_ZN6tflite16MicroInterpreterD1Ev>
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2003ed38 	.word	0x2003ed38

08001308 <main>:
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ac      	sub	sp, #176	; 0xb0
 800130c:	af04      	add	r7, sp, #16
  int buf_len = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int imagesize = 28*28*1;
 8001314:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HAL_Init();
 800131c:	f000 ff8f 	bl	800223e <HAL_Init>
  SystemClock_Config();
 8001320:	f000 fa24 	bl	800176c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001324:	f000 fb16 	bl	8001954 <_ZL12MX_GPIO_Initv>
  MX_TIM14_Init();
 8001328:	f000 fab8 	bl	800189c <_ZL13MX_TIM14_Initv>
  MX_USART1_UART_Init();
 800132c:	f000 fade 	bl	80018ec <_ZL19MX_USART1_UART_Initv>
  HAL_TIM_Base_Start(&htim14);
 8001330:	4877      	ldr	r0, [pc, #476]	; (8001510 <main+0x208>)
 8001332:	f002 fb69 	bl	8003a08 <HAL_TIM_Base_Start>
  static tflite::MicroErrorReporter micro_error_reporter;
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <main+0x20c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f3bf 8f5b 	dmb	ish
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d010      	beq.n	8001374 <main+0x6c>
 8001352:	4870      	ldr	r0, [pc, #448]	; (8001514 <main+0x20c>)
 8001354:	f00e f833 	bl	800f3be <__cxa_guard_acquire>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <main+0x6c>
 8001368:	486a      	ldr	r0, [pc, #424]	; (8001514 <main+0x20c>)
 800136a:	f00e f834 	bl	800f3d6 <__cxa_guard_release>
 800136e:	486a      	ldr	r0, [pc, #424]	; (8001518 <main+0x210>)
 8001370:	f00e fa8c 	bl	800f88c <atexit>
  error_reporter = &micro_error_reporter;
 8001374:	4b69      	ldr	r3, [pc, #420]	; (800151c <main+0x214>)
 8001376:	4a6a      	ldr	r2, [pc, #424]	; (8001520 <main+0x218>)
 8001378:	601a      	str	r2, [r3, #0]
  error_reporter->Report("STM32 TensorFlow Lite test");
 800137a:	4b68      	ldr	r3, [pc, #416]	; (800151c <main+0x214>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4969      	ldr	r1, [pc, #420]	; (8001524 <main+0x21c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fa3f 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  model = tflite::GetModel(mnist_model);
 8001386:	4868      	ldr	r0, [pc, #416]	; (8001528 <main+0x220>)
 8001388:	f7ff fed3 	bl	8001132 <_ZN6tflite8GetModelEPKv>
 800138c:	4603      	mov	r3, r0
 800138e:	4a67      	ldr	r2, [pc, #412]	; (800152c <main+0x224>)
 8001390:	6013      	str	r3, [r2, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION)
 8001392:	4b66      	ldr	r3, [pc, #408]	; (800152c <main+0x224>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff febc 	bl	8001114 <_ZNK6tflite5Model7versionEv>
 800139c:	4603      	mov	r3, r0
 800139e:	2b03      	cmp	r3, #3
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <main+0xb2>
	 error_reporter->Report("Model version does not match Schema");
 80013ac:	4b5b      	ldr	r3, [pc, #364]	; (800151c <main+0x214>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	495f      	ldr	r1, [pc, #380]	; (8001530 <main+0x228>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fa26 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	 while(1);
 80013b8:	e7fe      	b.n	80013b8 <main+0xb0>
  static tflite::MicroMutableOpResolver<3> micro_op_resolver;
 80013ba:	4b5e      	ldr	r3, [pc, #376]	; (8001534 <main+0x22c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	f3bf 8f5b 	dmb	ish
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d014      	beq.n	8001400 <main+0xf8>
 80013d6:	4857      	ldr	r0, [pc, #348]	; (8001534 <main+0x22c>)
 80013d8:	f00d fff1 	bl	800f3be <__cxa_guard_acquire>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf14      	ite	ne
 80013e2:	2301      	movne	r3, #1
 80013e4:	2300      	moveq	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d009      	beq.n	8001400 <main+0xf8>
 80013ec:	2100      	movs	r1, #0
 80013ee:	4852      	ldr	r0, [pc, #328]	; (8001538 <main+0x230>)
 80013f0:	f000 fb84 	bl	8001afc <_ZN6tflite22MicroMutableOpResolverILj3EEC1EPNS_13ErrorReporterE>
 80013f4:	484f      	ldr	r0, [pc, #316]	; (8001534 <main+0x22c>)
 80013f6:	f00d ffee 	bl	800f3d6 <__cxa_guard_release>
 80013fa:	4850      	ldr	r0, [pc, #320]	; (800153c <main+0x234>)
 80013fc:	f00e fa46 	bl	800f88c <atexit>
  tflite_status = micro_op_resolver.AddFullyConnected();
 8001400:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001404:	4618      	mov	r0, r3
 8001406:	f00a fe89 	bl	800c11c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 800140a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800140e:	4619      	mov	r1, r3
 8001410:	4849      	ldr	r0, [pc, #292]	; (8001538 <main+0x230>)
 8001412:	f000 fb8f 	bl	8001b34 <_ZN6tflite22MicroMutableOpResolverILj3EE17AddFullyConnectedERK18TfLiteRegistration>
 8001416:	4603      	mov	r3, r0
 8001418:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  if (tflite_status != kTfLiteOk)
 800141c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <main+0x12a>
  	error_reporter->Report("Could not add FULLY CONNECTED op");
 8001424:	4b3d      	ldr	r3, [pc, #244]	; (800151c <main+0x214>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4945      	ldr	r1, [pc, #276]	; (8001540 <main+0x238>)
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f9ea 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	while(1);
 8001430:	e7fe      	b.n	8001430 <main+0x128>
  tflite_status = micro_op_resolver.AddSoftmax();
 8001432:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001436:	4618      	mov	r0, r3
 8001438:	f00c fb8e 	bl	800db58 <_ZN6tflite16Register_SOFTMAXEv>
 800143c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001440:	4619      	mov	r1, r3
 8001442:	483d      	ldr	r0, [pc, #244]	; (8001538 <main+0x230>)
 8001444:	f000 fb88 	bl	8001b58 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddSoftmaxERK18TfLiteRegistration>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  if (tflite_status != kTfLiteOk)
 800144e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <main+0x15c>
    error_reporter->Report("Could not add SOFTMAX op");
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <main+0x214>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	493a      	ldr	r1, [pc, #232]	; (8001544 <main+0x23c>)
 800145c:	4618      	mov	r0, r3
 800145e:	f003 f9d1 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	while(1);
 8001462:	e7fe      	b.n	8001462 <main+0x15a>
  tflite_status = micro_op_resolver.AddReshape();
 8001464:	4834      	ldr	r0, [pc, #208]	; (8001538 <main+0x230>)
 8001466:	f000 fb89 	bl	8001b7c <_ZN6tflite22MicroMutableOpResolverILj3EE10AddReshapeEv>
 800146a:	4603      	mov	r3, r0
 800146c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  if (tflite_status != kTfLiteOk)
 8001470:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <main+0x17e>
	error_reporter->Report("Could not add FLATTEN op");
 8001478:	4b28      	ldr	r3, [pc, #160]	; (800151c <main+0x214>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4932      	ldr	r1, [pc, #200]	; (8001548 <main+0x240>)
 800147e:	4618      	mov	r0, r3
 8001480:	f003 f9c0 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	while(1);
 8001484:	e7fe      	b.n	8001484 <main+0x17c>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <main+0x244>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	f3bf 8f5b 	dmb	ish
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	bf0c      	ite	eq
 8001498:	2301      	moveq	r3, #1
 800149a:	2300      	movne	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d01f      	beq.n	80014e2 <main+0x1da>
 80014a2:	482a      	ldr	r0, [pc, #168]	; (800154c <main+0x244>)
 80014a4:	f00d ff8b 	bl	800f3be <__cxa_guard_acquire>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf14      	ite	ne
 80014ae:	2301      	movne	r3, #1
 80014b0:	2300      	moveq	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d014      	beq.n	80014e2 <main+0x1da>
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <main+0x224>)
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <main+0x214>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	9202      	str	r2, [sp, #8]
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4b20      	ldr	r3, [pc, #128]	; (8001550 <main+0x248>)
 80014ce:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <main+0x230>)
 80014d0:	4820      	ldr	r0, [pc, #128]	; (8001554 <main+0x24c>)
 80014d2:	f008 fdc1 	bl	800a058 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
 80014d6:	481d      	ldr	r0, [pc, #116]	; (800154c <main+0x244>)
 80014d8:	f00d ff7d 	bl	800f3d6 <__cxa_guard_release>
 80014dc:	481e      	ldr	r0, [pc, #120]	; (8001558 <main+0x250>)
 80014de:	f00e f9d5 	bl	800f88c <atexit>
  interpreter = &static_interpreter;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <main+0x254>)
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <main+0x24c>)
 80014e6:	601a      	str	r2, [r3, #0]

  tflite_status = interpreter->AllocateTensors();
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <main+0x254>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f008 fff3 	bl	800a4d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  if (tflite_status != kTfLiteOk)
 80014f8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d031      	beq.n	8001564 <main+0x25c>
  {
    error_reporter->Report("AllocateTensors() failed");
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <main+0x214>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <main+0x258>)
 8001506:	4618      	mov	r0, r3
 8001508:	f003 f97c 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    while(1);
 800150c:	e7fe      	b.n	800150c <main+0x204>
 800150e:	bf00      	nop
 8001510:	200323cc 	.word	0x200323cc
 8001514:	2003ecb0 	.word	0x2003ecb0
 8001518:	080012d9 	.word	0x080012d9
 800151c:	2003249c 	.word	0x2003249c
 8001520:	200321c0 	.word	0x200321c0
 8001524:	080127d8 	.word	0x080127d8
 8001528:	20000000 	.word	0x20000000
 800152c:	200324a0 	.word	0x200324a0
 8001530:	080127f4 	.word	0x080127f4
 8001534:	2003ed34 	.word	0x2003ed34
 8001538:	2003ecb4 	.word	0x2003ecb4
 800153c:	080012e9 	.word	0x080012e9
 8001540:	08012818 	.word	0x08012818
 8001544:	0801283c 	.word	0x0801283c
 8001548:	08012858 	.word	0x08012858
 800154c:	2003edd0 	.word	0x2003edd0
 8001550:	200324b0 	.word	0x200324b0
 8001554:	2003ed38 	.word	0x2003ed38
 8001558:	080012f9 	.word	0x080012f9
 800155c:	200324a4 	.word	0x200324a4
 8001560:	08012874 	.word	0x08012874
  }

  // Assign model input and output buffers (tensors) to pointers
  model_input = interpreter->input(0);
 8001564:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <main+0x3c0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f009 f954 	bl	800a818 <_ZN6tflite16MicroInterpreter5inputEj>
 8001570:	4603      	mov	r3, r0
 8001572:	4a56      	ldr	r2, [pc, #344]	; (80016cc <main+0x3c4>)
 8001574:	6013      	str	r3, [r2, #0]
  model_output = interpreter->output(0);
 8001576:	4b54      	ldr	r3, [pc, #336]	; (80016c8 <main+0x3c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f009 f96f 	bl	800a860 <_ZN6tflite16MicroInterpreter6outputEj>
 8001582:	4603      	mov	r3, r0
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <main+0x3c8>)
 8001586:	6013      	str	r3, [r2, #0]

  // Get number of elements in input tensor
  num_elements = model_input->bytes / sizeof(float);
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <main+0x3c4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800159a:	494e      	ldr	r1, [pc, #312]	; (80016d4 <main+0x3cc>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00f f8b9 	bl	8010714 <siprintf>
 80015a2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80015a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	1d39      	adds	r1, r7, #4
 80015ae:	2364      	movs	r3, #100	; 0x64
 80015b0:	4849      	ldr	r0, [pc, #292]	; (80016d8 <main+0x3d0>)
 80015b2:	f002 fb87 	bl	8003cc4 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  buf_len = sprintf(buf, "start!\n");
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4948      	ldr	r1, [pc, #288]	; (80016dc <main+0x3d4>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00f f8aa 	bl	8010714 <siprintf>
 80015c0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80015c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	1d39      	adds	r1, r7, #4
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015d0:	4841      	ldr	r0, [pc, #260]	; (80016d8 <main+0x3d0>)
 80015d2:	f002 fb77 	bl	8003cc4 <HAL_UART_Transmit>

  while (1)
  {
//    /* USER CODE END WHILE */

	readUartBytes(model_input->data.f, imagesize);
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <main+0x3c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f887 	bl	80016f4 <_ZL13readUartBytesPfi>

    // Get current timestamp
    timestamp = htim14.Instance->CNT;
 80015e6:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <main+0x3d8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    /* USER CODE BEGIN 3 */

    // Run inference
	tflite_status = interpreter->Invoke();
 80015f0:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <main+0x3c0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f009 f8dd 	bl	800a7b4 <_ZN6tflite16MicroInterpreter6InvokeEv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	if (tflite_status != kTfLiteOk)
 8001600:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <main+0x30c>
	{
	  error_reporter->Report("Invoke failed");
 8001608:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <main+0x3dc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4936      	ldr	r1, [pc, #216]	; (80016e8 <main+0x3e0>)
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f8f8 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	//
	//	int len = strlen(str);
	//	HAL_UART_Transmit(&huart1, (uint8_t *)str, len, HAL_MAX_DELAY);


	float max = 0.0f;
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int maxIndex = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	for(int i=0; i<10; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001628:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800162c:	2b09      	cmp	r3, #9
 800162e:	dc1e      	bgt.n	800166e <main+0x366>
	{
		float val = model_output->data.f[i];
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <main+0x3c8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	67fb      	str	r3, [r7, #124]	; 0x7c
		if(max<val)
 8001642:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8001646:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800164a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	d506      	bpl.n	8001662 <main+0x35a>
		{
			max = val;
 8001654:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			maxIndex = i;
 800165a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800165e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	for(int i=0; i<10; i++)
 8001662:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001666:	3301      	adds	r3, #1
 8001668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800166c:	e7dc      	b.n	8001628 <main+0x320>
		}
	}

	uint32_t timestamp_next = htim14.Instance->CNT;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <main+0x3d8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	67bb      	str	r3, [r7, #120]	; 0x78
	timestamp = (timestamp_next<timestamp)?(65536 - timestamp + timestamp_next):
 8001676:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800167c:	429a      	cmp	r2, r3
 800167e:	d206      	bcs.n	800168e <main+0x386>
 8001680:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800168c:	e003      	b.n	8001696 <main+0x38e>
 800168e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001690:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
										   (timestamp_next-timestamp);

	buf_len = sprintf(buf,
 800169a:	1d38      	adds	r0, r7, #4
 800169c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016a0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80016a4:	4911      	ldr	r1, [pc, #68]	; (80016ec <main+0x3e4>)
 80016a6:	f00f f835 	bl	8010714 <siprintf>
 80016aa:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					  "Predicted: %u | Duration: %lu\r\n",
					  maxIndex,
					  timestamp);
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80016ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	1d39      	adds	r1, r7, #4
 80016b6:	2364      	movs	r3, #100	; 0x64
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <main+0x3d0>)
 80016ba:	f002 fb03 	bl	8003cc4 <HAL_UART_Transmit>

	//HAL_Delay(500);
	HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80016be:	2102      	movs	r1, #2
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <main+0x3e8>)
 80016c2:	f001 f8c4 	bl	800284e <HAL_GPIO_TogglePin>
  }
 80016c6:	e786      	b.n	80015d6 <main+0x2ce>
 80016c8:	200324a4 	.word	0x200324a4
 80016cc:	200324a8 	.word	0x200324a8
 80016d0:	200324ac 	.word	0x200324ac
 80016d4:	08012890 	.word	0x08012890
 80016d8:	20032418 	.word	0x20032418
 80016dc:	080128b0 	.word	0x080128b0
 80016e0:	200323cc 	.word	0x200323cc
 80016e4:	2003249c 	.word	0x2003249c
 80016e8:	080128b8 	.word	0x080128b8
 80016ec:	080128c8 	.word	0x080128c8
 80016f0:	40022000 	.word	0x40022000

080016f4 <_ZL13readUartBytesPfi>:
  /* USER CODE END 3 */
}

void readUartBytes(float *data, int imageSize)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
    uint8_t *rxBuffer = (uint8_t *)malloc(imageSize);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f00e f905 	bl	800f910 <malloc>
 8001706:	4603      	mov	r3, r0
 8001708:	60bb      	str	r3, [r7, #8]
    for(int i=0;i<imageSize;i++)
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	da1e      	bge.n	8001754 <_ZL13readUartBytesPfi+0x60>
    {
    	HAL_UART_Receive(&huart1, (rxBuffer+i), 1, HAL_MAX_DELAY);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	18d1      	adds	r1, r2, r3
 800171c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001720:	2201      	movs	r2, #1
 8001722:	4810      	ldr	r0, [pc, #64]	; (8001764 <_ZL13readUartBytesPfi+0x70>)
 8001724:	f002 fb61 	bl	8003dea <HAL_UART_Receive>
    	data[i] = static_cast<float>(rxBuffer[i]) / 255.0f;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	4413      	add	r3, r2
 8001740:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001768 <_ZL13readUartBytesPfi+0x74>
 8001744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001748:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<imageSize;i++)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3301      	adds	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	e7dc      	b.n	800170e <_ZL13readUartBytesPfi+0x1a>
    }
    free(rxBuffer);
 8001754:	68b8      	ldr	r0, [r7, #8]
 8001756:	f00e f8e3 	bl	800f920 <free>
    //rxBytes = HAL_UART_Receive(&huart1, rxBuffer, imageSize, HAL_MAX_DELAY);
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20032418 	.word	0x20032418
 8001768:	437f0000 	.word	0x437f0000

0800176c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0b4      	sub	sp, #208	; 0xd0
 8001770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001776:	2230      	movs	r2, #48	; 0x30
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f00e f900 	bl	800f980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001780:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2284      	movs	r2, #132	; 0x84
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f00e f8f1 	bl	800f980 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <_Z18SystemClock_Configv+0x128>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <_Z18SystemClock_Configv+0x128>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <_Z18SystemClock_Configv+0x128>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017b6:	4b38      	ldr	r3, [pc, #224]	; (8001898 <_Z18SystemClock_Configv+0x12c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017be:	4a36      	ldr	r2, [pc, #216]	; (8001898 <_Z18SystemClock_Configv+0x12c>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <_Z18SystemClock_Configv+0x12c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d8:	2301      	movs	r3, #1
 80017da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017de:	2310      	movs	r3, #16
 80017e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017f0:	2308      	movs	r3, #8
 80017f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 80;
 80017f6:	2350      	movs	r3, #80	; 0x50
 80017f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001808:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800180c:	4618      	mov	r0, r3
 800180e:	f001 f839 	bl	8002884 <HAL_RCC_OscConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001822:	f000 f8d5 	bl	80019d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001826:	230f      	movs	r3, #15
 8001828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001846:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800184a:	2102      	movs	r1, #2
 800184c:	4618      	mov	r0, r3
 800184e:	f001 fabd 	bl	8002dcc <HAL_RCC_ClockConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <_Z18SystemClock_Configv+0xfa>
  {
    Error_Handler();
 8001862:	f000 f8b5 	bl	80019d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001866:	2340      	movs	r3, #64	; 0x40
 8001868:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800186a:	2300      	movs	r3, #0
 800186c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fc80 	bl	8003178 <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 8001888:	f000 f8a2 	bl	80019d0 <Error_Handler>
  }
}
 800188c:	bf00      	nop
 800188e:	37d0      	adds	r7, #208	; 0xd0
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000

0800189c <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <_ZL13MX_TIM14_Initv+0x48>)
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <_ZL13MX_TIM14_Initv+0x4c>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80 - 1;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <_ZL13MX_TIM14_Initv+0x48>)
 80018a8:	224f      	movs	r2, #79	; 0x4f
 80018aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <_ZL13MX_TIM14_Initv+0x48>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <_ZL13MX_TIM14_Initv+0x48>)
 80018b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <_ZL13MX_TIM14_Initv+0x48>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <_ZL13MX_TIM14_Initv+0x48>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <_ZL13MX_TIM14_Initv+0x48>)
 80018c8:	f002 f846 	bl	8003958 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf14      	ite	ne
 80018d2:	2301      	movne	r3, #1
 80018d4:	2300      	moveq	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 80018dc:	f000 f878 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200323cc 	.word	0x200323cc
 80018e8:	40002000 	.word	0x40002000

080018ec <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <_ZL19MX_USART1_UART_Initv+0x64>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 80018f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001930:	f002 f97a 	bl	8003c28 <HAL_UART_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001944:	f000 f844 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20032418 	.word	0x20032418
 8001950:	40011000 	.word	0x40011000

08001954 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_ZL12MX_GPIO_Initv+0x4c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <_ZL12MX_GPIO_Initv+0x4c>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <_ZL12MX_GPIO_Initv+0x4c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef gpioInitStructure;

	gpioInitStructure.Pin = GPIO_PIN_1;
 8001972:	2302      	movs	r3, #2
 8001974:	607b      	str	r3, [r7, #4]
	gpioInitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
	gpioInitStructure.Pull = GPIO_PULLUP;
 800197a:	2301      	movs	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
	gpioInitStructure.Speed = GPIO_SPEED_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOI, &gpioInitStructure);
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <_ZL12MX_GPIO_Initv+0x50>)
 8001988:	f000 fd9c 	bl	80024c4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2102      	movs	r1, #2
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <_ZL12MX_GPIO_Initv+0x50>)
 8001992:	f000 ff43 	bl	800281c <HAL_GPIO_WritePin>

}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40022000 	.word	0x40022000

080019a8 <DebugLog>:

/* USER CODE BEGIN 4 */

extern "C" void DebugLog(const char* s)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)s, strlen(s), 100);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7fe fc87 	bl	80002c4 <strlen>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	2364      	movs	r3, #100	; 0x64
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4803      	ldr	r0, [pc, #12]	; (80019cc <DebugLog+0x24>)
 80019c0:	f002 f980 	bl	8003cc4 <HAL_UART_Transmit>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20032418 	.word	0x20032418

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <Error_Handler+0x8>

080019da <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 80019e2:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f8e0 	bl	8001bc2 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8001a02:	4603      	mov	r3, r0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ffde 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001a1e:	4603      	mov	r3, r0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f8b9 	bl	8001bac <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8001a3a:	4603      	mov	r3, r0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8001a52:	897b      	ldrh	r3, [r7, #10]
 8001a54:	4619      	mov	r1, r3
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff fb3c 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001a60:	8afb      	ldrh	r3, [r7, #22]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	8afb      	ldrh	r3, [r7, #22]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ffcd 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001a72:	4603      	mov	r3, r0
 8001a74:	e000      	b.n	8001a78 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001a76:	687b      	ldr	r3, [r7, #4]
  }
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f8a6 	bl	8001bda <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001a8e:	4603      	mov	r3, r0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f8ac 	bl	8001bfe <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f8b4 	bl	8001c16 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	08016f0c 	.word	0x08016f0c

08001ad8 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ffe8 	bl	8001ab8 <_ZN6tflite10OpResolverC1Ev>
 8001ae8:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	08016ee0 	.word	0x08016ee0

08001afc <_ZN6tflite22MicroMutableOpResolverILj3EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ffe5 	bl	8001ad8 <_ZN6tflite15MicroOpResolverC1Ev>
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <_ZN6tflite22MicroMutableOpResolverILj3EEC1EPNS_13ErrorReporterE+0x34>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	665a      	str	r2, [r3, #100]	; 0x64
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	679a      	str	r2, [r3, #120]	; 0x78
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	08016eb4 	.word	0x08016eb4

08001b34 <_ZN6tflite22MicroMutableOpResolverILj3EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFloorMod() {
    return AddBuiltin(BuiltinOperator_FLOOR_MOD, tflite::Register_FLOOR_MOD(),
                      ParseFloorMod);
  }

  TfLiteStatus AddFullyConnected(
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_FULLY_CONNECTED()) {
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
                      ParseFullyConnected);
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <_ZN6tflite22MicroMutableOpResolverILj3EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	2109      	movs	r1, #9
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f87b 	bl	8001c40 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001b4a:	4603      	mov	r3, r0
  }
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	08004cb5 	.word	0x08004cb5

08001b58 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddSoftmaxERK18TfLiteRegistration>:
  TfLiteStatus AddSin() {
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
                      ParseSin);
  }

  TfLiteStatus AddSoftmax(
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
      const TfLiteRegistration& registration = Register_SOFTMAX()) {
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddSoftmaxERK18TfLiteRegistration+0x20>)
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	2119      	movs	r1, #25
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f869 	bl	8001c40 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001b6e:	4603      	mov	r3, r0
  }
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	08004eed 	.word	0x08004eed

08001b7c <_ZN6tflite22MicroMutableOpResolverILj3EE10AddReshapeEv>:
  TfLiteStatus AddReshape() {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00b fc3f 	bl	800d40c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 8001b8e:	f107 0208 	add.w	r2, r7, #8
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddReshapeEv+0x2c>)
 8001b94:	2116      	movs	r1, #22
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f852 	bl	8001c40 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001b9c:	4603      	mov	r3, r0
  }
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	08004df1 	.word	0x08004df1

08001bac <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    return t;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	80fb      	strh	r3, [r7, #6]
    return t;
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8001be2:	f7ff fa4d 	bl	8001080 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fef5 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f89a 	bl	8001d40 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
	{ }
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	d10b      	bne.n	8001c6e <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c62:	4934      	ldr	r1, [pc, #208]	; (8001d34 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fdcd 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e05d      	b.n	8001d2a <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3318      	adds	r3, #24
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	7afa      	ldrb	r2, [r7, #11]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	4798      	blx	r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c9a:	7afa      	ldrb	r2, [r7, #11]
 8001c9c:	4926      	ldr	r1, [pc, #152]	; (8001d38 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 fdb0 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e040      	b.n	8001d2a <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d90c      	bls.n	8001cca <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001cbc:	7afa      	ldrb	r2, [r7, #11]
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	491e      	ldr	r1, [pc, #120]	; (8001d3c <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 8001cc2:	f002 fd9f 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e02f      	b.n	8001d2a <_ZN6tflite22MicroMutableOpResolverILj3EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	015b      	lsls	r3, r3, #5
 8001cd2:	4413      	add	r3, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	1d1c      	adds	r4, r3, #4
 8001cd8:	4615      	mov	r5, r2
 8001cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cea:	7afa      	ldrb	r2, [r7, #11]
 8001cec:	68f9      	ldr	r1, [r7, #12]
 8001cee:	015b      	lsls	r3, r3, #5
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3318      	adds	r3, #24
 8001cf4:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	665a      	str	r2, [r3, #100]	; 0x64

    builtin_codes_[num_buitin_ops_] = op;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	7afa      	ldrb	r2, [r7, #11]
 8001d0a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    builtin_parsers_[num_buitin_ops_] = parser;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	331a      	adds	r3, #26
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	679a      	str	r2, [r3, #120]	; 0x78

    return kTfLiteOk;
 8001d28:	2300      	movs	r3, #0
  }
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bdb0      	pop	{r4, r5, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	080128e8 	.word	0x080128e8
 8001d38:	08012930 	.word	0x08012930
 8001d3c:	08012980 	.word	0x08012980

08001d40 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d101      	bne.n	8001d6c <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e018      	b.n	8001d9e <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d210      	bcs.n	8001d9c <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x46>
      const TfLiteRegistration& registration = registrations_[i];
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	015b      	lsls	r3, r3, #5
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	3304      	adds	r3, #4
 8001d84:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d101      	bne.n	8001d94 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x3e>
        return &registration;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	e004      	b.n	8001d9e <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3301      	adds	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e7e9      	b.n	8001d70 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001d9c:	2300      	movs	r3, #0
  }
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev+0x20>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fa47 	bl	8001250 <_ZN6tflite15MicroOpResolverD1Ev>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08016eb4 	.word	0x08016eb4

08001dd0 <_ZN6tflite22MicroMutableOpResolverILj3EED0Ev>:
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ffe7 	bl	8001dac <_ZN6tflite22MicroMutableOpResolverILj3EED1Ev>
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f00d faea 	bl	800f3ba <_ZdlPvj>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d218      	bcs.n	8001e3a <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015b      	lsls	r3, r3, #5
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	3304      	adds	r3, #4
 8001e12:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d10a      	bne.n	8001e32 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x42>
          (strcmp(registration.custom_name, op) == 0)) {
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fa44 	bl	80002b0 <strcmp>
 8001e28:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x42>
        return &registration;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	e004      	b.n	8001e3c <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3301      	adds	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e7e1      	b.n	8001dfe <_ZNK6tflite22MicroMutableOpResolverILj3EE6FindOpEPKc+0xe>
    return nullptr;
 8001e3a:	2300      	movs	r3, #0
  }
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d901      	bls.n	8001e5c <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 8001e58:	f00d fcf3 	bl	800f842 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d212      	bcs.n	8001e90 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3368      	adds	r3, #104	; 0x68
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d106      	bne.n	8001e88 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x44>
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	331a      	adds	r3, #26
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	e004      	b.n	8001e92 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e7e7      	b.n	8001e60 <_ZNK6tflite22MicroMutableOpResolverILj3EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001e90:	2300      	movs	r3, #0
  }
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_MspInit+0x44>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_TIM_Base_MspInit+0x38>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d10b      	bne.n	8001f0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_TIM_Base_MspInit+0x3c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_TIM_Base_MspInit+0x3c>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_TIM_Base_MspInit+0x3c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40002000 	.word	0x40002000
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_UART_MspInit+0xb4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d144      	bne.n	8001fd0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f4c:	f043 0310 	orr.w	r3, r3, #16
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <HAL_UART_MspInit+0xbc>)
 8001faa:	f000 fa8b 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <HAL_UART_MspInit+0xc0>)
 8001fcc:	f000 fa7a 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020000 	.word	0x40020000

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <NMI_Handler+0x4>

08001fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <UsageFault_Handler+0x4>

08002006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002034:	f000 f940 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
	return 1;
 8002040:	2301      	movs	r3, #1
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_kill>:

int _kill(int pid, int sig)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002056:	f00d fc1f 	bl	800f898 <__errno>
 800205a:	4603      	mov	r3, r0
 800205c:	2216      	movs	r2, #22
 800205e:	601a      	str	r2, [r3, #0]
	return -1;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_exit>:

void _exit (int status)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ffe7 	bl	800204c <_kill>
	while (1) {}		/* Make sure we hang here */
 800207e:	e7fe      	b.n	800207e <_exit+0x12>

08002080 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e00a      	b.n	80020a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002092:	f3af 8000 	nop.w
 8002096:	4601      	mov	r1, r0
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	60ba      	str	r2, [r7, #8]
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dbf0      	blt.n	8002092 <_read+0x12>
	}

return len;
 80020b0:	687b      	ldr	r3, [r7, #4]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e009      	b.n	80020e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60ba      	str	r2, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dbf1      	blt.n	80020cc <_write+0x12>
	}
	return len;
 80020e8:	687b      	ldr	r3, [r7, #4]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_close>:

int _close(int file)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
	return -1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800211a:	605a      	str	r2, [r3, #4]
	return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <_isatty>:

int _isatty(int file)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
	return 1;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
	return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <_sbrk+0x5c>)
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <_sbrk+0x60>)
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <_sbrk+0x64>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <_sbrk+0x68>)
 800217c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d207      	bcs.n	800219c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800218c:	f00d fb84 	bl	800f898 <__errno>
 8002190:	4603      	mov	r3, r0
 8002192:	220c      	movs	r2, #12
 8002194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219a:	e009      	b.n	80021b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <_sbrk+0x64>)
 80021ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20050000 	.word	0x20050000
 80021bc:	00000400 	.word	0x00000400
 80021c0:	2003edd4 	.word	0x2003edd4
 80021c4:	2003ee88 	.word	0x2003ee88

080021c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <SystemInit+0x20>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <SystemInit+0x20>)
 80021d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002224 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f0:	480d      	ldr	r0, [pc, #52]	; (8002228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021f2:	490e      	ldr	r1, [pc, #56]	; (800222c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002208:	4c0b      	ldr	r4, [pc, #44]	; (8002238 <LoopFillZerobss+0x26>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002216:	f7ff ffd7 	bl	80021c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221a:	f00d fb55 	bl	800f8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221e:	f7ff f873 	bl	8001308 <main>
  bx  lr    
 8002222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002224:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800222c:	200323ac 	.word	0x200323ac
  ldr r2, =_sidata
 8002230:	080176f0 	.word	0x080176f0
  ldr r2, =_sbss
 8002234:	200323b0 	.word	0x200323b0
  ldr r4, =_ebss
 8002238:	2003ee84 	.word	0x2003ee84

0800223c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800223c:	e7fe      	b.n	800223c <ADC_IRQHandler>

0800223e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002242:	2003      	movs	r0, #3
 8002244:	f000 f90a 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002248:	200f      	movs	r0, #15
 800224a:	f000 f805 	bl	8002258 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800224e:	f7ff fe25 	bl	8001e9c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_InitTick+0x54>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_InitTick+0x58>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f917 	bl	80024aa <HAL_SYSTICK_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00e      	b.n	80022a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d80a      	bhi.n	80022a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800228c:	2200      	movs	r2, #0
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002294:	f000 f8ed 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002298:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <HAL_InitTick+0x5c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200321c4 	.word	0x200321c4
 80022b0:	200321cc 	.word	0x200321cc
 80022b4:	200321c8 	.word	0x200321c8

080022b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_IncTick+0x20>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_IncTick+0x24>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <HAL_IncTick+0x24>)
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200321cc 	.word	0x200321cc
 80022dc:	2003ee70 	.word	0x2003ee70

080022e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return uwTick;
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <HAL_GetTick+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	2003ee70 	.word	0x2003ee70

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <__NVIC_SetPriorityGrouping+0x40>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	4313      	orrs	r3, r2
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x40>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00
 800233c:	05fa0000 	.word	0x05fa0000

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff47 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff5c 	bl	8002340 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffb0 	bl	8002418 <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e175      	b.n	80027d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8164 	bne.w	80027ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d00b      	beq.n	8002522 <HAL_GPIO_Init+0x5e>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002516:	2b11      	cmp	r3, #17
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b12      	cmp	r3, #18
 8002520:	d130      	bne.n	8002584 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0201 	and.w	r2, r3, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x100>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b12      	cmp	r3, #18
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80be 	beq.w	80027ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_GPIO_Init+0x324>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002666:	4a61      	ldr	r2, [pc, #388]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d037      	beq.n	8002702 <HAL_GPIO_Init+0x23e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x334>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x236>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_GPIO_Init+0x338>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x232>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_GPIO_Init+0x33c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x22e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a53      	ldr	r2, [pc, #332]	; (8002804 <HAL_GPIO_Init+0x340>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x22a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_GPIO_Init+0x344>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x226>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_GPIO_Init+0x348>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x222>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a50      	ldr	r2, [pc, #320]	; (8002810 <HAL_GPIO_Init+0x34c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x21e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <HAL_GPIO_Init+0x350>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x21a>
 80026da:	2309      	movs	r3, #9
 80026dc:	e012      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026de:	230a      	movs	r3, #10
 80026e0:	e010      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_GPIO_Init+0x354>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002770:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae86 	bls.w	80024e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	40022400 	.word	0x40022400
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	041a      	lsls	r2, r3, #16
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43d9      	mvns	r1, r3
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	400b      	ands	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	619a      	str	r2, [r3, #24]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e291      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8087 	beq.w	80029b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a8:	4b96      	ldr	r3, [pc, #600]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d00c      	beq.n	80028ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b4:	4b93      	ldr	r3, [pc, #588]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d112      	bne.n	80028e6 <HAL_RCC_OscConfig+0x62>
 80028c0:	4b90      	ldr	r3, [pc, #576]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028cc:	d10b      	bne.n	80028e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ce:	4b8d      	ldr	r3, [pc, #564]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d06c      	beq.n	80029b4 <HAL_RCC_OscConfig+0x130>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d168      	bne.n	80029b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e26b      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ee:	d106      	bne.n	80028fe <HAL_RCC_OscConfig+0x7a>
 80028f0:	4b84      	ldr	r3, [pc, #528]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a83      	ldr	r2, [pc, #524]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e02e      	b.n	800295c <HAL_RCC_OscConfig+0xd8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0x9c>
 8002906:	4b7f      	ldr	r3, [pc, #508]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a7e      	ldr	r2, [pc, #504]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 800290c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b7c      	ldr	r3, [pc, #496]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7b      	ldr	r2, [pc, #492]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e01d      	b.n	800295c <HAL_RCC_OscConfig+0xd8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0xc0>
 800292a:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a75      	ldr	r2, [pc, #468]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b73      	ldr	r3, [pc, #460]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a72      	ldr	r2, [pc, #456]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e00b      	b.n	800295c <HAL_RCC_OscConfig+0xd8>
 8002944:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 800294a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b6c      	ldr	r3, [pc, #432]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6b      	ldr	r2, [pc, #428]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d013      	beq.n	800298c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7ff fcbc 	bl	80022e0 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800296c:	f7ff fcb8 	bl	80022e0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	; 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e21f      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0xe8>
 800298a:	e014      	b.n	80029b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7ff fca8 	bl	80022e0 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002994:	f7ff fca4 	bl	80022e0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e20b      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x110>
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d069      	beq.n	8002a96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c2:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ce:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d11c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x190>
 80029da:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d116      	bne.n	8002a14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_RCC_OscConfig+0x17a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e1df      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	493d      	ldr	r1, [pc, #244]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	e040      	b.n	8002a96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d023      	beq.n	8002a64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1c:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a38      	ldr	r2, [pc, #224]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff fc5a 	bl	80022e0 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a30:	f7ff fc56 	bl	80022e0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e1bd      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4929      	ldr	r1, [pc, #164]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
 8002a62:	e018      	b.n	8002a96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7ff fc36 	bl	80022e0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a78:	f7ff fc32 	bl	80022e0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e199      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d038      	beq.n	8002b14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d019      	beq.n	8002ade <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab6:	f7ff fc13 	bl	80022e0 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abe:	f7ff fc0f 	bl	80022e0 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e176      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x23a>
 8002adc:	e01a      	b.n	8002b14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7ff fbf9 	bl	80022e0 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af2:	f7ff fbf5 	bl	80022e0 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d903      	bls.n	8002b08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e15c      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
 8002b04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4b91      	ldr	r3, [pc, #580]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ee      	bne.n	8002af2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a4 	beq.w	8002c6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b22:	4b8b      	ldr	r3, [pc, #556]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10d      	bne.n	8002b4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	4b88      	ldr	r3, [pc, #544]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a87      	ldr	r2, [pc, #540]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b46:	2301      	movs	r3, #1
 8002b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4a:	4b82      	ldr	r3, [pc, #520]	; (8002d54 <HAL_RCC_OscConfig+0x4d0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d118      	bne.n	8002b88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b56:	4b7f      	ldr	r3, [pc, #508]	; (8002d54 <HAL_RCC_OscConfig+0x4d0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7e      	ldr	r2, [pc, #504]	; (8002d54 <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b62:	f7ff fbbd 	bl	80022e0 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6a:	f7ff fbb9 	bl	80022e0 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b64      	cmp	r3, #100	; 0x64
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e120      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7c:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <HAL_RCC_OscConfig+0x4d0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCC_OscConfig+0x31a>
 8002b90:	4b6f      	ldr	r3, [pc, #444]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a6e      	ldr	r2, [pc, #440]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	e02d      	b.n	8002bfa <HAL_RCC_OscConfig+0x376>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x33c>
 8002ba6:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a69      	ldr	r2, [pc, #420]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	4b67      	ldr	r3, [pc, #412]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	4a66      	ldr	r2, [pc, #408]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002bb8:	f023 0304 	bic.w	r3, r3, #4
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbe:	e01c      	b.n	8002bfa <HAL_RCC_OscConfig+0x376>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d10c      	bne.n	8002be2 <HAL_RCC_OscConfig+0x35e>
 8002bc8:	4b61      	ldr	r3, [pc, #388]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a60      	ldr	r2, [pc, #384]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002bce:	f043 0304 	orr.w	r3, r3, #4
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd4:	4b5e      	ldr	r3, [pc, #376]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a5d      	ldr	r2, [pc, #372]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
 8002be0:	e00b      	b.n	8002bfa <HAL_RCC_OscConfig+0x376>
 8002be2:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a5a      	ldr	r2, [pc, #360]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70
 8002bee:	4b58      	ldr	r3, [pc, #352]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a57      	ldr	r2, [pc, #348]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d015      	beq.n	8002c2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7ff fb6d 	bl	80022e0 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7ff fb69 	bl	80022e0 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0ce      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0ee      	beq.n	8002c0a <HAL_RCC_OscConfig+0x386>
 8002c2c:	e014      	b.n	8002c58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7ff fb57 	bl	80022e0 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7ff fb53 	bl	80022e0 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4c:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ee      	bne.n	8002c36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d105      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a3b      	ldr	r2, [pc, #236]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 80a4 	beq.w	8002dbc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c74:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d06b      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d149      	bne.n	8002d1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c88:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7ff fb24 	bl	80022e0 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7ff fb20 	bl	80022e0 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e087      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ce6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7ff faf4 	bl	80022e0 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7ff faf0 	bl	80022e0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e057      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x478>
 8002d1a:	e04f      	b.n	8002dbc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7ff fada 	bl	80022e0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7ff fad6 	bl	80022e0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e03d      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4ac>
 8002d4e:	e035      	b.n	8002dbc <HAL_RCC_OscConfig+0x538>
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x544>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d028      	beq.n	8002db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d121      	bne.n	8002db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d11a      	bne.n	8002db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d111      	bne.n	8002db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0d0      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d910      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 020f 	bic.w	r2, r3, #15
 8002dfa:	4965      	ldr	r1, [pc, #404]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0b8      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e2c:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a58      	ldr	r2, [pc, #352]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	494d      	ldr	r1, [pc, #308]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d040      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b47      	ldr	r3, [pc, #284]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d115      	bne.n	8002eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e07f      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e073      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e06b      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4936      	ldr	r1, [pc, #216]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec0:	f7ff fa0e 	bl	80022e0 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7ff fa0a 	bl	80022e0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e053      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 020c 	and.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1eb      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d210      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 020f 	bic.w	r2, r3, #15
 8002f06:	4922      	ldr	r1, [pc, #136]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e032      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4916      	ldr	r1, [pc, #88]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	490e      	ldr	r1, [pc, #56]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f5e:	f000 f821 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f62:	4602      	mov	r2, r0
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	490a      	ldr	r1, [pc, #40]	; (8002f98 <HAL_RCC_ClockConfig+0x1cc>)
 8002f70:	5ccb      	ldrb	r3, [r1, r3]
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1d0>)
 8002f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1d4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff f96a 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023c00 	.word	0x40023c00
 8002f94:	40023800 	.word	0x40023800
 8002f98:	08016f38 	.word	0x08016f38
 8002f9c:	200321c4 	.word	0x200321c4
 8002fa0:	200321c8 	.word	0x200321c8

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b5b0      	push	{r4, r5, r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002faa:	2100      	movs	r1, #0
 8002fac:	6079      	str	r1, [r7, #4]
 8002fae:	2100      	movs	r1, #0
 8002fb0:	60f9      	str	r1, [r7, #12]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fba:	4952      	ldr	r1, [pc, #328]	; (8003104 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fbc:	6889      	ldr	r1, [r1, #8]
 8002fbe:	f001 010c 	and.w	r1, r1, #12
 8002fc2:	2908      	cmp	r1, #8
 8002fc4:	d00d      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002fc6:	2908      	cmp	r1, #8
 8002fc8:	f200 8094 	bhi.w	80030f4 <HAL_RCC_GetSysClockFreq+0x150>
 8002fcc:	2900      	cmp	r1, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x32>
 8002fd0:	2904      	cmp	r1, #4
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x38>
 8002fd4:	e08e      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd6:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <HAL_RCC_GetSysClockFreq+0x164>)
 8002fd8:	60bb      	str	r3, [r7, #8]
      break;
 8002fda:	e08e      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_RCC_GetSysClockFreq+0x168>)
 8002fde:	60bb      	str	r3, [r7, #8]
      break;
 8002fe0:	e08b      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe2:	4948      	ldr	r1, [pc, #288]	; (8003104 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fe4:	6849      	ldr	r1, [r1, #4]
 8002fe6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002fea:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fec:	4945      	ldr	r1, [pc, #276]	; (8003104 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fee:	6849      	ldr	r1, [r1, #4]
 8002ff0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ff4:	2900      	cmp	r1, #0
 8002ff6:	d024      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff8:	4942      	ldr	r1, [pc, #264]	; (8003104 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ffa:	6849      	ldr	r1, [r1, #4]
 8002ffc:	0989      	lsrs	r1, r1, #6
 8002ffe:	4608      	mov	r0, r1
 8003000:	f04f 0100 	mov.w	r1, #0
 8003004:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003008:	f04f 0500 	mov.w	r5, #0
 800300c:	ea00 0204 	and.w	r2, r0, r4
 8003010:	ea01 0305 	and.w	r3, r1, r5
 8003014:	493d      	ldr	r1, [pc, #244]	; (800310c <HAL_RCC_GetSysClockFreq+0x168>)
 8003016:	fb01 f003 	mul.w	r0, r1, r3
 800301a:	2100      	movs	r1, #0
 800301c:	fb01 f102 	mul.w	r1, r1, r2
 8003020:	1844      	adds	r4, r0, r1
 8003022:	493a      	ldr	r1, [pc, #232]	; (800310c <HAL_RCC_GetSysClockFreq+0x168>)
 8003024:	fba2 0101 	umull	r0, r1, r2, r1
 8003028:	1863      	adds	r3, r4, r1
 800302a:	4619      	mov	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	461a      	mov	r2, r3
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	f7fd fe32 	bl	8000c9c <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e04a      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_GetSysClockFreq+0x160>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	461a      	mov	r2, r3
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	ea02 0400 	and.w	r4, r2, r0
 800305a:	ea03 0501 	and.w	r5, r3, r1
 800305e:	4620      	mov	r0, r4
 8003060:	4629      	mov	r1, r5
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	014b      	lsls	r3, r1, #5
 800306c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003070:	0142      	lsls	r2, r0, #5
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	1b00      	subs	r0, r0, r4
 8003078:	eb61 0105 	sbc.w	r1, r1, r5
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	018b      	lsls	r3, r1, #6
 8003086:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800308a:	0182      	lsls	r2, r0, #6
 800308c:	1a12      	subs	r2, r2, r0
 800308e:	eb63 0301 	sbc.w	r3, r3, r1
 8003092:	f04f 0000 	mov.w	r0, #0
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	00d9      	lsls	r1, r3, #3
 800309c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030a0:	00d0      	lsls	r0, r2, #3
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	1912      	adds	r2, r2, r4
 80030a8:	eb45 0303 	adc.w	r3, r5, r3
 80030ac:	f04f 0000 	mov.w	r0, #0
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	0299      	lsls	r1, r3, #10
 80030b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030ba:	0290      	lsls	r0, r2, #10
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	f7fd fde6 	bl	8000c9c <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_GetSysClockFreq+0x160>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	3301      	adds	r3, #1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	60bb      	str	r3, [r7, #8]
      break;
 80030f2:	e002      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <HAL_RCC_GetSysClockFreq+0x164>)
 80030f6:	60bb      	str	r3, [r7, #8]
      break;
 80030f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fa:	68bb      	ldr	r3, [r7, #8]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bdb0      	pop	{r4, r5, r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	017d7840 	.word	0x017d7840

08003110 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	200321c4 	.word	0x200321c4

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	; (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	08016f48 	.word	0x08016f48

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffdc 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0b5b      	lsrs	r3, r3, #13
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	08016f48 	.word	0x08016f48

08003178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031a0:	4b69      	ldr	r3, [pc, #420]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a68      	ldr	r2, [pc, #416]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031aa:	6093      	str	r3, [r2, #8]
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	4964      	ldr	r1, [pc, #400]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d017      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031d2:	4b5d      	ldr	r3, [pc, #372]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e0:	4959      	ldr	r1, [pc, #356]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f0:	d101      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031fe:	2301      	movs	r3, #1
 8003200:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d017      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800320e:	4b4e      	ldr	r3, [pc, #312]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003214:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	494a      	ldr	r1, [pc, #296]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322c:	d101      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800322e:	2301      	movs	r3, #1
 8003230:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800323a:	2301      	movs	r3, #1
 800323c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800324a:	2301      	movs	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 808b 	beq.w	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	4a39      	ldr	r2, [pc, #228]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003266:	6413      	str	r3, [r2, #64]	; 0x40
 8003268:	4b37      	ldr	r3, [pc, #220]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003274:	4b35      	ldr	r3, [pc, #212]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a34      	ldr	r2, [pc, #208]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800327a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003280:	f7ff f82e 	bl	80022e0 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003288:	f7ff f82a 	bl	80022e0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e357      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800329a:	4b2c      	ldr	r3, [pc, #176]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d035      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d02e      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ce:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	4a1a      	ldr	r2, [pc, #104]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d114      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe fff2 	bl	80022e0 <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	e00a      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fe ffee 	bl	80022e0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e319      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0ee      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332e:	d111      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800333e:	400b      	ands	r3, r1
 8003340:	4901      	ldr	r1, [pc, #4]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
 8003346:	e00b      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003348:	40023800 	.word	0x40023800
 800334c:	40007000 	.word	0x40007000
 8003350:	0ffffcff 	.word	0x0ffffcff
 8003354:	4bb1      	ldr	r3, [pc, #708]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4ab0      	ldr	r2, [pc, #704]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800335a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800335e:	6093      	str	r3, [r2, #8]
 8003360:	4bae      	ldr	r3, [pc, #696]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	49ab      	ldr	r1, [pc, #684]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800336e:	4313      	orrs	r3, r2
 8003370:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800337e:	4ba7      	ldr	r3, [pc, #668]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003384:	4aa5      	ldr	r2, [pc, #660]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800338a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800338e:	4ba3      	ldr	r3, [pc, #652]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003390:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	49a0      	ldr	r1, [pc, #640]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ac:	4b9b      	ldr	r3, [pc, #620]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ba:	4998      	ldr	r1, [pc, #608]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ce:	4b93      	ldr	r3, [pc, #588]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033dc:	498f      	ldr	r1, [pc, #572]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033f0:	4b8a      	ldr	r3, [pc, #552]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033fe:	4987      	ldr	r1, [pc, #540]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003412:	4b82      	ldr	r3, [pc, #520]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	497e      	ldr	r1, [pc, #504]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003434:	4b79      	ldr	r3, [pc, #484]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f023 0203 	bic.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	4976      	ldr	r1, [pc, #472]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003456:	4b71      	ldr	r3, [pc, #452]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	f023 020c 	bic.w	r2, r3, #12
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003464:	496d      	ldr	r1, [pc, #436]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003478:	4b68      	ldr	r3, [pc, #416]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	4965      	ldr	r1, [pc, #404]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800349a:	4b60      	ldr	r3, [pc, #384]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	495c      	ldr	r1, [pc, #368]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034bc:	4b57      	ldr	r3, [pc, #348]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	4954      	ldr	r1, [pc, #336]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034de:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	494b      	ldr	r1, [pc, #300]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003500:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	4943      	ldr	r1, [pc, #268]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003522:	4b3e      	ldr	r3, [pc, #248]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003530:	493a      	ldr	r1, [pc, #232]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003544:	4b35      	ldr	r3, [pc, #212]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003552:	4932      	ldr	r1, [pc, #200]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d011      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003574:	4929      	ldr	r1, [pc, #164]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003584:	d101      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b4:	4919      	ldr	r1, [pc, #100]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d8:	4910      	ldr	r1, [pc, #64]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d006      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80d9 	beq.w	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a08      	ldr	r2, [pc, #32]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003600:	f7fe fe6e 	bl	80022e0 <HAL_GetTick>
 8003604:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003606:	e00b      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003608:	f7fe fe6a 	bl	80022e0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d904      	bls.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e197      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003620:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ed      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d021      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	2b00      	cmp	r3, #0
 800363e:	d11d      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003640:	4b64      	ldr	r3, [pc, #400]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800364e:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003654:	0e1b      	lsrs	r3, r3, #24
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	019a      	lsls	r2, r3, #6
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	041b      	lsls	r3, r3, #16
 8003666:	431a      	orrs	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	071b      	lsls	r3, r3, #28
 8003674:	4957      	ldr	r1, [pc, #348]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02e      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a6:	d129      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036a8:	4b4a      	ldr	r3, [pc, #296]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036bc:	0f1b      	lsrs	r3, r3, #28
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	019a      	lsls	r2, r3, #6
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	071b      	lsls	r3, r3, #28
 80036dc:	493d      	ldr	r1, [pc, #244]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036e4:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ea:	f023 021f 	bic.w	r2, r3, #31
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	3b01      	subs	r3, #1
 80036f4:	4937      	ldr	r1, [pc, #220]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01d      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370e:	0e1b      	lsrs	r3, r3, #24
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003716:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371c:	0f1b      	lsrs	r3, r3, #28
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	019a      	lsls	r2, r3, #6
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	431a      	orrs	r2, r3
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	061b      	lsls	r3, r3, #24
 8003736:	431a      	orrs	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	071b      	lsls	r3, r3, #28
 800373c:	4925      	ldr	r1, [pc, #148]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d011      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	019a      	lsls	r2, r3, #6
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	061b      	lsls	r3, r3, #24
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	071b      	lsls	r3, r3, #28
 800376c:	4919      	ldr	r1, [pc, #100]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800377a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800377e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003780:	f7fe fdae 	bl	80022e0 <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003788:	f7fe fdaa 	bl	80022e0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0d7      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 80cd 	bne.w	8003948 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ba:	f7fe fd91 	bl	80022e0 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037c2:	f7fe fd8d 	bl	80022e0 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b64      	cmp	r3, #100	; 0x64
 80037ce:	d903      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0ba      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80037d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037d8:	4b5e      	ldr	r3, [pc, #376]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037e4:	d0ed      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02e      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d12a      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800380e:	4b51      	ldr	r3, [pc, #324]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800381c:	4b4d      	ldr	r3, [pc, #308]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	0f1b      	lsrs	r3, r3, #28
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	019a      	lsls	r2, r3, #6
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	061b      	lsls	r3, r3, #24
 800383c:	431a      	orrs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	071b      	lsls	r3, r3, #28
 8003842:	4944      	ldr	r1, [pc, #272]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800384a:	4b42      	ldr	r3, [pc, #264]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800384c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003850:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	3b01      	subs	r3, #1
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	493d      	ldr	r1, [pc, #244]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d022      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003878:	d11d      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800387a:	4b36      	ldr	r3, [pc, #216]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	0e1b      	lsrs	r3, r3, #24
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003888:	4b32      	ldr	r3, [pc, #200]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	0f1b      	lsrs	r3, r3, #28
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	019a      	lsls	r2, r3, #6
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	041b      	lsls	r3, r3, #16
 80038a2:	431a      	orrs	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	061b      	lsls	r3, r3, #24
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	071b      	lsls	r3, r3, #28
 80038ae:	4929      	ldr	r1, [pc, #164]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d028      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038d0:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	0c1b      	lsrs	r3, r3, #16
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	019a      	lsls	r2, r3, #6
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	041b      	lsls	r3, r3, #16
 80038e8:	431a      	orrs	r2, r3
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	071b      	lsls	r3, r3, #28
 80038f6:	4917      	ldr	r1, [pc, #92]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003904:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	4911      	ldr	r1, [pc, #68]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0e      	ldr	r2, [pc, #56]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800391a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003920:	f7fe fcde 	bl	80022e0 <HAL_GetTick>
 8003924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003928:	f7fe fcda 	bl	80022e0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e007      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003946:	d1ef      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e049      	b.n	80039fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fe fab0 	bl	8001ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f000 f8a6 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d001      	beq.n	8003a20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e04c      	b.n	8003aba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <HAL_TIM_Base_Start+0xc0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <HAL_TIM_Base_Start+0x70>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d01d      	beq.n	8003a78 <HAL_TIM_Base_Start+0x70>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a22      	ldr	r2, [pc, #136]	; (8003acc <HAL_TIM_Base_Start+0xc4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <HAL_TIM_Base_Start+0x70>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <HAL_TIM_Base_Start+0xc8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_TIM_Base_Start+0x70>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <HAL_TIM_Base_Start+0xcc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_TIM_Base_Start+0x70>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_TIM_Base_Start+0xd0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_TIM_Base_Start+0x70>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_TIM_Base_Start+0xd4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_TIM_Base_Start+0x70>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <HAL_TIM_Base_Start+0xd8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d115      	bne.n	8003aa4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_TIM_Base_Start+0xdc>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d015      	beq.n	8003ab6 <HAL_TIM_Base_Start+0xae>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d011      	beq.n	8003ab6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	e008      	b.n	8003ab6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e000      	b.n	8003ab8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40010400 	.word	0x40010400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40001800 	.word	0x40001800
 8003ae4:	00010007 	.word	0x00010007

08003ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a40      	ldr	r2, [pc, #256]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d00f      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <TIM_Base_SetConfig+0x118>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a3c      	ldr	r2, [pc, #240]	; (8003c04 <TIM_Base_SetConfig+0x11c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d007      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a3b      	ldr	r2, [pc, #236]	; (8003c08 <TIM_Base_SetConfig+0x120>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a3a      	ldr	r2, [pc, #232]	; (8003c0c <TIM_Base_SetConfig+0x124>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d108      	bne.n	8003b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2f      	ldr	r2, [pc, #188]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02b      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d027      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2c      	ldr	r2, [pc, #176]	; (8003c00 <TIM_Base_SetConfig+0x118>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d023      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <TIM_Base_SetConfig+0x11c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01f      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <TIM_Base_SetConfig+0x120>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01b      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <TIM_Base_SetConfig+0x124>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d017      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a28      	ldr	r2, [pc, #160]	; (8003c10 <TIM_Base_SetConfig+0x128>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <TIM_Base_SetConfig+0x12c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00f      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <TIM_Base_SetConfig+0x130>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00b      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a25      	ldr	r2, [pc, #148]	; (8003c1c <TIM_Base_SetConfig+0x134>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <TIM_Base_SetConfig+0x138>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <TIM_Base_SetConfig+0x13c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d108      	bne.n	8003bac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0xf8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <TIM_Base_SetConfig+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d103      	bne.n	8003be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	615a      	str	r2, [r3, #20]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40010400 	.word	0x40010400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	40001800 	.word	0x40001800
 8003c20:	40001c00 	.word	0x40001c00
 8003c24:	40002000 	.word	0x40002000

08003c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e040      	b.n	8003cbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fe f96a 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f990 	bl	8003f8c <UART_SetConfig>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e022      	b.n	8003cbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fbe6 	bl	8004450 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fc6d 	bl	8004594 <UART_CheckIdleState>
 8003cba:	4603      	mov	r3, r0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	; 0x28
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	f040 8081 	bne.w	8003de0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_UART_Transmit+0x26>
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e079      	b.n	8003de2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_UART_Transmit+0x38>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e072      	b.n	8003de2 <HAL_UART_Transmit+0x11e>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2221      	movs	r2, #33	; 0x21
 8003d10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d12:	f7fe fae5 	bl	80022e0 <HAL_GetTick>
 8003d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d30:	d108      	bne.n	8003d44 <HAL_UART_Transmit+0x80>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d104      	bne.n	8003d44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	e003      	b.n	8003d4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d54:	e02c      	b.n	8003db0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2180      	movs	r1, #128	; 0x80
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fc4a 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e038      	b.n	8003de2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	3302      	adds	r3, #2
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	e007      	b.n	8003d9e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1cc      	bne.n	8003d56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2140      	movs	r1, #64	; 0x40
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fc17 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e005      	b.n	8003de2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b08a      	sub	sp, #40	; 0x28
 8003dee:	af02      	add	r7, sp, #8
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	f040 80be 	bne.w	8003f80 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_UART_Receive+0x26>
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0b6      	b.n	8003f82 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Receive+0x38>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0af      	b.n	8003f82 <HAL_UART_Receive+0x198>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2222      	movs	r2, #34	; 0x22
 8003e36:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3e:	f7fe fa4f 	bl	80022e0 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d10e      	bne.n	8003e7c <HAL_UART_Receive+0x92>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_UART_Receive+0x88>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e70:	e02d      	b.n	8003ece <HAL_UART_Receive+0xe4>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	22ff      	movs	r2, #255	; 0xff
 8003e76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e7a:	e028      	b.n	8003ece <HAL_UART_Receive+0xe4>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10d      	bne.n	8003ea0 <HAL_UART_Receive+0xb6>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_UART_Receive+0xac>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	22ff      	movs	r2, #255	; 0xff
 8003e90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e94:	e01b      	b.n	8003ece <HAL_UART_Receive+0xe4>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	227f      	movs	r2, #127	; 0x7f
 8003e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e9e:	e016      	b.n	8003ece <HAL_UART_Receive+0xe4>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_UART_Receive+0xdc>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d104      	bne.n	8003ebc <HAL_UART_Receive+0xd2>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	227f      	movs	r2, #127	; 0x7f
 8003eb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eba:	e008      	b.n	8003ece <HAL_UART_Receive+0xe4>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	223f      	movs	r2, #63	; 0x3f
 8003ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ec4:	e003      	b.n	8003ece <HAL_UART_Receive+0xe4>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ed4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ede:	d108      	bne.n	8003ef2 <HAL_UART_Receive+0x108>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d104      	bne.n	8003ef2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e003      	b.n	8003efa <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f02:	e032      	b.n	8003f6a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fb73 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e031      	b.n	8003f82 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10c      	bne.n	8003f3e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	8a7b      	ldrh	r3, [r7, #18]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e00c      	b.n	8003f58 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	8a7b      	ldrh	r3, [r7, #18]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1c6      	bne.n	8003f04 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4ba7      	ldr	r3, [pc, #668]	; (8004254 <UART_SetConfig+0x2c8>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	6979      	ldr	r1, [r7, #20]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a95      	ldr	r2, [pc, #596]	; (8004258 <UART_SetConfig+0x2cc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d120      	bne.n	800404a <UART_SetConfig+0xbe>
 8004008:	4b94      	ldr	r3, [pc, #592]	; (800425c <UART_SetConfig+0x2d0>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b03      	cmp	r3, #3
 8004014:	d816      	bhi.n	8004044 <UART_SetConfig+0xb8>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x90>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004039 	.word	0x08004039
 8004024:	08004033 	.word	0x08004033
 8004028:	0800403f 	.word	0x0800403f
 800402c:	2301      	movs	r3, #1
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e14f      	b.n	80042d2 <UART_SetConfig+0x346>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e14c      	b.n	80042d2 <UART_SetConfig+0x346>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e149      	b.n	80042d2 <UART_SetConfig+0x346>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e146      	b.n	80042d2 <UART_SetConfig+0x346>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e143      	b.n	80042d2 <UART_SetConfig+0x346>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a84      	ldr	r2, [pc, #528]	; (8004260 <UART_SetConfig+0x2d4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d132      	bne.n	80040ba <UART_SetConfig+0x12e>
 8004054:	4b81      	ldr	r3, [pc, #516]	; (800425c <UART_SetConfig+0x2d0>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d828      	bhi.n	80040b4 <UART_SetConfig+0x128>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0xdc>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800409d 	.word	0x0800409d
 800406c:	080040b5 	.word	0x080040b5
 8004070:	080040b5 	.word	0x080040b5
 8004074:	080040b5 	.word	0x080040b5
 8004078:	080040a9 	.word	0x080040a9
 800407c:	080040b5 	.word	0x080040b5
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080040b5 	.word	0x080040b5
 8004088:	080040a3 	.word	0x080040a3
 800408c:	080040b5 	.word	0x080040b5
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040b5 	.word	0x080040b5
 8004098:	080040af 	.word	0x080040af
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e117      	b.n	80042d2 <UART_SetConfig+0x346>
 80040a2:	2302      	movs	r3, #2
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e114      	b.n	80042d2 <UART_SetConfig+0x346>
 80040a8:	2304      	movs	r3, #4
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e111      	b.n	80042d2 <UART_SetConfig+0x346>
 80040ae:	2308      	movs	r3, #8
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e10e      	b.n	80042d2 <UART_SetConfig+0x346>
 80040b4:	2310      	movs	r3, #16
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e10b      	b.n	80042d2 <UART_SetConfig+0x346>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a69      	ldr	r2, [pc, #420]	; (8004264 <UART_SetConfig+0x2d8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d120      	bne.n	8004106 <UART_SetConfig+0x17a>
 80040c4:	4b65      	ldr	r3, [pc, #404]	; (800425c <UART_SetConfig+0x2d0>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040ce:	2b30      	cmp	r3, #48	; 0x30
 80040d0:	d013      	beq.n	80040fa <UART_SetConfig+0x16e>
 80040d2:	2b30      	cmp	r3, #48	; 0x30
 80040d4:	d814      	bhi.n	8004100 <UART_SetConfig+0x174>
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d009      	beq.n	80040ee <UART_SetConfig+0x162>
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d810      	bhi.n	8004100 <UART_SetConfig+0x174>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <UART_SetConfig+0x15c>
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d006      	beq.n	80040f4 <UART_SetConfig+0x168>
 80040e6:	e00b      	b.n	8004100 <UART_SetConfig+0x174>
 80040e8:	2300      	movs	r3, #0
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e0f1      	b.n	80042d2 <UART_SetConfig+0x346>
 80040ee:	2302      	movs	r3, #2
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e0ee      	b.n	80042d2 <UART_SetConfig+0x346>
 80040f4:	2304      	movs	r3, #4
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e0eb      	b.n	80042d2 <UART_SetConfig+0x346>
 80040fa:	2308      	movs	r3, #8
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e0e8      	b.n	80042d2 <UART_SetConfig+0x346>
 8004100:	2310      	movs	r3, #16
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e0e5      	b.n	80042d2 <UART_SetConfig+0x346>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a57      	ldr	r2, [pc, #348]	; (8004268 <UART_SetConfig+0x2dc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d120      	bne.n	8004152 <UART_SetConfig+0x1c6>
 8004110:	4b52      	ldr	r3, [pc, #328]	; (800425c <UART_SetConfig+0x2d0>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800411a:	2bc0      	cmp	r3, #192	; 0xc0
 800411c:	d013      	beq.n	8004146 <UART_SetConfig+0x1ba>
 800411e:	2bc0      	cmp	r3, #192	; 0xc0
 8004120:	d814      	bhi.n	800414c <UART_SetConfig+0x1c0>
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d009      	beq.n	800413a <UART_SetConfig+0x1ae>
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d810      	bhi.n	800414c <UART_SetConfig+0x1c0>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <UART_SetConfig+0x1a8>
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d006      	beq.n	8004140 <UART_SetConfig+0x1b4>
 8004132:	e00b      	b.n	800414c <UART_SetConfig+0x1c0>
 8004134:	2300      	movs	r3, #0
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e0cb      	b.n	80042d2 <UART_SetConfig+0x346>
 800413a:	2302      	movs	r3, #2
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e0c8      	b.n	80042d2 <UART_SetConfig+0x346>
 8004140:	2304      	movs	r3, #4
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e0c5      	b.n	80042d2 <UART_SetConfig+0x346>
 8004146:	2308      	movs	r3, #8
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e0c2      	b.n	80042d2 <UART_SetConfig+0x346>
 800414c:	2310      	movs	r3, #16
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e0bf      	b.n	80042d2 <UART_SetConfig+0x346>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a45      	ldr	r2, [pc, #276]	; (800426c <UART_SetConfig+0x2e0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d125      	bne.n	80041a8 <UART_SetConfig+0x21c>
 800415c:	4b3f      	ldr	r3, [pc, #252]	; (800425c <UART_SetConfig+0x2d0>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800416a:	d017      	beq.n	800419c <UART_SetConfig+0x210>
 800416c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004170:	d817      	bhi.n	80041a2 <UART_SetConfig+0x216>
 8004172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004176:	d00b      	beq.n	8004190 <UART_SetConfig+0x204>
 8004178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417c:	d811      	bhi.n	80041a2 <UART_SetConfig+0x216>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <UART_SetConfig+0x1fe>
 8004182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004186:	d006      	beq.n	8004196 <UART_SetConfig+0x20a>
 8004188:	e00b      	b.n	80041a2 <UART_SetConfig+0x216>
 800418a:	2300      	movs	r3, #0
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e0a0      	b.n	80042d2 <UART_SetConfig+0x346>
 8004190:	2302      	movs	r3, #2
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e09d      	b.n	80042d2 <UART_SetConfig+0x346>
 8004196:	2304      	movs	r3, #4
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e09a      	b.n	80042d2 <UART_SetConfig+0x346>
 800419c:	2308      	movs	r3, #8
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e097      	b.n	80042d2 <UART_SetConfig+0x346>
 80041a2:	2310      	movs	r3, #16
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e094      	b.n	80042d2 <UART_SetConfig+0x346>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a30      	ldr	r2, [pc, #192]	; (8004270 <UART_SetConfig+0x2e4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d125      	bne.n	80041fe <UART_SetConfig+0x272>
 80041b2:	4b2a      	ldr	r3, [pc, #168]	; (800425c <UART_SetConfig+0x2d0>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c0:	d017      	beq.n	80041f2 <UART_SetConfig+0x266>
 80041c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c6:	d817      	bhi.n	80041f8 <UART_SetConfig+0x26c>
 80041c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041cc:	d00b      	beq.n	80041e6 <UART_SetConfig+0x25a>
 80041ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d2:	d811      	bhi.n	80041f8 <UART_SetConfig+0x26c>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <UART_SetConfig+0x254>
 80041d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041dc:	d006      	beq.n	80041ec <UART_SetConfig+0x260>
 80041de:	e00b      	b.n	80041f8 <UART_SetConfig+0x26c>
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e075      	b.n	80042d2 <UART_SetConfig+0x346>
 80041e6:	2302      	movs	r3, #2
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e072      	b.n	80042d2 <UART_SetConfig+0x346>
 80041ec:	2304      	movs	r3, #4
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e06f      	b.n	80042d2 <UART_SetConfig+0x346>
 80041f2:	2308      	movs	r3, #8
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e06c      	b.n	80042d2 <UART_SetConfig+0x346>
 80041f8:	2310      	movs	r3, #16
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e069      	b.n	80042d2 <UART_SetConfig+0x346>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <UART_SetConfig+0x2e8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d137      	bne.n	8004278 <UART_SetConfig+0x2ec>
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <UART_SetConfig+0x2d0>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004212:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004216:	d017      	beq.n	8004248 <UART_SetConfig+0x2bc>
 8004218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800421c:	d817      	bhi.n	800424e <UART_SetConfig+0x2c2>
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004222:	d00b      	beq.n	800423c <UART_SetConfig+0x2b0>
 8004224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004228:	d811      	bhi.n	800424e <UART_SetConfig+0x2c2>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <UART_SetConfig+0x2aa>
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d006      	beq.n	8004242 <UART_SetConfig+0x2b6>
 8004234:	e00b      	b.n	800424e <UART_SetConfig+0x2c2>
 8004236:	2300      	movs	r3, #0
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e04a      	b.n	80042d2 <UART_SetConfig+0x346>
 800423c:	2302      	movs	r3, #2
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e047      	b.n	80042d2 <UART_SetConfig+0x346>
 8004242:	2304      	movs	r3, #4
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e044      	b.n	80042d2 <UART_SetConfig+0x346>
 8004248:	2308      	movs	r3, #8
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e041      	b.n	80042d2 <UART_SetConfig+0x346>
 800424e:	2310      	movs	r3, #16
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e03e      	b.n	80042d2 <UART_SetConfig+0x346>
 8004254:	efff69f3 	.word	0xefff69f3
 8004258:	40011000 	.word	0x40011000
 800425c:	40023800 	.word	0x40023800
 8004260:	40004400 	.word	0x40004400
 8004264:	40004800 	.word	0x40004800
 8004268:	40004c00 	.word	0x40004c00
 800426c:	40005000 	.word	0x40005000
 8004270:	40011400 	.word	0x40011400
 8004274:	40007800 	.word	0x40007800
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a71      	ldr	r2, [pc, #452]	; (8004444 <UART_SetConfig+0x4b8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d125      	bne.n	80042ce <UART_SetConfig+0x342>
 8004282:	4b71      	ldr	r3, [pc, #452]	; (8004448 <UART_SetConfig+0x4bc>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800428c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004290:	d017      	beq.n	80042c2 <UART_SetConfig+0x336>
 8004292:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004296:	d817      	bhi.n	80042c8 <UART_SetConfig+0x33c>
 8004298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429c:	d00b      	beq.n	80042b6 <UART_SetConfig+0x32a>
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a2:	d811      	bhi.n	80042c8 <UART_SetConfig+0x33c>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <UART_SetConfig+0x324>
 80042a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ac:	d006      	beq.n	80042bc <UART_SetConfig+0x330>
 80042ae:	e00b      	b.n	80042c8 <UART_SetConfig+0x33c>
 80042b0:	2300      	movs	r3, #0
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e00d      	b.n	80042d2 <UART_SetConfig+0x346>
 80042b6:	2302      	movs	r3, #2
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e00a      	b.n	80042d2 <UART_SetConfig+0x346>
 80042bc:	2304      	movs	r3, #4
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e007      	b.n	80042d2 <UART_SetConfig+0x346>
 80042c2:	2308      	movs	r3, #8
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e004      	b.n	80042d2 <UART_SetConfig+0x346>
 80042c8:	2310      	movs	r3, #16
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e001      	b.n	80042d2 <UART_SetConfig+0x346>
 80042ce:	2310      	movs	r3, #16
 80042d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042da:	d15b      	bne.n	8004394 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80042dc:	7ffb      	ldrb	r3, [r7, #31]
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d827      	bhi.n	8004332 <UART_SetConfig+0x3a6>
 80042e2:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <UART_SetConfig+0x35c>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	08004315 	.word	0x08004315
 80042f0:	0800431d 	.word	0x0800431d
 80042f4:	08004333 	.word	0x08004333
 80042f8:	08004323 	.word	0x08004323
 80042fc:	08004333 	.word	0x08004333
 8004300:	08004333 	.word	0x08004333
 8004304:	08004333 	.word	0x08004333
 8004308:	0800432b 	.word	0x0800432b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800430c:	f7fe ff0c 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8004310:	61b8      	str	r0, [r7, #24]
        break;
 8004312:	e013      	b.n	800433c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004314:	f7fe ff1c 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8004318:	61b8      	str	r0, [r7, #24]
        break;
 800431a:	e00f      	b.n	800433c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800431c:	4b4b      	ldr	r3, [pc, #300]	; (800444c <UART_SetConfig+0x4c0>)
 800431e:	61bb      	str	r3, [r7, #24]
        break;
 8004320:	e00c      	b.n	800433c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004322:	f7fe fe3f 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8004326:	61b8      	str	r0, [r7, #24]
        break;
 8004328:	e008      	b.n	800433c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432e:	61bb      	str	r3, [r7, #24]
        break;
 8004330:	e004      	b.n	800433c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	77bb      	strb	r3, [r7, #30]
        break;
 800433a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d074      	beq.n	800442c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	005a      	lsls	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	b29b      	uxth	r3, r3
 8004358:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b0f      	cmp	r3, #15
 800435e:	d916      	bls.n	800438e <UART_SetConfig+0x402>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	d212      	bcs.n	800438e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f023 030f 	bic.w	r3, r3, #15
 8004370:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	b29b      	uxth	r3, r3
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	b29a      	uxth	r2, r3
 800437e:	89fb      	ldrh	r3, [r7, #14]
 8004380:	4313      	orrs	r3, r2
 8004382:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	89fa      	ldrh	r2, [r7, #14]
 800438a:	60da      	str	r2, [r3, #12]
 800438c:	e04e      	b.n	800442c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	77bb      	strb	r3, [r7, #30]
 8004392:	e04b      	b.n	800442c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004394:	7ffb      	ldrb	r3, [r7, #31]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d827      	bhi.n	80043ea <UART_SetConfig+0x45e>
 800439a:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <UART_SetConfig+0x414>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043cd 	.word	0x080043cd
 80043a8:	080043d5 	.word	0x080043d5
 80043ac:	080043eb 	.word	0x080043eb
 80043b0:	080043db 	.word	0x080043db
 80043b4:	080043eb 	.word	0x080043eb
 80043b8:	080043eb 	.word	0x080043eb
 80043bc:	080043eb 	.word	0x080043eb
 80043c0:	080043e3 	.word	0x080043e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe feb0 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 80043c8:	61b8      	str	r0, [r7, #24]
        break;
 80043ca:	e013      	b.n	80043f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043cc:	f7fe fec0 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 80043d0:	61b8      	str	r0, [r7, #24]
        break;
 80043d2:	e00f      	b.n	80043f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d4:	4b1d      	ldr	r3, [pc, #116]	; (800444c <UART_SetConfig+0x4c0>)
 80043d6:	61bb      	str	r3, [r7, #24]
        break;
 80043d8:	e00c      	b.n	80043f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043da:	f7fe fde3 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 80043de:	61b8      	str	r0, [r7, #24]
        break;
 80043e0:	e008      	b.n	80043f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e6:	61bb      	str	r3, [r7, #24]
        break;
 80043e8:	e004      	b.n	80043f4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	77bb      	strb	r3, [r7, #30]
        break;
 80043f2:	bf00      	nop
    }

    if (pclk != 0U)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d018      	beq.n	800442c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	085a      	lsrs	r2, r3, #1
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	441a      	add	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	b29b      	uxth	r3, r3
 800440e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b0f      	cmp	r3, #15
 8004414:	d908      	bls.n	8004428 <UART_SetConfig+0x49c>
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d204      	bcs.n	8004428 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	e001      	b.n	800442c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004438:	7fbb      	ldrb	r3, [r7, #30]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40007c00 	.word	0x40007c00
 8004448:	40023800 	.word	0x40023800
 800444c:	00f42400 	.word	0x00f42400

08004450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01a      	beq.n	8004566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454e:	d10a      	bne.n	8004566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af02      	add	r7, sp, #8
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045a4:	f7fd fe9c 	bl	80022e0 <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d10e      	bne.n	80045d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f817 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e00d      	b.n	80045f2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460a:	e05e      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004612:	d05a      	beq.n	80046ca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004614:	f7fd fe64 	bl	80022e0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	429a      	cmp	r2, r3
 8004622:	d302      	bcc.n	800462a <UART_WaitOnFlagUntilTimeout+0x30>
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d11b      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004638:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e043      	b.n	80046ea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d02c      	beq.n	80046ca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800467e:	d124      	bne.n	80046ca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004688:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004698:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e00f      	b.n	80046ea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4013      	ands	r3, r2
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	bf0c      	ite	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	2300      	movne	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d091      	beq.n	800460c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3301      	adds	r3, #1
 80046fe:	009b      	lsls	r3, r3, #2
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	2b10      	cmp	r3, #16
 800471a:	d847      	bhi.n	80047ac <TfLiteTypeGetName+0xa0>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <TfLiteTypeGetName+0x18>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004769 	.word	0x08004769
 8004728:	0800476d 	.word	0x0800476d
 800472c:	08004775 	.word	0x08004775
 8004730:	0800477d 	.word	0x0800477d
 8004734:	08004785 	.word	0x08004785
 8004738:	08004799 	.word	0x08004799
 800473c:	0800478d 	.word	0x0800478d
 8004740:	08004771 	.word	0x08004771
 8004744:	08004791 	.word	0x08004791
 8004748:	08004781 	.word	0x08004781
 800474c:	0800479d 	.word	0x0800479d
 8004750:	080047a1 	.word	0x080047a1
 8004754:	08004795 	.word	0x08004795
 8004758:	08004789 	.word	0x08004789
 800475c:	080047a5 	.word	0x080047a5
 8004760:	080047a9 	.word	0x080047a9
 8004764:	08004779 	.word	0x08004779
    case kTfLiteNoType:
      return "NOTYPE";
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <TfLiteTypeGetName+0xb0>)
 800476a:	e020      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <TfLiteTypeGetName+0xb4>)
 800476e:	e01e      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <TfLiteTypeGetName+0xb8>)
 8004772:	e01c      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <TfLiteTypeGetName+0xbc>)
 8004776:	e01a      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8004778:	4b14      	ldr	r3, [pc, #80]	; (80047cc <TfLiteTypeGetName+0xc0>)
 800477a:	e018      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <TfLiteTypeGetName+0xc4>)
 800477e:	e016      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <TfLiteTypeGetName+0xc8>)
 8004782:	e014      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8004784:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <TfLiteTypeGetName+0xcc>)
 8004786:	e012      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <TfLiteTypeGetName+0xd0>)
 800478a:	e010      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 800478c:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <TfLiteTypeGetName+0xd4>)
 800478e:	e00e      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <TfLiteTypeGetName+0xd8>)
 8004792:	e00c      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8004794:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <TfLiteTypeGetName+0xdc>)
 8004796:	e00a      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <TfLiteTypeGetName+0xe0>)
 800479a:	e008      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 800479c:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <TfLiteTypeGetName+0xe4>)
 800479e:	e006      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <TfLiteTypeGetName+0xe8>)
 80047a2:	e004      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <TfLiteTypeGetName+0xec>)
 80047a6:	e002      	b.n	80047ae <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 80047a8:	4b14      	ldr	r3, [pc, #80]	; (80047fc <TfLiteTypeGetName+0xf0>)
 80047aa:	e000      	b.n	80047ae <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 80047ac:	4b14      	ldr	r3, [pc, #80]	; (8004800 <TfLiteTypeGetName+0xf4>)
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	080129c4 	.word	0x080129c4
 80047c0:	080129cc 	.word	0x080129cc
 80047c4:	080129d4 	.word	0x080129d4
 80047c8:	080129dc 	.word	0x080129dc
 80047cc:	080129e4 	.word	0x080129e4
 80047d0:	080129ec 	.word	0x080129ec
 80047d4:	080129f4 	.word	0x080129f4
 80047d8:	080129fc 	.word	0x080129fc
 80047dc:	08012a04 	.word	0x08012a04
 80047e0:	08012a0c 	.word	0x08012a0c
 80047e4:	08012a14 	.word	0x08012a14
 80047e8:	08012a20 	.word	0x08012a20
 80047ec:	08012a2c 	.word	0x08012a2c
 80047f0:	08012a34 	.word	0x08012a34
 80047f4:	08012a3c 	.word	0x08012a3c
 80047f8:	08012a44 	.word	0x08012a44
 80047fc:	08012a50 	.word	0x08012a50
 8004800:	08012a58 	.word	0x08012a58

08004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8004804:	b40e      	push	{r1, r2, r3}
 8004806:	b580      	push	{r7, lr}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 800480e:	f107 0320 	add.w	r3, r7, #32
 8004812:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	69f9      	ldr	r1, [r7, #28]
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	4798      	blx	r3
 8004824:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8004826:	68fb      	ldr	r3, [r7, #12]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004832:	b003      	add	sp, #12
 8004834:	4770      	bx	lr

08004836 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8004836:	b40c      	push	{r2, r3}
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8004842:	f107 031c 	add.w	r3, r7, #28
 8004846:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3308      	adds	r3, #8
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	69b9      	ldr	r1, [r7, #24]
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
 8004858:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800485a:	68fb      	ldr	r3, [r7, #12]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004866:	b002      	add	sp, #8
 8004868:	4770      	bx	lr

0800486a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fb8f 	bl	8004fb0 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8004892:	4603      	mov	r3, r0
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2104      	movs	r1, #4
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fbf7 	bl	800509e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80048b0:	4603      	mov	r3, r0
 80048b2:	b2db      	uxtb	r3, r3
  }
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	2106      	movs	r1, #6
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fbe7 	bl	800509e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80048d0:	4603      	mov	r3, r0
 80048d2:	b2db      	uxtb	r3, r3
  }
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	2108      	movs	r1, #8
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fb7a 	bl	8004fe4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bf14      	ite	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	2300      	moveq	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
  }
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	210a      	movs	r1, #10
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fb66 	bl	8004fe4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
  }
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <_ZNK6tflite14SoftmaxOptions4betaEv>:
  float beta() const {
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8004950 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 800493a:	2104      	movs	r1, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fbde 	bl	80050fe <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8004942:	eef0 7a40 	vmov.f32	s15, s0
  }
 8004946:	eeb0 0a67 	vmov.f32	s0, s15
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	00000000 	.word	0x00000000

08004954 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2104      	movs	r1, #4
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fb8c 	bl	800507e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8004966:	4603      	mov	r3, r0
  }
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	210a      	movs	r1, #10
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fb30 	bl	8004fe4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004984:	4603      	mov	r3, r0
  }
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	210c      	movs	r1, #12
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fb41 	bl	8005022 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 80049a0:	4603      	mov	r3, r0
  }
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ffdc 	bl	8004970 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d104      	bne.n	80049c8 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ffe5 	bl	800498e <_ZNK6tflite8Operator15builtin_optionsEv>
 80049c4:	4603      	mov	r3, r0
 80049c6:	e000      	b.n	80049ca <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 80049c8:	2300      	movs	r3, #0
  }
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff ffc8 	bl	8004970 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b09      	cmp	r3, #9
 80049e4:	d104      	bne.n	80049f0 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff ffd1 	bl	800498e <_ZNK6tflite8Operator15builtin_optionsEv>
 80049ec:	4603      	mov	r3, r0
 80049ee:	e000      	b.n	80049f2 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 80049f0:	2300      	movs	r3, #0
  }
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ffb4 	bl	8004970 <_ZNK6tflite8Operator20builtin_options_typeEv>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b11      	cmp	r3, #17
 8004a0c:	d104      	bne.n	8004a18 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ffbd 	bl	800498e <_ZNK6tflite8Operator15builtin_optionsEv>
 8004a14:	4603      	mov	r3, r0
 8004a16:	e000      	b.n	8004a1a <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8004a18:	2300      	movs	r3, #0
  }
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3304      	adds	r3, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6839      	ldr	r1, [r7, #0]
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4798      	blx	r3
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8004a98:	f00a fed3 	bl	800f842 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8004aa2:	f00a fece 	bl	800f842 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8004aac:	f00a fec9 	bl	800f842 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8004ab6:	f00a fec4 	bl	800f842 <abort>
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8004ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ada:	4917      	ldr	r1, [pc, #92]	; (8004b38 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8004adc:	6838      	ldr	r0, [r7, #0]
 8004ade:	f7ff fe91 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e024      	b.n	8004b30 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8004ae6:	68b8      	ldr	r0, [r7, #8]
 8004ae8:	f000 fb2b 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004aec:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d906      	bls.n	8004b06 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8004af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004afa:	4910      	ldr	r1, [pc, #64]	; (8004b3c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8004afc:	6838      	ldr	r0, [r7, #0]
 8004afe:	f7ff fe81 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e014      	b.n	8004b30 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d20d      	bcs.n	8004b2e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	18d4      	adds	r4, r2, r3
 8004b1a:	6979      	ldr	r1, [r7, #20]
 8004b1c:	68b8      	ldr	r0, [r7, #8]
 8004b1e:	f000 fb1f 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8004b22:	4603      	mov	r3, r0
 8004b24:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e7ed      	b.n	8004b0a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	08012a7c 	.word	0x08012a7c
 8004b3c:	08012aac 	.word	0x08012aac

08004b40 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	d81b      	bhi.n	8004b88 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b71 	.word	0x08004b71
 8004b5c:	08004b75 	.word	0x08004b75
 8004b60:	08004b79 	.word	0x08004b79
 8004b64:	08004b7d 	.word	0x08004b7d
 8004b68:	08004b81 	.word	0x08004b81
 8004b6c:	08004b85 	.word	0x08004b85
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e00a      	b.n	8004b8a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e008      	b.n	8004b8a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e006      	b.n	8004b8a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e004      	b.n	8004b8a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8004b80:	2304      	movs	r3, #4
 8004b82:	e002      	b.n	8004b8a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8004b84:	2305      	movs	r3, #5
 8004b86:	e000      	b.n	8004b8a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop

08004b98 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b0f      	cmp	r3, #15
 8004baa:	d873      	bhi.n	8004c94 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 8004bac:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bff 	.word	0x08004bff
 8004bb8:	08004bf5 	.word	0x08004bf5
 8004bbc:	08004c1d 	.word	0x08004c1d
 8004bc0:	08004c31 	.word	0x08004c31
 8004bc4:	08004c45 	.word	0x08004c45
 8004bc8:	08004c59 	.word	0x08004c59
 8004bcc:	08004c63 	.word	0x08004c63
 8004bd0:	08004c13 	.word	0x08004c13
 8004bd4:	08004c6d 	.word	0x08004c6d
 8004bd8:	08004c3b 	.word	0x08004c3b
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	08004c77 	.word	0x08004c77
 8004be4:	08004c4f 	.word	0x08004c4f
 8004be8:	08004c81 	.word	0x08004c81
 8004bec:	08004c8b 	.word	0x08004c8b
 8004bf0:	08004c27 	.word	0x08004c27
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	220a      	movs	r2, #10
 8004bf8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e054      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e04f      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	220b      	movs	r2, #11
 8004c0c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e04a      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2207      	movs	r2, #7
 8004c16:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e045      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c22:	2300      	movs	r3, #0
 8004c24:	e040      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2210      	movs	r2, #16
 8004c2a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e03b      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2203      	movs	r2, #3
 8004c34:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e036      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2209      	movs	r2, #9
 8004c3e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e031      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2204      	movs	r2, #4
 8004c48:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e02c      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	220d      	movs	r2, #13
 8004c52:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e027      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2205      	movs	r2, #5
 8004c5c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e022      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2206      	movs	r2, #6
 8004c66:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e01d      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2208      	movs	r2, #8
 8004c70:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e018      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	220c      	movs	r2, #12
 8004c7a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e013      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	220e      	movs	r2, #14
 8004c84:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e00e      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	220f      	movs	r2, #15
 8004c8e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e009      	b.n	8004ca8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4904      	ldr	r1, [pc, #16]	; (8004cb0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff fdaf 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8004ca6:	2301      	movs	r3, #1
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	08012bd0 	.word	0x08012bd0

08004cb4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8004cb4:	b5b0      	push	{r4, r5, r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fedb 	bl	8004a84 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004cce:	f107 0318 	add.w	r3, r7, #24
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fec6 	bl	8004a66 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8004cda:	f107 0310 	add.w	r3, r7, #16
 8004cde:	f107 0218 	add.w	r2, r7, #24
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fa61 	bl	80051ac <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004cea:	f107 0310 	add.w	r3, r7, #16
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fa9b 	bl	800522c <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f083 0301 	eor.w	r3, r3, #1
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004d02:	4b37      	ldr	r3, [pc, #220]	; (8004de0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	f44f 63a2 	mov.w	r3, #1296	; 0x510
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	4b35      	ldr	r3, [pc, #212]	; (8004de4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 8004d0e:	4a36      	ldr	r2, [pc, #216]	; (8004de8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68b8      	ldr	r0, [r7, #8]
 8004d14:	f7ff fd8f 	bl	8004836 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8004d18:	2401      	movs	r4, #1
 8004d1a:	e056      	b.n	8004dca <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff fe44 	bl	80049aa <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8004d22:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d046      	beq.n	8004db8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8004d2a:	69f8      	ldr	r0, [r7, #28]
 8004d2c:	f7ff fdb6 	bl	800489c <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461d      	mov	r5, r3
    params->activation =
 8004d34:	f107 0310 	add.w	r3, r7, #16
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fa84 	bl	8005246 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004d3e:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8004d40:	4628      	mov	r0, r5
 8004d42:	f7ff fefd 	bl	8004b40 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8004d46:	4603      	mov	r3, r0
    params->activation =
 8004d48:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 8004d4a:	f107 0310 	add.w	r3, r7, #16
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fa79 	bl	8005246 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004d54:	4604      	mov	r4, r0
 8004d56:	69f8      	ldr	r0, [r7, #28]
 8004d58:	f7ff fdc0 	bl	80048dc <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fa6e 	bl	8005246 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004d6a:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8004d6c:	69f8      	ldr	r0, [r7, #28]
 8004d6e:	f7ff fdc9 	bl	8004904 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 8004d72:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 8004d74:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 8004d76:	69f8      	ldr	r0, [r7, #28]
 8004d78:	f7ff fda0 	bl	80048bc <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d009      	beq.n	8004d9a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 8004d86:	e011      	b.n	8004dac <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 8004d88:	f107 0310 	add.w	r3, r7, #16
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fa5a 	bl	8005246 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2200      	movs	r2, #0
 8004d96:	705a      	strb	r2, [r3, #1]
        break;
 8004d98:	e00e      	b.n	8004db8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8004d9a:	f107 0310 	add.w	r3, r7, #16
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fa51 	bl	8005246 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2201      	movs	r2, #1
 8004da8:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8004daa:	e005      	b.n	8004db8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8004dac:	490f      	ldr	r1, [pc, #60]	; (8004dec <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8004dae:	68b8      	ldr	r0, [r7, #8]
 8004db0:	f7ff fd28 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 8004db4:	2401      	movs	r4, #1
 8004db6:	e008      	b.n	8004dca <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fa4e 	bl	800525e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004dc8:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8004dca:	f107 0310 	add.w	r3, r7, #16
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fa0a 	bl	80051e8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004dd4:	4623      	mov	r3, r4
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3720      	adds	r7, #32
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8004dde:	bf00      	nop
 8004de0:	08012b50 	.word	0x08012b50
 8004de4:	08012af0 	.word	0x08012af0
 8004de8:	08012b38 	.word	0x08012b38
 8004dec:	08012bf4 	.word	0x08012bf4

08004df0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b08d      	sub	sp, #52	; 0x34
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff fe3d 	bl	8004a84 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004e0a:	f107 0318 	add.w	r3, r7, #24
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fe28 	bl	8004a66 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8004e16:	f107 0310 	add.w	r3, r7, #16
 8004e1a:	f107 0218 	add.w	r2, r7, #24
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fa30 	bl	8005286 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004e26:	f107 0310 	add.w	r3, r7, #16
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fa6a 	bl	8005306 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f083 0301 	eor.w	r3, r3, #1
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00c      	beq.n	8004e58 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004e3e:	4b27      	ldr	r3, [pc, #156]	; (8004edc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	f240 63b6 	movw	r3, #1718	; 0x6b6
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 8004e4a:	4a26      	ldr	r2, [pc, #152]	; (8004ee4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f7ff fcf1 	bl	8004836 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8004e54:	2401      	movs	r4, #1
 8004e56:	e037      	b.n	8004ec8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff fdce 	bl	80049fa <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 8004e5e:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d027      	beq.n	8004eb6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 8004e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e68:	f7ff fd74 	bl	8004954 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 8004e6c:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d020      	beq.n	8004eb6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 8004e74:	f107 0310 	add.w	r3, r7, #16
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fa51 	bl	8005320 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6a39      	ldr	r1, [r7, #32]
 8004e8a:	2020      	movs	r0, #32
 8004e8c:	f7ff fe1a 	bl	8004ac4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 8004e90:	4603      	mov	r3, r0
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	7ffb      	ldrb	r3, [r7, #31]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 8004e9a:	7ffc      	ldrb	r4, [r7, #31]
 8004e9c:	e014      	b.n	8004ec8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 8004e9e:	6a38      	ldr	r0, [r7, #32]
 8004ea0:	f000 f94f 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	f107 0310 	add.w	r3, r7, #16
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fa38 	bl	8005320 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004eb6:	f107 0310 	add.w	r3, r7, #16
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fa3c 	bl	8005338 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004ec6:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8004ec8:	f107 0310 	add.w	r3, r7, #16
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f9f8 	bl	80052c2 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004ed2:	4623      	mov	r3, r4
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	372c      	adds	r7, #44	; 0x2c
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd90      	pop	{r4, r7, pc}
 8004edc:	08012b50 	.word	0x08012b50
 8004ee0:	08012af0 	.word	0x08012af0
 8004ee4:	08012b38 	.word	0x08012b38
 8004ee8:	08012c20 	.word	0x08012c20

08004eec <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b08b      	sub	sp, #44	; 0x2c
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fdbf 	bl	8004a84 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004f06:	f107 0318 	add.w	r3, r7, #24
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fdaa 	bl	8004a66 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8004f12:	f107 0310 	add.w	r3, r7, #16
 8004f16:	f107 0218 	add.w	r2, r7, #24
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fa1f 	bl	8005360 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8004f22:	f107 0310 	add.w	r3, r7, #16
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fa59 	bl	80053e0 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f083 0301 	eor.w	r3, r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00c      	beq.n	8004f54 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004f3a:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f240 733f 	movw	r3, #1855	; 0x73f
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 8004f46:	4a19      	ldr	r2, [pc, #100]	; (8004fac <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68b8      	ldr	r0, [r7, #8]
 8004f4c:	f7ff fc73 	bl	8004836 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8004f50:	2401      	movs	r4, #1
 8004f52:	e01c      	b.n	8004f8e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff fd3c 	bl	80049d2 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 8004f5a:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00c      	beq.n	8004f7c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 8004f62:	f107 0310 	add.w	r3, r7, #16
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fa47 	bl	80053fa <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	69f8      	ldr	r0, [r7, #28]
 8004f70:	f7ff fcdc 	bl	800492c <_ZNK6tflite14SoftmaxOptions4betaEv>
 8004f74:	eef0 7a40 	vmov.f32	s15, s0
 8004f78:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8004f7c:	f107 0310 	add.w	r3, r7, #16
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fa46 	bl	8005412 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004f86:	4602      	mov	r2, r0
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8004f8c:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 8004f8e:	f107 0310 	add.w	r3, r7, #16
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fa02 	bl	800539c <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8004f98:	4623      	mov	r3, r4
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3724      	adds	r7, #36	; 0x24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08012b50 	.word	0x08012b50
 8004fa8:	08012af0 	.word	0x08012af0
 8004fac:	08012b38 	.word	0x08012b38

08004fb0 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
  }
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fa30 	bl	800543a <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8004fda:	4603      	mov	r3, r0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fc f86b 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004ffe:	4603      	mov	r3, r0
 8005000:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005002:	89fb      	ldrh	r3, [r7, #14]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	89fb      	ldrh	r3, [r7, #14]
 800500c:	4413      	add	r3, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff ffda 	bl	8004fc8 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8005014:	4603      	mov	r3, r0
 8005016:	e000      	b.n	800501a <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8005018:	787b      	ldrb	r3, [r7, #1]
  }
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fa0d 	bl	8005452 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8005038:	4603      	mov	r3, r0
  }
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005042:	b580      	push	{r7, lr}
 8005044:	b086      	sub	sp, #24
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	460b      	mov	r3, r1
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8005050:	897b      	ldrh	r3, [r7, #10]
 8005052:	4619      	mov	r1, r3
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7fc f83d 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800505a:	4603      	mov	r3, r0
 800505c:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800505e:	8afb      	ldrh	r3, [r7, #22]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	8afb      	ldrh	r3, [r7, #22]
 8005068:	4413      	add	r3, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f7fc fcdc 	bl	8001a28 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8005070:	4603      	mov	r3, r0
 8005072:	e000      	b.n	8005076 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8005074:	687b      	ldr	r3, [r7, #4]
  }
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	4619      	mov	r1, r3
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9ff 	bl	8005492 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005094:	4603      	mov	r3, r0
  }
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	807b      	strh	r3, [r7, #2]
 80050aa:	4613      	mov	r3, r2
 80050ac:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fc f80e 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80050b8:	4603      	mov	r3, r0
 80050ba:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	89fb      	ldrh	r3, [r7, #14]
 80050c6:	4413      	add	r3, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fa02 	bl	80054d2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 80050ce:	4603      	mov	r3, r0
 80050d0:	e001      	b.n	80050d6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 80050d2:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80050ea:	887b      	ldrh	r3, [r7, #2]
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9fe 	bl	80054f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80050f4:	4603      	mov	r3, r0
  }
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80050fe:	b580      	push	{r7, lr}
 8005100:	b086      	sub	sp, #24
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	460b      	mov	r3, r1
 8005108:	ed87 0a01 	vstr	s0, [r7, #4]
 800510c:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800510e:	897b      	ldrh	r3, [r7, #10]
 8005110:	4619      	mov	r1, r3
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7fb ffde 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005118:	4603      	mov	r3, r0
 800511a:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800511c:	8afb      	ldrh	r3, [r7, #22]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	8afb      	ldrh	r3, [r7, #22]
 8005126:	4413      	add	r3, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fa01 	bl	8005530 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 800512e:	eef0 7a40 	vmov.f32	s15, s0
 8005132:	e001      	b.n	8005138 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 8005134:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 8005138:	eeb0 0a67 	vmov.f32	s0, s15
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7fc fc43 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005154:	4603      	mov	r3, r0
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff ffe9 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005170:	4602      	mov	r2, r0
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	4293      	cmp	r3, r2
 8005176:	d306      	bcc.n	8005186 <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 800517c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005180:	4809      	ldr	r0, [pc, #36]	; (80051a8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8005182:	f00a fb65 	bl	800f850 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9f6 	bl	8005578 <_ZNK11flatbuffers6VectorIlE4DataEv>
 800518c:	4603      	mov	r3, r0
 800518e:	6839      	ldr	r1, [r7, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 f9df 	bl	8005554 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 8005196:	4603      	mov	r3, r0
  }
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	08012c30 	.word	0x08012c30
 80051a4:	08012c3c 	.word	0x08012c3c
 80051a8:	08012d0c 	.word	0x08012d0c

080051ac <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f9f3 	bl	80055a6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 80051c0:	4604      	mov	r4, r0
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	f107 030c 	add.w	r3, r7, #12
 80051ca:	4611      	mov	r1, r2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fc28 	bl	8004a22 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80051d2:	f107 030c 	add.w	r3, r7, #12
 80051d6:	461a      	mov	r2, r3
 80051d8:	4621      	mov	r1, r4
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f9fd 	bl	80055da <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd90      	pop	{r4, r7, pc}

080051e8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fa06 	bl	8005604 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80051f8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00c      	beq.n	800521c <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa0b 	bl	800561e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8005208:	4604      	mov	r4, r0
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fa14 	bl	8005638 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005210:	4603      	mov	r3, r0
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4619      	mov	r1, r3
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff fc12 	bl	8004a40 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
      }
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	bd90      	pop	{r4, r7, pc}

0800522c <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa1f 	bl	800567a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800523c:	4603      	mov	r3, r0
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
	return get();
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa24 	bl	800569c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005254:	4603      	mov	r3, r0
      }
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa18 	bl	800569c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800526c:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f9c7 	bl	8005604 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005276:	4603      	mov	r3, r0
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
	return __p;
 800527c:	68fb      	ldr	r3, [r7, #12]
      }
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005286:	b590      	push	{r4, r7, lr}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fa0e 	bl	80056b6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 800529a:	4604      	mov	r4, r0
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	f107 030c 	add.w	r3, r7, #12
 80052a4:	4611      	mov	r1, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fbbb 	bl	8004a22 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80052ac:	f107 030c 	add.w	r3, r7, #12
 80052b0:	461a      	mov	r2, r3
 80052b2:	4621      	mov	r1, r4
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fa1b 	bl	80056f0 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd90      	pop	{r4, r7, pc}

080052c2 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 80052c2:	b590      	push	{r4, r7, lr}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fa24 	bl	800571a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80052d2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00c      	beq.n	80052f6 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fa29 	bl	8005734 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80052e2:	4604      	mov	r4, r0
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fa32 	bl	800574e <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80052ea:	4603      	mov	r3, r0
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4619      	mov	r1, r3
 80052f0:	4620      	mov	r0, r4
 80052f2:	f7ff fba5 	bl	8004a40 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
      }
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	bd90      	pop	{r4, r7, pc}

08005306 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fa3d 	bl	8005790 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8005316:	4603      	mov	r3, r0
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	return get();
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fa42 	bl	80057b2 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800532e:	4603      	mov	r3, r0
      }
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa36 	bl	80057b2 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005346:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 f9e5 	bl	800571a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005350:	4603      	mov	r3, r0
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
	return __p;
 8005356:	68fb      	ldr	r3, [r7, #12]
      }
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fa2c 	bl	80057cc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8005374:	4604      	mov	r4, r0
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	f107 030c 	add.w	r3, r7, #12
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fb4e 	bl	8004a22 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005386:	f107 030c 	add.w	r3, r7, #12
 800538a:	461a      	mov	r2, r3
 800538c:	4621      	mov	r1, r4
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa35 	bl	80057fe <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	bd90      	pop	{r4, r7, pc}

0800539c <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fa3e 	bl	8005828 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80053ac:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00c      	beq.n	80053d0 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa43 	bl	8005842 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80053bc:	4604      	mov	r4, r0
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fa4c 	bl	800585c <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80053c4:	4603      	mov	r3, r0
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4619      	mov	r1, r3
 80053ca:	4620      	mov	r0, r4
 80053cc:	f7ff fb38 	bl	8004a40 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
      }
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd90      	pop	{r4, r7, pc}

080053e0 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa57 	bl	800589e <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
	return get();
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa5c 	bl	80058c0 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005408:	4603      	mov	r3, r0
      }
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fa50 	bl	80058c0 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005420:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f9ff 	bl	8005828 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800542a:	4603      	mov	r3, r0
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
	return __p;
 8005430:	68fb      	ldr	r3, [r7, #12]
      }
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	4603      	mov	r3, r0
 8005442:	71fb      	strb	r3, [r7, #7]
    return t;
 8005444:	79fb      	ldrb	r3, [r7, #7]
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800545e:	887b      	ldrh	r3, [r7, #2]
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fb fe36 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005468:	4603      	mov	r3, r0
 800546a:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	89fb      	ldrh	r3, [r7, #14]
 8005470:	4413      	add	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005474:	89fb      	ldrh	r3, [r7, #14]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d006      	beq.n	8005488 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 800547a:	68b8      	ldr	r0, [r7, #8]
 800547c:	f7fc fac6 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005480:	4602      	mov	r2, r0
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4413      	add	r3, r2
                        : nullptr;
 8005486:	e000      	b.n	800548a <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005488:	2300      	movs	r3, #0
  }
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	460b      	mov	r3, r1
 800549c:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800549e:	887b      	ldrh	r3, [r7, #2]
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fb fe16 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80054a8:	4603      	mov	r3, r0
 80054aa:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	89fb      	ldrh	r3, [r7, #14]
 80054b0:	4413      	add	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80054b4:	89fb      	ldrh	r3, [r7, #14]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 80054ba:	68b8      	ldr	r0, [r7, #8]
 80054bc:	f7fc faa6 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80054c0:	4602      	mov	r2, r0
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4413      	add	r3, r2
                        : nullptr;
 80054c6:	e000      	b.n	80054ca <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80054c8:	2300      	movs	r3, #0
  }
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f993 3000 	ldrsb.w	r3, [r3]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f9fa 	bl	80058da <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 80054e6:	4603      	mov	r3, r0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7fb fde7 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005506:	4603      	mov	r3, r0
 8005508:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	89fb      	ldrh	r3, [r7, #14]
 800550e:	4413      	add	r3, r2
 8005510:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005512:	89fb      	ldrh	r3, [r7, #14]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8005518:	68b8      	ldr	r0, [r7, #8]
 800551a:	f7fc fa77 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800551e:	4602      	mov	r2, r0
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4413      	add	r3, r2
                        : nullptr;
 8005524:	e000      	b.n	8005528 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005526:	2300      	movs	r3, #0
  }
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	edd3 7a00 	vldr	s15, [r3]
 800553e:	eeb0 0a67 	vmov.f32	s0, s15
 8005542:	f000 f9d7 	bl	80058f4 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8005546:	eef0 7a40 	vmov.f32	s15, s0
}
 800554a:	eeb0 0a67 	vmov.f32	s0, s15
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f7fc fb1f 	bl	8001bac <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800556e:	4603      	mov	r3, r0
  }
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
  }
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2201      	movs	r2, #1
 80055b6:	2104      	movs	r1, #4
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4798      	blx	r3
 80055bc:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4619      	mov	r1, r3
 80055c2:	2004      	movs	r0, #4
 80055c4:	f7ff f951 	bl	800486a <_ZnwjPv>
 80055c8:	4601      	mov	r1, r0
 80055ca:	460a      	mov	r2, r1
 80055cc:	2300      	movs	r3, #0
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	460b      	mov	r3, r1
  }
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 80055da:	b590      	push	{r4, r7, lr}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 80055e6:	68fc      	ldr	r4, [r7, #12]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f992 	bl	8005912 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80055ee:	4603      	mov	r3, r0
 80055f0:	461a      	mov	r2, r3
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 f82a 	bl	800564e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	bd90      	pop	{r4, r7, pc}

08005604 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f98a 	bl	8005928 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005614:	4603      	mov	r3, r0
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f98a 	bl	8005942 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800562e:	4603      	mov	r3, r0
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800564e:	b590      	push	{r4, r7, lr}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800565a:	68fc      	ldr	r4, [r7, #12]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ff97 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005662:	4602      	mov	r2, r0
 8005664:	f107 0308 	add.w	r3, r7, #8
 8005668:	4619      	mov	r1, r3
 800566a:	4620      	mov	r0, r4
 800566c:	f000 f976 	bl	800595c <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bd90      	pop	{r4, r7, pc}

0800567a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f80a 	bl	800569c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 f971 	bl	800598e <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80056ac:	4603      	mov	r3, r0
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2204      	movs	r2, #4
 80056c6:	2124      	movs	r1, #36	; 0x24
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
 80056cc:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4619      	mov	r1, r3
 80056d2:	2024      	movs	r0, #36	; 0x24
 80056d4:	f7ff f8c9 	bl	800486a <_ZnwjPv>
 80056d8:	4604      	mov	r4, r0
 80056da:	4620      	mov	r0, r4
 80056dc:	2324      	movs	r3, #36	; 0x24
 80056de:	461a      	mov	r2, r3
 80056e0:	2100      	movs	r1, #0
 80056e2:	f00a f94d 	bl	800f980 <memset>
 80056e6:	4623      	mov	r3, r4
  }
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd90      	pop	{r4, r7, pc}

080056f0 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 80056fc:	68fc      	ldr	r4, [r7, #12]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f907 	bl	8005912 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8005704:	4603      	mov	r3, r0
 8005706:	461a      	mov	r2, r3
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	4620      	mov	r0, r4
 800570c:	f000 f82a 	bl	8005764 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	bd90      	pop	{r4, r7, pc}

0800571a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f940 	bl	80059aa <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800572a:	4603      	mov	r3, r0
 800572c:	4618      	mov	r0, r3
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f940 	bl	80059c4 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8005744:	4603      	mov	r3, r0
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005764:	b590      	push	{r4, r7, lr}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005770:	68fc      	ldr	r4, [r7, #12]
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ff0c 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005778:	4602      	mov	r2, r0
 800577a:	f107 0308 	add.w	r3, r7, #8
 800577e:	4619      	mov	r1, r3
 8005780:	4620      	mov	r0, r4
 8005782:	f000 f92c 	bl	80059de <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	bd90      	pop	{r4, r7, pc}

08005790 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f80a 	bl	80057b2 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 f927 	bl	8005a10 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2204      	movs	r2, #4
 80057dc:	2104      	movs	r1, #4
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
 80057e2:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4619      	mov	r1, r3
 80057e8:	2004      	movs	r0, #4
 80057ea:	f7ff f83e 	bl	800486a <_ZnwjPv>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
  }
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 80057fe:	b590      	push	{r4, r7, lr}
 8005800:	b085      	sub	sp, #20
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800580a:	68fc      	ldr	r4, [r7, #12]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f880 	bl	8005912 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8005812:	4603      	mov	r3, r0
 8005814:	461a      	mov	r2, r3
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	4620      	mov	r0, r4
 800581a:	f000 f82a 	bl	8005872 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	bd90      	pop	{r4, r7, pc}

08005828 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 f8fa 	bl	8005a2c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005838:	4603      	mov	r3, r0
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f8fa 	bl	8005a46 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8005852:	4603      	mov	r3, r0
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005872:	b590      	push	{r4, r7, lr}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800587e:	68fc      	ldr	r4, [r7, #12]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fe85 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005886:	4602      	mov	r2, r0
 8005888:	f107 0308 	add.w	r3, r7, #8
 800588c:	4619      	mov	r1, r3
 800588e:	4620      	mov	r0, r4
 8005890:	f000 f8e6 	bl	8005a60 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	bd90      	pop	{r4, r7, pc}

0800589e <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f80a 	bl	80058c0 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bf14      	ite	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	2300      	moveq	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f8e1 	bl	8005a92 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	4603      	mov	r3, r0
 80058e2:	71fb      	strb	r3, [r7, #7]
    return t;
 80058e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	ee07 3a90 	vmov	s15, r3
}
 8005904:	eeb0 0a67 	vmov.f32	s0, s15
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 f8bb 	bl	8005aae <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005938:	4603      	mov	r3, r0
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005942:	b580      	push	{r7, lr}
 8005944:	b082      	sub	sp, #8
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 f8ba 	bl	8005ac6 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005952:	4603      	mov	r3, r0
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800595c:	b5b0      	push	{r4, r5, r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005968:	68fc      	ldr	r4, [r7, #12]
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	f000 f8b8 	bl	8005ae0 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005970:	4605      	mov	r5, r0
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fe0c 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	4629      	mov	r1, r5
 800597e:	4620      	mov	r0, r4
 8005980:	f000 f8b9 	bl	8005af6 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bdb0      	pop	{r4, r5, r7, pc}

0800598e <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 f8ca 	bl	8005b32 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800599e:	4603      	mov	r3, r0
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f8c9 	bl	8005b4c <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80059ba:	4603      	mov	r3, r0
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f8c8 	bl	8005b64 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80059d4:	4603      	mov	r3, r0
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80059de:	b5b0      	push	{r4, r5, r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80059ea:	68fc      	ldr	r4, [r7, #12]
 80059ec:	68b8      	ldr	r0, [r7, #8]
 80059ee:	f000 f8c6 	bl	8005b7e <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80059f2:	4605      	mov	r5, r0
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff fdcb 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	4629      	mov	r1, r5
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 f8c7 	bl	8005b94 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bdb0      	pop	{r4, r5, r7, pc}

08005a10 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f8d8 	bl	8005bd0 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8005a20:	4603      	mov	r3, r0
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f8d7 	bl	8005bea <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f8d6 	bl	8005c02 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005a60:	b5b0      	push	{r4, r5, r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005a6c:	68fc      	ldr	r4, [r7, #12]
 8005a6e:	68b8      	ldr	r0, [r7, #8]
 8005a70:	f000 f8d4 	bl	8005c1c <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005a74:	4605      	mov	r5, r0
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fd8a 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4629      	mov	r1, r5
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 f8d5 	bl	8005c32 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bdb0      	pop	{r4, r5, r7, pc}

08005a92 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f8e6 	bl	8005c6e <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f905 	bl	8005cc6 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005abc:	4603      	mov	r3, r0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f8d9 	bl	8005c88 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005af6:	b590      	push	{r4, r7, lr}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005b02:	68fc      	ldr	r4, [r7, #12]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff fd43 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 f8c6 	bl	8005ca0 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	1d1c      	adds	r4, r3, #4
 8005b18:	68b8      	ldr	r0, [r7, #8]
 8005b1a:	f7ff ffe1 	bl	8005ae0 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4619      	mov	r1, r3
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 f8dd 	bl	8005ce2 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd90      	pop	{r4, r7, pc}

08005b32 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 f8e1 	bl	8005d04 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005b42:	4603      	mov	r3, r0
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f8e1 	bl	8005d1c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f88a 	bl	8005c88 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005b74:	4603      	mov	r3, r0
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005ba0:	68fc      	ldr	r4, [r7, #12]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff fcf4 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4619      	mov	r1, r3
 8005bac:	4620      	mov	r0, r4
 8005bae:	f000 f877 	bl	8005ca0 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1d1c      	adds	r4, r3, #4
 8005bb6:	68b8      	ldr	r0, [r7, #8]
 8005bb8:	f7ff ffe1 	bl	8005b7e <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 f8b9 	bl	8005d38 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd90      	pop	{r4, r7, pc}

08005bd0 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f8bd 	bl	8005d5a <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005be0:	4603      	mov	r3, r0
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f8bd 	bl	8005d72 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 f83b 	bl	8005c88 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005c12:	4603      	mov	r3, r0
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005c32:	b590      	push	{r4, r7, lr}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005c3e:	68fc      	ldr	r4, [r7, #12]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff fca5 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 f828 	bl	8005ca0 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1d1c      	adds	r4, r3, #4
 8005c54:	68b8      	ldr	r0, [r7, #8]
 8005c56:	f7ff ffe1 	bl	8005c1c <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 f895 	bl	8005d8e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}

08005c6e <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f899 	bl	8005db0 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f899 	bl	8005dc8 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8005c96:	4603      	mov	r3, r0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8005caa:	687c      	ldr	r4, [r7, #4]
 8005cac:	6838      	ldr	r0, [r7, #0]
 8005cae:	f7ff fc6f 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 f893 	bl	8005de2 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd90      	pop	{r4, r7, pc}

08005cc6 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f896 	bl	8005e04 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005cec:	6838      	ldr	r0, [r7, #0]
 8005cee:	f7ff fef7 	bl	8005ae0 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f884 	bl	8005e1a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005d12:	4603      	mov	r3, r0
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 f884 	bl	8005e36 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005d42:	6838      	ldr	r0, [r7, #0]
 8005d44:	f7ff ff1b 	bl	8005b7e <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f872 	bl	8005e4c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f872 	bl	8005e68 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 8005d84:	4603      	mov	r3, r0
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005d98:	6838      	ldr	r0, [r7, #0]
 8005d9a:	f7ff ff3f 	bl	8005c1c <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f860 	bl	8005e7e <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f861 	bl	8005e9a <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005dec:	6838      	ldr	r0, [r7, #0]
 8005dee:	f7ff fbcf 	bl	8005590 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005df2:	4602      	mov	r2, r0
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6812      	ldr	r2, [r2, #0]
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f842 	bl	8005eb0 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 f834 	bl	8005ec6 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f826 	bl	8005edc <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 8005e90:	4603      	mov	r3, r0
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return names;
 8005ef8:	4b02      	ldr	r3, [pc, #8]	; (8005f04 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	08016f50 	.word	0x08016f50

08005f08 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
 8005f12:	2300      	movs	r3, #0
 8005f14:	72bb      	strb	r3, [r7, #10]
 8005f16:	2391      	movs	r3, #145	; 0x91
 8005f18:	72fb      	strb	r3, [r7, #11]
 8005f1a:	f107 020b 	add.w	r2, r7, #11
 8005f1e:	f107 010a 	add.w	r1, r7, #10
 8005f22:	1dfb      	adds	r3, r7, #7
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f8a9 	bl	800607c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8005f32:	e008      	b.n	8005f46 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8005f38:	f7ff ffdc 	bl	8005ef4 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	681b      	ldr	r3, [r3, #0]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	08013460 	.word	0x08013460

08005f54 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2106      	movs	r1, #6
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff f8bc 	bl	80050de <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8005f66:	4603      	mov	r3, r0
  }
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	2108      	movs	r1, #8
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff f85f 	bl	8005042 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005f84:	4603      	mov	r3, r0
  }
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f009 f9ce 	bl	800f34a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff ffdc 	bl	8005f70 <_ZNK6tflite12OperatorCode7versionEv>
 8005fb8:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 8005fba:	7fbb      	ldrb	r3, [r7, #30]
 8005fbc:	2b91      	cmp	r3, #145	; 0x91
 8005fbe:	d908      	bls.n	8005fd2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    TF_LITE_REPORT_ERROR(
 8005fc0:	7fbb      	ldrb	r3, [r7, #30]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	492a      	ldr	r1, [pc, #168]	; (8006070 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fe fc1c 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e048      	b.n	8006064 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8005fd2:	7fbb      	ldrb	r3, [r7, #30]
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d01a      	beq.n	800600e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	7fb9      	ldrb	r1, [r7, #30]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	68b8      	ldr	r0, [r7, #8]
 8005fe4:	4798      	blx	r3
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d137      	bne.n	8006064 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 8005ff4:	7fbb      	ldrb	r3, [r7, #30]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff ff86 	bl	8005f08 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	491c      	ldr	r1, [pc, #112]	; (8006074 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fe fbfe 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 8006008:	2301      	movs	r3, #1
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e02a      	b.n	8006064 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff ffa0 	bl	8005f54 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d006      	beq.n	8006032 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 8006024:	4914      	ldr	r1, [pc, #80]	; (8006078 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fe fbec 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800602c:	2301      	movs	r3, #1
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e018      	b.n	8006064 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff ff8e 	bl	8005f54 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8006038:	4603      	mov	r3, r0
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe fc21 	bl	8004882 <_ZNK11flatbuffers6String5c_strEv>
 8006040:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3304      	adds	r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	68b8      	ldr	r0, [r7, #8]
 8006050:	4798      	blx	r3
 8006052:	4602      	mov	r2, r0
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 8006060:	2301      	movs	r3, #1
 8006062:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8006064:	7ffb      	ldrb	r3, [r7, #31]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	08013464 	.word	0x08013464
 8006074:	080134b8 	.word	0x080134b8
 8006078:	0801355c 	.word	0x0801355c

0800607c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	781a      	ldrb	r2, [r3, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d305      	bcc.n	80060a0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d201      	bcs.n	80060a4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	ed87 0a01 	vstr	s0, [r7, #4]
 80060bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80060c0:	fef8 7a67 	vrinta.f32	s15, s15
 80060c4:	eeb0 0a67 	vmov.f32	s0, s15
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 80060d2:	b480      	push	{r7}
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80060da:	4618      	mov	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	ed87 0b02 	vstr	d0, [r7, #8]
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060fe:	f7fa fd0d 	bl	8000b1c <__aeabi_dcmpeq>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
    return;
 8006114:	e06b      	b.n	80061ee <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8006116:	6838      	ldr	r0, [r7, #0]
 8006118:	ed97 0b02 	vldr	d0, [r7, #8]
 800611c:	f009 f9f4 	bl	800f508 <frexp>
 8006120:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	4b32      	ldr	r3, [pc, #200]	; (80061f4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800612a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800612e:	f7fa fa8d 	bl	800064c <__aeabi_dmul>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	ec43 2b17 	vmov	d7, r2, r3
 800613a:	eeb0 0a47 	vmov.f32	s0, s14
 800613e:	eef0 0a67 	vmov.f32	s1, s15
 8006142:	f000 f97a 	bl	800643a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8006146:	ec53 2b10 	vmov	r2, r3, d0
 800614a:	4610      	mov	r0, r2
 800614c:	4619      	mov	r1, r3
 800614e:	f7fa fdbd 	bl	8000ccc <__aeabi_d2lz>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800615a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800615e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006162:	f04f 0100 	mov.w	r1, #0
 8006166:	4290      	cmp	r0, r2
 8006168:	eb71 0303 	sbcs.w	r3, r1, r3
 800616c:	da01      	bge.n	8006172 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800616e:	f009 fb68 	bl	800f842 <abort>
  if (q_fixed == (1ll << 31)) {
 8006172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	bf08      	it	eq
 800617a:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800617e:	d117      	bne.n	80061b0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 8006180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006184:	2a00      	cmp	r2, #0
 8006186:	f173 0100 	sbcs.w	r1, r3, #0
 800618a:	da02      	bge.n	8006192 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xae>
 800618c:	3201      	adds	r2, #1
 800618e:	f143 0300 	adc.w	r3, r3, #0
 8006192:	f04f 0000 	mov.w	r0, #0
 8006196:	f04f 0100 	mov.w	r1, #0
 800619a:	0850      	lsrs	r0, r2, #1
 800619c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80061a0:	1059      	asrs	r1, r3, #1
 80061a2:	e9c7 0106 	strd	r0, r1, [r7, #24]
    ++*shift;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 80061b0:	f7ff ff8f 	bl	80060d2 <_ZNSt14numeric_limitsIlE3maxEv>
 80061b4:	4603      	mov	r3, r0
 80061b6:	4618      	mov	r0, r3
 80061b8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80061bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061c0:	4290      	cmp	r0, r2
 80061c2:	eb71 0303 	sbcs.w	r3, r1, r3
 80061c6:	da01      	bge.n	80061cc <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 80061c8:	f009 fb3b 	bl	800f842 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f113 0f1f 	cmn.w	r3, #31
 80061d4:	da08      	bge.n	80061e8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
}
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	41e00000 	.word	0x41e00000

080061f8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800620c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006210:	f7fa fcac 	bl	8000b6c <__aeabi_dcmpgt>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800621a:	f009 fb12 	bl	800f842 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	ed97 0b02 	vldr	d0, [r7, #8]
 8006226:	f7ff ff5d 	bl	80060e4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	da01      	bge.n	8006236 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8006232:	f009 fb06 	bl	800f842 <abort>
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	3ff00000 	.word	0x3ff00000

08006244 <_ZSt3minIdERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa fc69 	bl	8000b30 <__aeabi_dcmplt>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	e000      	b.n	800626a <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8006268:	687b      	ldr	r3, [r7, #4]
    }
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	0000      	movs	r0, r0
 8006274:	0000      	movs	r0, r0
	...

08006278 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8006278:	b5b0      	push	{r4, r5, r7, lr}
 800627a:	b08e      	sub	sp, #56	; 0x38
 800627c:	af00      	add	r7, sp, #0
 800627e:	ed87 0b06 	vstr	d0, [r7, #24]
 8006282:	ed87 1b04 	vstr	d1, [r7, #16]
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800628c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006290:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006294:	f7fa f9da 	bl	800064c <__aeabi_dmul>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	fa22 f303 	lsr.w	r3, r2, r3
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fa f964 	bl	8000578 <__aeabi_i2d>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4620      	mov	r0, r4
 80062b6:	4629      	mov	r1, r5
 80062b8:	f7fa f9c8 	bl	800064c <__aeabi_dmul>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80062c4:	a30e      	add	r3, pc, #56	; (adr r3, 8006300 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80062ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80062d2:	f107 0320 	add.w	r3, r7, #32
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff ffb3 	bl	8006244 <_ZSt3minIdERKT_S2_S2_>
 80062de:	4603      	mov	r3, r0
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	68b8      	ldr	r0, [r7, #8]
 80062ec:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80062f0:	f7ff ff82 	bl	80061f8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 80062f4:	bf00      	nop
 80062f6:	3738      	adds	r7, #56	; 0x38
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bdb0      	pop	{r4, r5, r7, pc}
 80062fc:	f3af 8000 	nop.w
 8006300:	ffc00000 	.word	0xffc00000
 8006304:	41dfffff 	.word	0x41dfffff

08006308 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8006316:	2201      	movs	r2, #1
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	4618      	mov	r0, r3
 8006322:	f7fa f929 	bl	8000578 <__aeabi_i2d>
 8006326:	4682      	mov	sl, r0
 8006328:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1ad1      	subs	r1, r2, r3
 8006330:	f04f 0201 	mov.w	r2, #1
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	f1a1 0620 	sub.w	r6, r1, #32
 800633c:	f1c1 0020 	rsb	r0, r1, #32
 8006340:	fa03 f901 	lsl.w	r9, r3, r1
 8006344:	fa02 f606 	lsl.w	r6, r2, r6
 8006348:	ea49 0906 	orr.w	r9, r9, r6
 800634c:	fa22 f000 	lsr.w	r0, r2, r0
 8006350:	ea49 0900 	orr.w	r9, r9, r0
 8006354:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8006358:	4640      	mov	r0, r8
 800635a:	4649      	mov	r1, r9
 800635c:	f7fa f948 	bl	80005f0 <__aeabi_l2d>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4650      	mov	r0, sl
 8006366:	4659      	mov	r1, fp
 8006368:	f7fa f970 	bl	800064c <__aeabi_dmul>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4690      	mov	r8, r2
 8006372:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8006374:	f04f 0201 	mov.w	r2, #1
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	f1a1 0620 	sub.w	r6, r1, #32
 8006382:	f1c1 0020 	rsb	r0, r1, #32
 8006386:	fa03 f501 	lsl.w	r5, r3, r1
 800638a:	fa02 f606 	lsl.w	r6, r2, r6
 800638e:	4335      	orrs	r5, r6
 8006390:	fa22 f000 	lsr.w	r0, r2, r0
 8006394:	4305      	orrs	r5, r0
 8006396:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800639a:	4620      	mov	r0, r4
 800639c:	4629      	mov	r1, r5
 800639e:	f7fa f927 	bl	80005f0 <__aeabi_l2d>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
  const double max_input_rescaled =
 80063a6:	4640      	mov	r0, r8
 80063a8:	4649      	mov	r1, r9
 80063aa:	f7fa fa79 	bl	80008a0 <__aeabi_ddiv>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 80063b6:	ed97 0b04 	vldr	d0, [r7, #16]
 80063ba:	f009 f825 	bl	800f408 <floor>
 80063be:	ec53 2b10 	vmov	r2, r3, d0
 80063c2:	4610      	mov	r0, r2
 80063c4:	4619      	mov	r1, r3
 80063c6:	f7fa fbf1 	bl	8000bac <__aeabi_d2iz>
 80063ca:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063d6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	ed93 7a00 	vldr	s14, [r3]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	edd3 7a00 	vldr	s15, [r3]
 80063ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f4:	d501      	bpl.n	80063fa <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	e000      	b.n	80063fc <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80063fa:	687b      	ldr	r3, [r7, #4]
    }
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	ed93 7a00 	vldr	s14, [r3]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	edd3 7a00 	vldr	s15, [r3]
 800641e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006426:	d501      	bpl.n	800642c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	e000      	b.n	800642e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800642c:	687b      	ldr	r3, [r7, #4]
    }
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	ed87 0b00 	vstr	d0, [r7]
 8006444:	ed97 0b00 	vldr	d0, [r7]
 8006448:	f009 f896 	bl	800f578 <round>
 800644c:	eeb0 7a40 	vmov.f32	s14, s0
 8006450:	eef0 7a60 	vmov.f32	s15, s1
 8006454:	eeb0 0a47 	vmov.f32	s0, s14
 8006458:	eef0 0a67 	vmov.f32	s1, s15
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	ed87 0a01 	vstr	s0, [r7, #4]
 800646c:	ed97 0a01 	vldr	s0, [r7, #4]
 8006470:	f7ff fe1f 	bl	80060b2 <_ZSt5roundf>
 8006474:	eef0 7a40 	vmov.f32	s15, s0
 8006478:	eeb0 0a67 	vmov.f32	s0, s15
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	ed87 0b00 	vstr	d0, [r7]
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006494:	ec43 2b17 	vmov	d7, r2, r3
 8006498:	eeb0 0a47 	vmov.f32	s0, s14
 800649c:	eef0 0a67 	vmov.f32	s1, s15
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	4b02      	ldr	r3, [pc, #8]	; (80064bc <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80064b2:	4618      	mov	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	ffff8000 	.word	0xffff8000

080064c0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 80064d2:	b480      	push	{r7}
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064da:	4618      	mov	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <_ZSt3expf>:
  { return __builtin_expf(__x); }
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80064ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80064f2:	f009 f887 	bl	800f604 <expf>
 80064f6:	eef0 7a40 	vmov.f32	s15, s0
 80064fa:	eeb0 0a67 	vmov.f32	s0, s15
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8006504:	b5b0      	push	{r4, r5, r7, lr}
 8006506:	b08c      	sub	sp, #48	; 0x30
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d107      	bne.n	8006526 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8006516:	f7ff ffdc 	bl	80064d2 <_ZNSt14numeric_limitsIlE3minEv>
 800651a:	4602      	mov	r2, r0
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4293      	cmp	r3, r2
 8006520:	d101      	bne.n	8006526 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8006526:	2300      	movs	r3, #0
 8006528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	461a      	mov	r2, r3
 8006530:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006534:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006540:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	fb02 f203 	mul.w	r2, r2, r3
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	6a39      	ldr	r1, [r7, #32]
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	18d1      	adds	r1, r2, r3
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	4419      	add	r1, r3
 8006560:	460b      	mov	r3, r1
 8006562:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006566:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800656a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800656e:	2a00      	cmp	r2, #0
 8006570:	f173 0300 	sbcs.w	r3, r3, #0
 8006574:	db02      	blt.n	800657c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8006576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800657a:	e000      	b.n	800657e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800657c:	4b18      	ldr	r3, [pc, #96]	; (80065e0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800657e:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4618      	mov	r0, r3
 8006584:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006588:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800658c:	1884      	adds	r4, r0, r2
 800658e:	eb41 0503 	adc.w	r5, r1, r3
 8006592:	4622      	mov	r2, r4
 8006594:	462b      	mov	r3, r5
 8006596:	2a00      	cmp	r2, #0
 8006598:	f173 0100 	sbcs.w	r1, r3, #0
 800659c:	da06      	bge.n	80065ac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800659e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80065a2:	f04f 0100 	mov.w	r1, #0
 80065a6:	1812      	adds	r2, r2, r0
 80065a8:	eb41 0303 	adc.w	r3, r1, r3
 80065ac:	f04f 0000 	mov.w	r0, #0
 80065b0:	f04f 0100 	mov.w	r1, #0
 80065b4:	0fd0      	lsrs	r0, r2, #31
 80065b6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80065ba:	17d9      	asrs	r1, r3, #31
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 80065c0:	4613      	mov	r3, r2
 80065c2:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80065c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 80065cc:	f7ff fd81 	bl	80060d2 <_ZNSt14numeric_limitsIlE3maxEv>
 80065d0:	4603      	mov	r3, r0
 80065d2:	e000      	b.n	80065d6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 80065d4:	68bb      	ldr	r3, [r7, #8]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3730      	adds	r7, #48	; 0x30
 80065da:	46bd      	mov	sp, r7
 80065dc:	bdb0      	pop	{r4, r5, r7, pc}
 80065de:	bf00      	nop
 80065e0:	c0000001 	.word	0xc0000001

080065e4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80065f6:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dc02      	bgt.n	8006604 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	425b      	negs	r3, r3
 8006602:	e000      	b.n	8006606 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff ff76 	bl	8006504 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8006618:	4603      	mov	r3, r0
 800661a:	6939      	ldr	r1, [r7, #16]
 800661c:	4618      	mov	r0, r3
 800661e:	f000 f82d 	bl	800667c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8006622:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	da01      	bge.n	8006646 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	e000      	b.n	8006648 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8006646:	687b      	ldr	r3, [r7, #4]
    }
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	da01      	bge.n	800666e <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	e000      	b.n	8006670 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800666e:	687b      	ldr	r3, [r7, #4]
    }
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800667c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800667e:	b089      	sub	sp, #36	; 0x24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	2900      	cmp	r1, #0
 800668a:	da06      	bge.n	800669a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800668c:	4b31      	ldr	r3, [pc, #196]	; (8006754 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800668e:	4a32      	ldr	r2, [pc, #200]	; (8006758 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8006690:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8006694:	4831      	ldr	r0, [pc, #196]	; (800675c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8006696:	f009 f8db 	bl	800f850 <__assert_func>
  assert(exponent <= 31);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	291f      	cmp	r1, #31
 800669e:	dd06      	ble.n	80066ae <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 80066a0:	4b2f      	ldr	r3, [pc, #188]	; (8006760 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 80066a2:	4a2d      	ldr	r2, [pc, #180]	; (8006758 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 80066a4:	f240 1167 	movw	r1, #359	; 0x167
 80066a8:	482c      	ldr	r0, [pc, #176]	; (800675c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 80066aa:	f009 f8d1 	bl	800f850 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 80066ae:	f04f 0001 	mov.w	r0, #1
 80066b2:	f04f 0100 	mov.w	r1, #0
 80066b6:	683c      	ldr	r4, [r7, #0]
 80066b8:	f1a4 0620 	sub.w	r6, r4, #32
 80066bc:	f1c4 0520 	rsb	r5, r4, #32
 80066c0:	fa01 f304 	lsl.w	r3, r1, r4
 80066c4:	fa00 f606 	lsl.w	r6, r0, r6
 80066c8:	4333      	orrs	r3, r6
 80066ca:	fa20 f505 	lsr.w	r5, r0, r5
 80066ce:	432b      	orrs	r3, r5
 80066d0:	fa00 f204 	lsl.w	r2, r0, r4
 80066d4:	4613      	mov	r3, r2
 80066d6:	3b01      	subs	r3, #1
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 f881 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80066de:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 80066e0:	2000      	movs	r0, #0
 80066e2:	f000 f87d 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80066e6:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 80066e8:	2001      	movs	r0, #1
 80066ea:	f000 f879 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80066ee:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 80066f0:	69f9      	ldr	r1, [r7, #28]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f87f 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80066f8:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 80066fa:	2101      	movs	r1, #1
 80066fc:	69f8      	ldr	r0, [r7, #28]
 80066fe:	f000 f888 	bl	8006812 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8006702:	4604      	mov	r4, r0
 8006704:	69b9      	ldr	r1, [r7, #24]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f892 	bl	8006830 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800670c:	4603      	mov	r3, r0
 800670e:	6979      	ldr	r1, [r7, #20]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 f870 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8006716:	4603      	mov	r3, r0
 8006718:	4619      	mov	r1, r3
 800671a:	4620      	mov	r0, r4
 800671c:	f000 f89c 	bl	8006858 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8006720:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f874 	bl	8006812 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800672a:	4604      	mov	r4, r0
 800672c:	68f9      	ldr	r1, [r7, #12]
 800672e:	6938      	ldr	r0, [r7, #16]
 8006730:	f000 f8a0 	bl	8006874 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8006734:	4603      	mov	r3, r0
 8006736:	6979      	ldr	r1, [r7, #20]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 f85c 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800673e:	4603      	mov	r3, r0
 8006740:	4619      	mov	r1, r3
 8006742:	4620      	mov	r0, r4
 8006744:	f000 f888 	bl	8006858 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8006748:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800674a:	4618      	mov	r0, r3
 800674c:	3724      	adds	r7, #36	; 0x24
 800674e:	46bd      	mov	sp, r7
 8006750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006752:	bf00      	nop
 8006754:	08013794 	.word	0x08013794
 8006758:	080137a4 	.word	0x080137a4
 800675c:	08013800 	.word	0x08013800
 8006760:	08013864 	.word	0x08013864

08006764 <_ZN6tflite17CountLeadingZerosImEEiT_>:
  return result;
}
#endif

template <typename T>
int CountLeadingZeros(T integer_input) {
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8006778:	e000      	b.n	800677c <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800677a:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800679e:	b590      	push	{r4, r7, lr}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80067a6:	f107 030c 	add.w	r3, r7, #12
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff ffec 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80067b0:	4604      	mov	r4, r0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f814 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80067b8:	4603      	mov	r3, r0
 80067ba:	6023      	str	r3, [r4, #0]
    return retval;
 80067bc:	68fb      	ldr	r3, [r7, #12]
  }
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd90      	pop	{r4, r7, pc}

080067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80067ce:	2100      	movs	r1, #0
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff ff53 	bl	800667c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80067d6:	4603      	mov	r3, r0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  return x;
 80067e8:	687b      	ldr	r3, [r7, #4]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  return a & b;
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	4013      	ands	r3, r2
}
 8006806:	4618      	mov	r0, r3
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	fa42 f303 	asr.w	r3, r2, r3
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	bfb4      	ite	lt
 8006842:	2301      	movlt	r3, #1
 8006844:	2300      	movge	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	4618      	mov	r0, r3
 800684a:	f000 f841 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800684e:	4603      	mov	r3, r0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  return a + b;
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	4413      	add	r3, r2
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	bfcc      	ite	gt
 8006886:	2301      	movgt	r3, #1
 8006888:	2300      	movle	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	4618      	mov	r0, r3
 800688e:	f000 f81f 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8006892:	4603      	mov	r3, r0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f824 	bl	80068f2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 80068aa:	4603      	mov	r3, r0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  return a - b;
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	1ad3      	subs	r3, r2, r3
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 80068de:	2000      	movs	r0, #0
 80068e0:	f000 f814 	bl	800690c <_ZN8gemmlowp6BitNotIlEET_S1_>
 80068e4:	4603      	mov	r3, r0
 80068e6:	e000      	b.n	80068ea <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80068fa:	2101      	movs	r1, #1
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff febd 	bl	800667c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8006902:	4603      	mov	r3, r0
  }
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  return ~a;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	43db      	mvns	r3, r3
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8006924:	b480      	push	{r7}
 8006926:	b089      	sub	sp, #36	; 0x24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	461a      	mov	r2, r3
 8006932:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006936:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800693a:	2201      	movs	r2, #1
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	461a      	mov	r2, r3
 8006944:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006948:	69f9      	ldr	r1, [r7, #28]
 800694a:	fb02 f001 	mul.w	r0, r2, r1
 800694e:	69b9      	ldr	r1, [r7, #24]
 8006950:	fb03 f101 	mul.w	r1, r3, r1
 8006954:	4401      	add	r1, r0
 8006956:	69b8      	ldr	r0, [r7, #24]
 8006958:	fba0 2302 	umull	r2, r3, r0, r2
 800695c:	4419      	add	r1, r3
 800695e:	460b      	mov	r3, r1
 8006960:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006964:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8006968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800696c:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800696e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006972:	60bb      	str	r3, [r7, #8]
             ? min
 8006974:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006978:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800697c:	f173 33ff 	sbcs.w	r3, r3, #4294967295	; 0xffffffff
 8006980:	db0e      	blt.n	80069a0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8006982:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006986:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800698a:	f04f 0100 	mov.w	r1, #0
 800698e:	4290      	cmp	r0, r2
 8006990:	eb71 0303 	sbcs.w	r3, r1, r3
 8006994:	db01      	blt.n	800699a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 8006996:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8006998:	e004      	b.n	80069a4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 800699a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800699e:	e001      	b.n	80069a4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 80069a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3724      	adds	r7, #36	; 0x24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff ff19 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80069c4:	4604      	mov	r4, r0
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7ff ffa0 	bl	800690c <_ZN8gemmlowp6BitNotIlEET_S1_>
 80069cc:	4603      	mov	r3, r0
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff ff10 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80069d6:	4603      	mov	r3, r0
 80069d8:	4619      	mov	r1, r3
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 f805 	bl	80069ea <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 80069e0:	4603      	mov	r3, r0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd90      	pop	{r4, r7, pc}

080069ea <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  return a ^ b;
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	4053      	eors	r3, r2
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8006a06:	b480      	push	{r7}
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8006a0e:	4618      	mov	r0, r3
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	237f      	movs	r3, #127	; 0x7f
 8006a1e:	4618      	mov	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	23ff      	movs	r3, #255	; 0xff
 8006a3e:	4618      	mov	r0, r3
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	019b      	lsls	r3, r3, #6
 8006a7c:	4413      	add	r3, r2
 8006a7e:	e006      	b.n	8006a8e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	bf00      	nop
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8006a96:	b480      	push	{r7}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	db0f      	blt.n	8006aca <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	da0b      	bge.n	8006aca <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	4413      	add	r3, r2
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac4:	d001      	beq.n	8006aca <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	e001      	b.n	8006ace <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8006aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8006aea:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff ffce 	bl	8006a96 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8006afa:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da01      	bge.n	8006b06 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8006b02:	2300      	movs	r3, #0
 8006b04:	e005      	b.n	8006b12 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8006b06:	6979      	ldr	r1, [r7, #20]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff ffaa 	bl	8006a62 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	bf00      	nop
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	68b9      	ldr	r1, [r7, #8]
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7ff ffd5 	bl	8006ada <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8006b30:	4603      	mov	r3, r0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  if (tensor == nullptr) return nullptr;
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 8006b4a:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff ff9e 	bl	8006a96 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8006b5a:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da01      	bge.n	8006b66 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e005      	b.n	8006b72 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8006b66:	6979      	ldr	r1, [r7, #20]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7ff ff7a 	bl	8006a62 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	bf00      	nop
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ffc5 	bl	8006b1a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8006b90:	4603      	mov	r3, r0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	0000      	movs	r0, r0
 8006b9c:	0000      	movs	r0, r0
	...

08006ba0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8006ba0:	b5b0      	push	{r4, r5, r7, lr}
 8006ba2:	b08e      	sub	sp, #56	; 0x38
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7f9 fcf2 	bl	800059c <__aeabi_f2d>
 8006bb8:	4604      	mov	r4, r0
 8006bba:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7f9 fceb 	bl	800059c <__aeabi_f2d>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006bca:	4620      	mov	r0, r4
 8006bcc:	4629      	mov	r1, r5
 8006bce:	f7f9 fd3d 	bl	800064c <__aeabi_dmul>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d04b      	beq.n	8006c78 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7f9 fcd9 	bl	800059c <__aeabi_f2d>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8006bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006bfa:	f7f9 fb6f 	bl	80002dc <__aeabi_dsub>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	ec43 2b17 	vmov	d7, r2, r3
 8006c06:	eeb0 0a47 	vmov.f32	s0, s14
 8006c0a:	eef0 0a67 	vmov.f32	s1, s15
 8006c0e:	f7ff fc38 	bl	8006482 <_ZSt3absd>
 8006c12:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8006c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7f9 fcbe 	bl	800059c <__aeabi_f2d>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8006c28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c30:	f7f9 fe36 	bl	80008a0 <__aeabi_ddiv>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	461c      	mov	r4, r3
 8006c40:	a318      	add	r3, pc, #96	; (adr r3, 8006ca4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f7f9 ff7d 	bl	8000b44 <__aeabi_dcmple>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8006c50:	2300      	movs	r3, #0
 8006c52:	461c      	mov	r4, r3
 8006c54:	b2e3      	uxtb	r3, r4
 8006c56:	f083 0301 	eor.w	r3, r3, #1
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	695c      	ldr	r4, [r3, #20]
 8006c64:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8006c6c:	4a0b      	ldr	r2, [pc, #44]	; (8006c9c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8006c6e:	490c      	ldr	r1, [pc, #48]	; (8006ca0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	47a0      	blx	r4
 8006c74:	2301      	movs	r3, #1
 8006c76:	e009      	b.n	8006c8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8006c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f812 	bl	8006cac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8006c88:	4603      	mov	r3, r0
                                          multiplier);
 8006c8a:	bf00      	nop
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3730      	adds	r7, #48	; 0x30
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bdb0      	pop	{r4, r5, r7, pc}
 8006c94:	f3af 8000 	nop.w
 8006c98:	08013af4 	.word	0x08013af4
 8006c9c:	08013934 	.word	0x08013934
 8006ca0:	080139e0 	.word	0x080139e0
 8006ca4:	47ae147b 	.word	0x47ae147b
 8006ca8:	3f947ae1 	.word	0x3f947ae1

08006cac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8006cac:	b590      	push	{r4, r7, lr}
 8006cae:	b089      	sub	sp, #36	; 0x24
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	ed93 7a03 	vldr	s14, [r3, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8006cca:	ee17 0a90 	vmov	r0, s15
 8006cce:	f7f9 fc65 	bl	800059c <__aeabi_f2d>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8006cda:	2301      	movs	r3, #1
 8006cdc:	461c      	mov	r4, r3
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006cea:	f7f9 ff35 	bl	8000b58 <__aeabi_dcmpge>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	461c      	mov	r4, r3
 8006cf8:	b2e3      	uxtb	r3, r4
 8006cfa:	f083 0301 	eor.w	r3, r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	695c      	ldr	r4, [r3, #20]
 8006d08:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	f240 134b 	movw	r3, #331	; 0x14b
 8006d10:	4a0e      	ldr	r2, [pc, #56]	; (8006d4c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8006d12:	490f      	ldr	r1, [pc, #60]	; (8006d50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	47a0      	blx	r4
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e010      	b.n	8006d3e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7f9 fc3b 	bl	800059c <__aeabi_f2d>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d2e:	f7f9 fdb7 	bl	80008a0 <__aeabi_ddiv>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d38:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd90      	pop	{r4, r7, pc}
 8006d46:	bf00      	nop
 8006d48:	08013b18 	.word	0x08013b18
 8006d4c:	08013934 	.word	0x08013934
 8006d50:	080139e0 	.word	0x080139e0

08006d54 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8006d54:	b590      	push	{r4, r7, lr}
 8006d56:	b08b      	sub	sp, #44	; 0x2c
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6178      	str	r0, [r7, #20]
 8006d5c:	ed87 0a04 	vstr	s0, [r7, #16]
 8006d60:	60f9      	str	r1, [r7, #12]
 8006d62:	edc7 0a02 	vstr	s1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8006d68:	ed97 7a02 	vldr	s14, [r7, #8]
 8006d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006d70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006d74:	eeb0 0a66 	vmov.f32	s0, s13
 8006d78:	f7ff fb73 	bl	8006462 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8006d7c:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8006d80:	f7ff fba7 	bl	80064d2 <_ZNSt14numeric_limitsIlE3minEv>
 8006d84:	ee07 0a90 	vmov	s15, r0
 8006d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d8c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d98:	db0e      	blt.n	8006db8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8006d9a:	f7ff f99a 	bl	80060d2 <_ZNSt14numeric_limitsIlE3maxEv>
 8006d9e:	ee07 0a90 	vmov	s15, r0
 8006da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8006da6:	ed97 7a07 	vldr	s14, [r7, #28]
 8006daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	d801      	bhi.n	8006db8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8006db8:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8006dba:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 8006dbc:	7efb      	ldrb	r3, [r7, #27]
 8006dbe:	f083 0301 	eor.w	r3, r3, #1
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	695c      	ldr	r4, [r3, #20]
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	; (8006e00 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	f240 1359 	movw	r3, #345	; 0x159
 8006dd4:	4a0b      	ldr	r2, [pc, #44]	; (8006e04 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 8006dd6:	490c      	ldr	r1, [pc, #48]	; (8006e08 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 8006dd8:	6978      	ldr	r0, [r7, #20]
 8006dda:	47a0      	blx	r4
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e00a      	b.n	8006df6 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 8006de0:	edd7 7a07 	vldr	s15, [r7, #28]
 8006de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006de8:	ee17 2a90 	vmov	r2, s15
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	441a      	add	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3724      	adds	r7, #36	; 0x24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd90      	pop	{r4, r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	08013b34 	.word	0x08013b34
 8006e04:	08013934 	.word	0x08013934
 8006e08:	080139e0 	.word	0x080139e0

08006e0c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	; 0x28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	607a      	str	r2, [r7, #4]
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d120      	bne.n	8006e70 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8006e2e:	f107 0314 	add.w	r3, r7, #20
 8006e32:	461a      	mov	r2, r3
 8006e34:	eddf 0a52 	vldr	s1, [pc, #328]	; 8006f80 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8006e38:	6a39      	ldr	r1, [r7, #32]
 8006e3a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff ff88 	bl	8006d54 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006e44:	4603      	mov	r3, r0
 8006e46:	76fb      	strb	r3, [r7, #27]
 8006e48:	7efb      	ldrb	r3, [r7, #27]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 8006e4e:	7efb      	ldrb	r3, [r7, #27]
 8006e50:	e091      	b.n	8006f76 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8006e52:	f107 0214 	add.w	r2, r7, #20
 8006e56:	1d3b      	adds	r3, r7, #4
 8006e58:	4611      	mov	r1, r2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff fbfa 	bl	8006654 <_ZSt3maxIlERKT_S2_S2_>
 8006e60:	4603      	mov	r3, r0
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e66:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e081      	b.n	8006f74 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d13a      	bne.n	8006eec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 8006e76:	f107 0314 	add.w	r3, r7, #20
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	eddf 0a40 	vldr	s1, [pc, #256]	; 8006f80 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8006e80:	6a39      	ldr	r1, [r7, #32]
 8006e82:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff ff64 	bl	8006d54 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	777b      	strb	r3, [r7, #29]
 8006e90:	7f7b      	ldrb	r3, [r7, #29]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 8006e96:	7f7b      	ldrb	r3, [r7, #29]
 8006e98:	e06d      	b.n	8006f76 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8006e9a:	f107 0214 	add.w	r2, r7, #20
 8006e9e:	1d3b      	adds	r3, r7, #4
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fbd6 	bl	8006654 <_ZSt3maxIlERKT_S2_S2_>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8006eb0:	f107 0314 	add.w	r3, r7, #20
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8006eba:	6a39      	ldr	r1, [r7, #32]
 8006ebc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff ff47 	bl	8006d54 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	773b      	strb	r3, [r7, #28]
 8006eca:	7f3b      	ldrb	r3, [r7, #28]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 8006ed0:	7f3b      	ldrb	r3, [r7, #28]
 8006ed2:	e050      	b.n	8006f76 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8006ed4:	f107 0214 	add.w	r2, r7, #20
 8006ed8:	463b      	mov	r3, r7
 8006eda:	4611      	mov	r1, r2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff fba5 	bl	800662c <_ZSt3minIlERKT_S2_S2_>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	e043      	b.n	8006f74 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d13a      	bne.n	8006f68 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 8006ef2:	f107 0314 	add.w	r3, r7, #20
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8006efc:	6a39      	ldr	r1, [r7, #32]
 8006efe:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff ff26 	bl	8006d54 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	7ffb      	ldrb	r3, [r7, #31]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 8006f12:	7ffb      	ldrb	r3, [r7, #31]
 8006f14:	e02f      	b.n	8006f76 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8006f16:	f107 0214 	add.w	r2, r7, #20
 8006f1a:	1d3b      	adds	r3, r7, #4
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff fb98 	bl	8006654 <_ZSt3maxIlERKT_S2_S2_>
 8006f24:	4603      	mov	r3, r0
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8006f2c:	f107 0314 	add.w	r3, r7, #20
 8006f30:	461a      	mov	r2, r3
 8006f32:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006f36:	6a39      	ldr	r1, [r7, #32]
 8006f38:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff ff09 	bl	8006d54 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006f42:	4603      	mov	r3, r0
 8006f44:	77bb      	strb	r3, [r7, #30]
 8006f46:	7fbb      	ldrb	r3, [r7, #30]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 8006f4c:	7fbb      	ldrb	r3, [r7, #30]
 8006f4e:	e012      	b.n	8006f76 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8006f50:	f107 0214 	add.w	r2, r7, #20
 8006f54:	463b      	mov	r3, r7
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fb67 	bl	800662c <_ZSt3minIlERKT_S2_S2_>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	e005      	b.n	8006f74 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3728      	adds	r7, #40	; 0x28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	00000000 	.word	0x00000000

08006f84 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b08b      	sub	sp, #44	; 0x2c
 8006f88:	af04      	add	r7, sp, #16
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	460b      	mov	r3, r1
 8006f92:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d108      	bne.n	8006fb6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8006fa4:	f7ff fd40 	bl	8006a28 <_ZNSt14numeric_limitsIhE3minEv>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8006fac:	f7ff fd44 	bl	8006a38 <_ZNSt14numeric_limitsIhE3maxEv>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	e025      	b.n	8007002 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b09      	cmp	r3, #9
 8006fbc:	d108      	bne.n	8006fd0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8006fbe:	f7ff fd22 	bl	8006a06 <_ZNSt14numeric_limitsIaE3minEv>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8006fc6:	f7ff fd27 	bl	8006a18 <_ZNSt14numeric_limitsIaE3maxEv>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	e018      	b.n	8007002 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b07      	cmp	r3, #7
 8006fd6:	d108      	bne.n	8006fea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8006fd8:	f7ff fa68 	bl	80064ac <_ZNSt14numeric_limitsIsE3minEv>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8006fe0:	f7ff fa6e 	bl	80064c0 <_ZNSt14numeric_limitsIsE3maxEv>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	e00b      	b.n	8007002 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	695c      	ldr	r4, [r3, #20]
 8006fee:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	f240 1391 	movw	r3, #401	; 0x191
 8006ff6:	4a0d      	ldr	r2, [pc, #52]	; (800702c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8006ff8:	490d      	ldr	r1, [pc, #52]	; (8007030 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	47a0      	blx	r4
 8006ffe:	2301      	movs	r3, #1
 8007000:	e00d      	b.n	800701e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 8007002:	7af9      	ldrb	r1, [r7, #11]
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	9302      	str	r3, [sp, #8]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	9301      	str	r3, [sp, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff fef9 	bl	8006e0c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 800701a:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 800701c:	bf00      	nop
}
 800701e:	4618      	mov	r0, r3
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	bd90      	pop	{r4, r7, pc}
 8007026:	bf00      	nop
 8007028:	08013b5c 	.word	0x08013b5c
 800702c:	08013934 	.word	0x08013934
 8007030:	080139e0 	.word	0x080139e0

08007034 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	210a      	movs	r1, #10
 8007040:	4618      	mov	r0, r3
 8007042:	f000 f847 	bl	80070d4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8007046:	4603      	mov	r3, r0
  }
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2108      	movs	r1, #8
 800705c:	4618      	mov	r0, r3
 800705e:	f000 f849 	bl	80070f4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8007062:	4603      	mov	r3, r0
  }
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff ffdd 	bl	8007034 <_ZNK6tflite8SubGraph9operatorsEv>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	bf14      	ite	ne
 8007080:	2301      	movne	r3, #1
 8007082:	2300      	moveq	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d008      	beq.n	800709c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff ffd2 	bl	8007034 <_ZNK6tflite8SubGraph9operatorsEv>
 8007090:	4603      	mov	r3, r0
 8007092:	4618      	mov	r0, r3
 8007094:	f000 f83e 	bl	8007114 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8007098:	4603      	mov	r3, r0
 800709a:	e000      	b.n	800709e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 800709c:	2300      	movs	r3, #0
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff ffcd 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 80070b6:	4602      	mov	r2, r0
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f000 f845 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80070c2:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff ffd1 	bl	800706c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 80070ca:	4603      	mov	r3, r0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80070e0:	887b      	ldrh	r3, [r7, #2]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f865 	bl	80071b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 80070ea:	4603      	mov	r3, r0
  }
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007100:	887b      	ldrh	r3, [r7, #2]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f875 	bl	80071f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800710a:	4603      	mov	r3, r0
  }
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f7fa fc5a 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007126:	4603      	mov	r3, r0
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f7fa fc4c 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007142:	4603      	mov	r3, r0
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff ffea 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800715c:	4602      	mov	r2, r0
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	4293      	cmp	r3, r2
 8007162:	d306      	bcc.n	8007172 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8007166:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8007168:	f44f 7183 	mov.w	r1, #262	; 0x106
 800716c:	4809      	ldr	r0, [pc, #36]	; (8007194 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 800716e:	f008 fb6f 	bl	800f850 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f872 	bl	800725c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8007178:	4603      	mov	r3, r0
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f859 	bl	8007234 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8007182:	4603      	mov	r3, r0
  }
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	08013c14 	.word	0x08013c14
 8007190:	08013c20 	.word	0x08013c20
 8007194:	08013d1c 	.word	0x08013d1c

08007198 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 80071a2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80071a6:	4610      	mov	r0, r2
 80071a8:	4619      	mov	r1, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80071c0:	887b      	ldrh	r3, [r7, #2]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7f9 ff85 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80071ca:	4603      	mov	r3, r0
 80071cc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	89fb      	ldrh	r3, [r7, #14]
 80071d2:	4413      	add	r3, r2
 80071d4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80071d6:	89fb      	ldrh	r3, [r7, #14]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d006      	beq.n	80071ea <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 80071dc:	68b8      	ldr	r0, [r7, #8]
 80071de:	f7fa fc15 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80071e2:	4602      	mov	r2, r0
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4413      	add	r3, r2
                        : nullptr;
 80071e8:	e000      	b.n	80071ec <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80071ea:	2300      	movs	r3, #0
  }
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007200:	887b      	ldrh	r3, [r7, #2]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7f9 ff65 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800720a:	4603      	mov	r3, r0
 800720c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	89fb      	ldrh	r3, [r7, #14]
 8007212:	4413      	add	r3, r2
 8007214:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8007216:	89fb      	ldrh	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 800721c:	68b8      	ldr	r0, [r7, #8]
 800721e:	f7fa fbf5 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007222:	4602      	mov	r2, r0
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4413      	add	r3, r2
                        : nullptr;
 8007228:	e000      	b.n	800722c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800722a:	2300      	movs	r3, #0
  }
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4413      	add	r3, r2
 8007246:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7fa fbdf 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800724e:	4602      	mov	r2, r0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4413      	add	r3, r2
  }
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3304      	adds	r3, #4
  }
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2104      	movs	r1, #4
 8007280:	4618      	mov	r0, r3
 8007282:	f7fd fefc 	bl	800507e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007286:	4603      	mov	r3, r0
  }
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	2106      	movs	r1, #6
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fd fefd 	bl	800509e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80072a4:	4603      	mov	r3, r0
 80072a6:	b2db      	uxtb	r3, r3
  }
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <_ZN6tflite12RuntimeShapeC1Ev>:

class RuntimeShape {
 public:
  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f828 	bl	8007338 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  int32_t DimensionsCount() const { return size_; }
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3304      	adds	r3, #4
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsData() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff ffe8 	bl	8007320 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8007350:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	461a      	mov	r2, r3
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	6978      	ldr	r0, [r7, #20]
 800735c:	f008 fae8 	bl	800f930 <memcpy>
  }
 8007360:	bf00      	nop
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	1e5a      	subs	r2, r3, #1
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	fbb2 f3f3 	udiv	r3, r2, r3
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800738a:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800738c:	68bb      	ldr	r3, [r7, #8]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 800739a:	b480      	push	{r7}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 80073b6:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80073b8:	68bb      	ldr	r3, [r7, #8]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4413      	add	r3, r2
 80073d6:	1e5a      	subs	r2, r3, #1
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	fbb2 f2f3 	udiv	r2, r2, r3
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	fb02 f303 	mul.w	r3, r2, r3
 80073e4:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 80073e6:	68fb      	ldr	r3, [r7, #12]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	3b01      	subs	r3, #1
 8007404:	2b0f      	cmp	r3, #15
 8007406:	d857      	bhi.n	80074b8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 8007408:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007459 	.word	0x08007459
 8007414:	08007471 	.word	0x08007471
 8007418:	08007481 	.word	0x08007481
 800741c:	08007491 	.word	0x08007491
 8007420:	080074b9 	.word	0x080074b9
 8007424:	080074a1 	.word	0x080074a1
 8007428:	08007469 	.word	0x08007469
 800742c:	080074a9 	.word	0x080074a9
 8007430:	08007489 	.word	0x08007489
 8007434:	08007451 	.word	0x08007451
 8007438:	08007461 	.word	0x08007461
 800743c:	080074b1 	.word	0x080074b1
 8007440:	08007499 	.word	0x08007499
 8007444:	080074b9 	.word	0x080074b9
 8007448:	080074b9 	.word	0x080074b9
 800744c:	08007479 	.word	0x08007479
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2202      	movs	r2, #2
 8007454:	601a      	str	r2, [r3, #0]
      break;
 8007456:	e031      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2204      	movs	r2, #4
 800745c:	601a      	str	r2, [r3, #0]
      break;
 800745e:	e02d      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2208      	movs	r2, #8
 8007464:	601a      	str	r2, [r3, #0]
      break;
 8007466:	e029      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2202      	movs	r2, #2
 800746c:	601a      	str	r2, [r3, #0]
      break;
 800746e:	e025      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2204      	movs	r2, #4
 8007474:	601a      	str	r2, [r3, #0]
      break;
 8007476:	e021      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2204      	movs	r2, #4
 800747c:	601a      	str	r2, [r3, #0]
      break;
 800747e:	e01d      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]
      break;
 8007486:	e019      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2201      	movs	r2, #1
 800748c:	601a      	str	r2, [r3, #0]
      break;
 800748e:	e015      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2208      	movs	r2, #8
 8007494:	601a      	str	r2, [r3, #0]
      break;
 8007496:	e011      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2208      	movs	r2, #8
 800749c:	601a      	str	r2, [r3, #0]
      break;
 800749e:	e00d      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
      break;
 80074a6:	e009      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2208      	movs	r2, #8
 80074ac:	601a      	str	r2, [r3, #0]
      break;
 80074ae:	e005      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2210      	movs	r2, #16
 80074b4:	601a      	str	r2, [r3, #0]
      break;
 80074b6:	e001      	b.n	80074bc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop

080074cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 80074da:	2301      	movs	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff fec8 	bl	8007274 <_ZNK6tflite6Tensor5shapeEv>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bf14      	ite	ne
 80074ea:	2301      	movne	r3, #1
 80074ec:	2300      	moveq	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d022      	beq.n	800753a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 80074f4:	2300      	movs	r3, #0
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff febb 	bl	8007274 <_ZNK6tflite6Tensor5shapeEv>
 80074fe:	4603      	mov	r3, r0
 8007500:	4618      	mov	r0, r3
 8007502:	f000 f884 	bl	800760e <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8007506:	4602      	mov	r2, r0
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	4293      	cmp	r3, r2
 800750c:	bf34      	ite	cc
 800750e:	2301      	movcc	r3, #1
 8007510:	2300      	movcs	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d010      	beq.n	800753a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f7ff feab 	bl	8007274 <_ZNK6tflite6Tensor5shapeEv>
 800751e:	4603      	mov	r3, r0
 8007520:	69b9      	ldr	r1, [r7, #24]
 8007522:	4618      	mov	r0, r3
 8007524:	f7fd fe1c 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007528:	4602      	mov	r2, r0
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	fb02 f303 	mul.w	r3, r2, r3
 8007530:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	3301      	adds	r3, #1
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	e7de      	b.n	80074f8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fea8 	bl	8007290 <_ZNK6tflite6Tensor4typeEv>
 8007540:	4603      	mov	r3, r0
 8007542:	4618      	mov	r0, r3
 8007544:	f107 0315 	add.w	r3, r7, #21
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	f7fd fb24 	bl	8004b98 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007550:	4603      	mov	r3, r0
 8007552:	75fb      	strb	r3, [r7, #23]
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	e013      	b.n	8007586 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 800755e:	7d7b      	ldrb	r3, [r7, #21]
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff ff46 	bl	80073f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8007568:	4603      	mov	r3, r0
 800756a:	75bb      	strb	r3, [r7, #22]
 800756c:	7dbb      	ldrb	r3, [r7, #22]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8007572:	7dbb      	ldrb	r3, [r7, #22]
 8007574:	e007      	b.n	8007586 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	fb02 f203 	mul.w	r2, r2, r3
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3720      	adds	r7, #32
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 800758e:	b580      	push	{r7, lr}
 8007590:	b086      	sub	sp, #24
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 800759e:	f008 f950 	bl	800f842 <abort>

  int element_count = 1;
 80075a2:	2301      	movs	r3, #1
 80075a4:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d015      	beq.n	80075da <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 80075ae:	2300      	movs	r3, #0
 80075b0:	613b      	str	r3, [r7, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	da0d      	bge.n	80075da <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	fb02 f303 	mul.w	r3, r2, r3
 80075d0:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	3301      	adds	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	e7eb      	b.n	80075b2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7a1b      	ldrb	r3, [r3, #8]
 80075de:	f107 0208 	add.w	r2, r7, #8
 80075e2:	4611      	mov	r1, r2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff ff05 	bl	80073f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	e006      	b.n	8007606 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	fb02 f203 	mul.w	r2, r2, r3
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fd fd93 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800761c:	4603      	mov	r3, r0
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2108      	movs	r1, #8
 8007632:	4618      	mov	r0, r3
 8007634:	f001 fc7f 	bl	8008f36 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8007638:	4603      	mov	r3, r0
  }
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	210a      	movs	r1, #10
 800764e:	4618      	mov	r0, r3
 8007650:	f001 fc81 	bl	8008f56 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8007654:	4603      	mov	r3, r0
  }
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	2110      	movs	r1, #16
 800766c:	4618      	mov	r0, r3
 800766e:	f7fd fce8 	bl	8005042 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8007672:	4603      	mov	r3, r0
  }
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	2108      	movs	r1, #8
 800768a:	4618      	mov	r0, r3
 800768c:	f7fa f9da 	bl	8001a44 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8007690:	4603      	mov	r3, r0
  }
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	210c      	movs	r1, #12
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 fc65 	bl	8008f76 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 80076ac:	4603      	mov	r3, r0
  }
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	210e      	movs	r1, #14
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fd fc8d 	bl	8004fe4 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bf14      	ite	ne
 80076d0:	2301      	movne	r3, #1
 80076d2:	2300      	moveq	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
  }
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2106      	movs	r1, #6
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fd fcc7 	bl	800507e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80076f0:	4603      	mov	r3, r0
  }
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2108      	movs	r1, #8
 8007706:	4618      	mov	r0, r3
 8007708:	f7fd fcb9 	bl	800507e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800770c:	4603      	mov	r3, r0
  }
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2104      	movs	r1, #4
 8007722:	4618      	mov	r0, r3
 8007724:	f001 fc37 	bl	8008f96 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8007728:	4603      	mov	r3, r0
  }
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2106      	movs	r1, #6
 800773e:	4618      	mov	r0, r3
 8007740:	f7fd fc9d 	bl	800507e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007744:	4603      	mov	r3, r0
  }
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2108      	movs	r1, #8
 800775a:	4618      	mov	r0, r3
 800775c:	f7fd fc8f 	bl	800507e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8007760:	4603      	mov	r3, r0
  }
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2104      	movs	r1, #4
 8007776:	4618      	mov	r0, r3
 8007778:	f001 fbcd 	bl	8008f16 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800777c:	4603      	mov	r3, r0
  }
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2104      	movs	r1, #4
 8007792:	4618      	mov	r0, r3
 8007794:	f7fd fca3 	bl	80050de <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8007798:	4603      	mov	r3, r0
  }
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	2106      	movs	r1, #6
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fa f947 	bl	8001a44 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80077b6:	4603      	mov	r3, r0
  }
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	210c      	movs	r1, #12
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 fbf2 	bl	8008fb6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80077d2:	4603      	mov	r3, r0
  }
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2110      	movs	r1, #16
 80077e8:	4618      	mov	r0, r3
 80077ea:	f001 fbf4 	bl	8008fd6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 80077ee:	4603      	mov	r3, r0
  }
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	4a04      	ldr	r2, [pc, #16]	; (8007814 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	08017214 	.word	0x08017214

08007818 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff ffe9 	bl	80077f8 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8007826:	2104      	movs	r1, #4
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f007 fdc6 	bl	800f3ba <_ZdlPvj>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	4a04      	ldr	r2, [pc, #16]	; (8007854 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	08017214 	.word	0x08017214

08007858 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff ffe7 	bl	8007838 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800786a:	4a05      	ldr	r2, [pc, #20]	; (8007880 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	605a      	str	r2, [r3, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	080171c0 	.word	0x080171c0

08007884 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6858      	ldr	r0, [r3, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	330c      	adds	r3, #12
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	4798      	blx	r3
 80078a4:	4603      	mov	r3, r0
  }
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	605a      	str	r2, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	609a      	str	r2, [r3, #8]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	60da      	str	r2, [r3, #12]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b096      	sub	sp, #88	; 0x58
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 800790c:	f007 ff99 	bl	800f842 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8007910:	2300      	movs	r3, #0
 8007912:	657b      	str	r3, [r7, #84]	; 0x54
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800791a:	429a      	cmp	r2, r3
 800791c:	d267      	bcs.n	80079ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6819      	ldr	r1, [r3, #0]
 8007922:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007924:	4613      	mov	r3, r2
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	4413      	add	r3, r2
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	440b      	add	r3, r1
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
    current->output_ptr = &(eval_tensors[i].data.data);
 8007930:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007932:	4613      	mov	r3, r2
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	461a      	mov	r2, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	4413      	add	r3, r2
 8007940:	461a      	mov	r2, r3
 8007942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007944:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 8007946:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007948:	4613      	mov	r3, r2
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	4413      	add	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	461a      	mov	r2, r3
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	4413      	add	r3, r2
 8007956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007958:	4611      	mov	r1, r2
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fe17 	bl	800758e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8007960:	4603      	mov	r3, r0
 8007962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007966:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 800796e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007972:	e117      	b.n	8007ba4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ac>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 8007974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007976:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800797a:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 800797c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007982:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8007984:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007986:	4613      	mov	r3, r2
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	461a      	mov	r2, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	4413      	add	r3, r2
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d113      	bne.n	80079c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 800799a:	68b8      	ldr	r0, [r7, #8]
 800799c:	f7ff febb 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 80079a0:	4603      	mov	r3, r0
 80079a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079a4:	4618      	mov	r0, r3
 80079a6:	f001 fbaf 	bl	8009108 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80079aa:	4603      	mov	r3, r0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff fe82 	bl	80076b6 <_ZNK6tflite6Tensor11is_variableEv>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f083 0301 	eor.w	r3, r3, #1
 80079b8:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 80079be:	2201      	movs	r2, #1
 80079c0:	e000      	b.n	80079c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 80079c2:	2200      	movs	r2, #0
 80079c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c6:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 80079ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	4413      	add	r3, r2
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079da:	611a      	str	r2, [r3, #16]
 80079dc:	e003      	b.n	80079e6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 80079de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079e4:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 80079e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e8:	3301      	adds	r3, #1
 80079ea:	657b      	str	r3, [r7, #84]	; 0x54
 80079ec:	e792      	b.n	8007914 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 80079ee:	68b8      	ldr	r0, [r7, #8]
 80079f0:	f7ff fb3c 	bl	800706c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 80079f4:	6378      	str	r0, [r7, #52]	; 0x34

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 80079f6:	2300      	movs	r3, #0
 80079f8:	653b      	str	r3, [r7, #80]	; 0x50
 80079fa:	68b8      	ldr	r0, [r7, #8]
 80079fc:	f7ff fe99 	bl	8007732 <_ZNK6tflite8SubGraph6inputsEv>
 8007a00:	4603      	mov	r3, r0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fd fb9d 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	bf34      	ite	cc
 8007a10:	2301      	movcc	r3, #1
 8007a12:	2300      	movcs	r3, #0
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d018      	beq.n	8007a4c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x154>
    const int tensor_index = subgraph->inputs()->Get(i);
 8007a1a:	68b8      	ldr	r0, [r7, #8]
 8007a1c:	f7ff fe89 	bl	8007732 <_ZNK6tflite8SubGraph6inputsEv>
 8007a20:	4603      	mov	r3, r0
 8007a22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fd fb9b 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007a2a:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6819      	ldr	r1, [r3, #0]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4613      	mov	r3, r2
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4413      	add	r3, r2
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	440b      	add	r3, r1
 8007a3c:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2200      	movs	r2, #0
 8007a42:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8007a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a46:	3301      	adds	r3, #1
 8007a48:	653b      	str	r3, [r7, #80]	; 0x50
 8007a4a:	e7d6      	b.n	80079fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x102>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a50:	68b8      	ldr	r0, [r7, #8]
 8007a52:	f7ff fe7c 	bl	800774e <_ZNK6tflite8SubGraph7outputsEv>
 8007a56:	4603      	mov	r3, r0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fd fb72 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a62:	4293      	cmp	r3, r2
 8007a64:	bf34      	ite	cc
 8007a66:	2301      	movcc	r3, #1
 8007a68:	2300      	movcs	r3, #0
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01a      	beq.n	8007aa6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1ae>
    const int tensor_index = subgraph->outputs()->Get(i);
 8007a70:	68b8      	ldr	r0, [r7, #8]
 8007a72:	f7ff fe6c 	bl	800774e <_ZNK6tflite8SubGraph7outputsEv>
 8007a76:	4603      	mov	r3, r0
 8007a78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd fb70 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007a80:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6819      	ldr	r1, [r3, #0]
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	4413      	add	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	440b      	add	r3, r1
 8007a92:	61bb      	str	r3, [r7, #24]
    current->last_used = operators_size - 1;
 8007a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a96:	3b01      	subs	r3, #1
 8007a98:	461a      	mov	r2, r3
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8007a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa4:	e7d4      	b.n	8007a50 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x158>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (operators_size - 1); i >= 0; --i) {
 8007aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	db77      	blt.n	8007ba2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2aa>
    const auto* op = subgraph->operators()->Get(i);
 8007ab2:	68b8      	ldr	r0, [r7, #8]
 8007ab4:	f7ff fabe 	bl	8007034 <_ZNK6tflite8SubGraph9operatorsEv>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007abc:	4619      	mov	r1, r3
 8007abe:	4610      	mov	r0, r2
 8007ac0:	f001 fb48 	bl	8009154 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8007ac4:	6338      	str	r0, [r7, #48]	; 0x30
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8007aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007acc:	f7ff fe07 	bl	80076de <_ZNK6tflite8Operator6inputsEv>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fd fb35 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007adc:	4293      	cmp	r3, r2
 8007ade:	bf34      	ite	cc
 8007ae0:	2301      	movcc	r3, #1
 8007ae2:	2300      	movcs	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d022      	beq.n	8007b30 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x238>
      const int tensor_index = op->inputs()->Get(n);
 8007aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aec:	f7ff fdf7 	bl	80076de <_ZNK6tflite8Operator6inputsEv>
 8007af0:	4603      	mov	r3, r0
 8007af2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fd fb33 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007afa:	6278      	str	r0, [r7, #36]	; 0x24
      AllocationInfo* current = &info_[tensor_index];
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6819      	ldr	r1, [r3, #0]
 8007b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b02:	4613      	mov	r3, r2
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	4413      	add	r3, r2
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	440b      	add	r3, r1
 8007b0c:	623b      	str	r3, [r7, #32]
      if (((current->last_used == -1) || (current->last_used < i))) {
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b16:	d004      	beq.n	8007b22 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x22a>
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	dd02      	ble.n	8007b28 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x230>
        current->last_used = i;
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b26:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8007b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b2e:	e7cc      	b.n	8007aca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1d2>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8007b30:	2300      	movs	r3, #0
 8007b32:	643b      	str	r3, [r7, #64]	; 0x40
 8007b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b36:	f7ff fde0 	bl	80076fa <_ZNK6tflite8Operator7outputsEv>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fd fb00 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007b42:	4602      	mov	r2, r0
 8007b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b46:	4293      	cmp	r3, r2
 8007b48:	bf34      	ite	cc
 8007b4a:	2301      	movcc	r3, #1
 8007b4c:	2300      	movcs	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d022      	beq.n	8007b9a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a2>
      const int tensor_index = op->outputs()->Get(n);
 8007b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b56:	f7ff fdd0 	bl	80076fa <_ZNK6tflite8Operator7outputsEv>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fd fafe 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007b64:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6819      	ldr	r1, [r3, #0]
 8007b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	4413      	add	r3, r2
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	440b      	add	r3, r1
 8007b76:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((current->first_created == -1) || (current->first_created > i)) {
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b80:	d004      	beq.n	8007b8c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x294>
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	da02      	bge.n	8007b92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x29a>
        current->first_created = i;
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b90:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8007b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b94:	3301      	adds	r3, #1
 8007b96:	643b      	str	r3, [r7, #64]	; 0x40
 8007b98:	e7cc      	b.n	8007b34 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23c>
  for (int i = (operators_size - 1); i >= 0; --i) {
 8007b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ba0:	e784      	b.n	8007aac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
      }
    }
  }
  return kTfLiteOk;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3758      	adds	r7, #88	; 0x58
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08c      	sub	sp, #48	; 0x30
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 8007bb8:	68b8      	ldr	r0, [r7, #8]
 8007bba:	f7ff fe0f 	bl	80077dc <_ZNK6tflite5Model8metadataEv>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d060      	beq.n	8007c90 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8007bce:	2300      	movs	r3, #0
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd2:	68b8      	ldr	r0, [r7, #8]
 8007bd4:	f7ff fe02 	bl	80077dc <_ZNK6tflite5Model8metadataEv>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 fb14 	bl	8009208 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8007be0:	4602      	mov	r2, r0
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	4293      	cmp	r3, r2
 8007be6:	bf34      	ite	cc
 8007be8:	2301      	movcc	r3, #1
 8007bea:	2300      	movcs	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04e      	beq.n	8007c90 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 8007bf2:	68b8      	ldr	r0, [r7, #8]
 8007bf4:	f7ff fdf2 	bl	80077dc <_ZNK6tflite5Model8metadataEv>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 fb11 	bl	8009224 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8007c02:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8007c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c06:	f7ff fdbe 	bl	8007786 <_ZNK6tflite8Metadata4nameEv>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fc fe38 	bl	8004882 <_ZNK11flatbuffers6String5c_strEv>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2217      	movs	r2, #23
 8007c16:	4921      	ldr	r1, [pc, #132]	; (8007c9c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f008 fd9b 	bl	8010754 <strncmp>
 8007c1e:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bf0c      	ite	eq
 8007c24:	2301      	moveq	r3, #1
 8007c26:	2300      	movne	r3, #0
 8007c28:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d02c      	beq.n	8007c88 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 8007c2e:	68b8      	ldr	r0, [r7, #8]
 8007c30:	f7ff fdc6 	bl	80077c0 <_ZNK6tflite5Model7buffersEv>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8007c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c38:	f7ff fdb3 	bl	80077a2 <_ZNK6tflite8Metadata6bufferEv>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c42:	f001 fb23 	bl	800928c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8007c46:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8007c48:	6a38      	ldr	r0, [r7, #32]
 8007c4a:	f7ff fd8e 	bl	800776a <_ZNK6tflite6Buffer4dataEv>
 8007c4e:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8007c50:	69f8      	ldr	r0, [r7, #28]
 8007c52:	f001 fb29 	bl	80092a8 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8007c56:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d009      	beq.n	8007c88 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	68d8      	ldr	r0, [r3, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4908      	ldr	r1, [pc, #32]	; (8007ca0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8007c80:	f7fc fdc0 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e004      	b.n	8007c92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c8e:	e7a0      	b.n	8007bd2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3730      	adds	r7, #48	; 0x30
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	0801719c 	.word	0x0801719c
 8007ca0:	08013e94 	.word	0x08013e94

08007ca4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 8007ca4:	b480      	push	{r7}
 8007ca6:	b089      	sub	sp, #36	; 0x24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	61fb      	str	r3, [r7, #28]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d232      	bcs.n	8007d2c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6819      	ldr	r1, [r3, #0]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	4613      	mov	r3, r2
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	4413      	add	r3, r2
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	440b      	add	r3, r1
 8007cf6:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d1c:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2201      	movs	r2, #1
 8007d22:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	3301      	adds	r3, #1
 8007d28:	61fb      	str	r3, [r7, #28]
 8007d2a:	e7c4      	b.n	8007cb6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3724      	adds	r7, #36	; 0x24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8007d3a:	b590      	push	{r4, r7, lr}
 8007d3c:	b08b      	sub	sp, #44	; 0x2c
 8007d3e:	af02      	add	r7, sp, #8
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	607a      	str	r2, [r7, #4]
 8007d46:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61fb      	str	r3, [r7, #28]
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d247      	bcs.n	8007de4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 8007d54:	69fa      	ldr	r2, [r7, #28]
 8007d56:	4613      	mov	r3, r2
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	4413      	add	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4413      	add	r3, r2
 8007d64:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	7d1b      	ldrb	r3, [r3, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d036      	beq.n	8007ddc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2110      	movs	r1, #16
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fb26 	bl	80073c6 <_ZN6tflite11AlignSizeUpEjj>
 8007d7a:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d84:	d114      	bne.n	8007db0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	681c      	ldr	r4, [r3, #0]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	6899      	ldr	r1, [r3, #8]
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	68f9      	ldr	r1, [r7, #12]
 8007d9e:	68b8      	ldr	r0, [r7, #8]
 8007da0:	47a0      	blx	r4
 8007da2:	4603      	mov	r3, r0
 8007da4:	74bb      	strb	r3, [r7, #18]
 8007da6:	7cbb      	ldrb	r3, [r7, #18]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d017      	beq.n	8007ddc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8007dac:	7cbb      	ldrb	r3, [r7, #18]
 8007dae:	e01a      	b.n	8007de6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 8007db0:	6979      	ldr	r1, [r7, #20]
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	6898      	ldr	r0, [r3, #8]
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	6912      	ldr	r2, [r2, #16]
 8007dbe:	9201      	str	r2, [sp, #4]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	68b8      	ldr	r0, [r7, #8]
 8007dca:	f007 f817 	bl	800edfc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	74fb      	strb	r3, [r7, #19]
 8007dd2:	7cfb      	ldrb	r3, [r7, #19]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8007dd8:	7cfb      	ldrb	r3, [r7, #19]
 8007dda:	e004      	b.n	8007de6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	3301      	adds	r3, #1
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	e7b3      	b.n	8007d4c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3724      	adds	r7, #36	; 0x24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd90      	pop	{r4, r7, pc}

08007dee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8007dee:	b590      	push	{r4, r7, lr}
 8007df0:	b08b      	sub	sp, #44	; 0x2c
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	607a      	str	r2, [r7, #4]
 8007dfa:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007e00:	2300      	movs	r3, #0
 8007e02:	623b      	str	r3, [r7, #32]
 8007e04:	6a3a      	ldr	r2, [r7, #32]
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d22e      	bcs.n	8007e6a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 8007e0c:	6a3a      	ldr	r2, [r7, #32]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	4413      	add	r3, r2
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	461a      	mov	r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	7d1b      	ldrb	r3, [r3, #20]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01d      	beq.n	8007e62 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e2a:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3314      	adds	r3, #20
 8007e32:	681c      	ldr	r4, [r3, #0]
 8007e34:	f107 0314 	add.w	r3, r7, #20
 8007e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e3a:	68f9      	ldr	r1, [r7, #12]
 8007e3c:	68b8      	ldr	r0, [r7, #8]
 8007e3e:	47a0      	blx	r4
 8007e40:	4603      	mov	r3, r0
 8007e42:	76fb      	strb	r3, [r7, #27]
 8007e44:	7efb      	ldrb	r3, [r7, #27]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 8007e4a:	7efb      	ldrb	r3, [r7, #27]
 8007e4c:	e00e      	b.n	8007e6c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	4619      	mov	r1, r3
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	440a      	add	r2, r1
 8007e5a:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	3301      	adds	r3, #1
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	3301      	adds	r3, #1
 8007e66:	623b      	str	r3, [r7, #32]
 8007e68:	e7cc      	b.n	8007e04 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	372c      	adds	r7, #44	; 0x2c
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd90      	pop	{r4, r7, pc}

08007e74 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fbfa 	bl	800767c <_ZNK6tflite6Tensor6bufferEv>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6838      	ldr	r0, [r7, #0]
 8007e8e:	f001 f9fd 	bl	800928c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8007e92:	6138      	str	r0, [r7, #16]
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d015      	beq.n	8007ec6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8007e9a:	6938      	ldr	r0, [r7, #16]
 8007e9c:	f7ff fc65 	bl	800776a <_ZNK6tflite6Buffer4dataEv>
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00e      	beq.n	8007ec6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f001 f8a4 	bl	8008ff6 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	bf14      	ite	ne
 8007eb4:	2301      	movne	r3, #1
 8007eb6:	2300      	moveq	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f001 f9f2 	bl	80092a8 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8007ec4:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 8007ec6:	697b      	ldr	r3, [r7, #20]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8007ed0:	b590      	push	{r4, r7, lr}
 8007ed2:	b08d      	sub	sp, #52	; 0x34
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	460b      	mov	r3, r1
 8007ede:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 8007ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 8007ee6:	f007 fcac 	bl	800f842 <abort>

  *result = {};
 8007eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eec:	4618      	mov	r0, r3
 8007eee:	2340      	movs	r3, #64	; 0x40
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	f007 fd44 	bl	800f980 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff f9c9 	bl	8007290 <_ZNK6tflite6Tensor4typeEv>
 8007efe:	4603      	mov	r3, r0
 8007f00:	4618      	mov	r0, r3
 8007f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f06:	4619      	mov	r1, r3
 8007f08:	f7fc fe46 	bl	8004b98 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 8007f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f1e:	e127      	b.n	8008170 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff fbc8 	bl	80076b6 <_ZNK6tflite6Tensor11is_variableEv>
 8007f26:	4603      	mov	r3, r0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff ff9e 	bl	8007e74 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f3c:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8007f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8007f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f48:	2202      	movs	r2, #2
 8007f4a:	751a      	strb	r2, [r3, #20]
 8007f4c:	e002      	b.n	8007f54 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 8007f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f50:	2201      	movs	r2, #1
 8007f52:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8007f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f56:	f103 0118 	add.w	r1, r3, #24
 8007f5a:	f107 0210 	add.w	r2, r7, #16
 8007f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fab3 	bl	80074cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 8007f74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007f78:	e0fa      	b.n	8008170 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff f97a 	bl	8007274 <_ZNK6tflite6Tensor5shapeEv>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	bf0c      	ite	eq
 8007f86:	2301      	moveq	r3, #1
 8007f88:	2300      	movne	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8007f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f92:	4a79      	ldr	r2, [pc, #484]	; (8008178 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 8007f94:	609a      	str	r2, [r3, #8]
 8007f96:	e013      	b.n	8007fc0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff f96b 	bl	8007274 <_ZNK6tflite6Tensor5shapeEv>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f001 f98a 	bl	80092c0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007fb2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 8007fba:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007fbe:	e0d7      	b.n	8008170 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff fb6a 	bl	800769a <_ZNK6tflite6Tensor12quantizationEv>
 8007fc6:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d021      	beq.n	8008012 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 8007fce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fd0:	f7ff fb29 	bl	8007626 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d01b      	beq.n	8008012 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 8007fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fdc:	f7ff fb23 	bl	8007626 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 f815 	bl	8009012 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8007fe8:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d011      	beq.n	8008012 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 8007fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ff0:	f7ff fb27 	bl	8007642 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007ff4:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00b      	beq.n	8008012 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 8007ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ffc:	f7ff fb21 	bl	8007642 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008000:	4603      	mov	r3, r0
 8008002:	4618      	mov	r0, r3
 8008004:	f001 f83c 	bl	8009080 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8008008:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 8008012:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 80aa 	beq.w	800816e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800801a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800801c:	f7ff fb03 	bl	8007626 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008020:	4603      	mov	r3, r0
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f001 f803 	bl	8009030 <_ZNK11flatbuffers6VectorIfE3GetEm>
 800802a:	eef0 7a40 	vmov.f32	s15, s0
 800802e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008030:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8008034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008036:	f7ff fb04 	bl	8007642 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800803a:	4603      	mov	r3, r0
 800803c:	2100      	movs	r1, #0
 800803e:	4618      	mov	r0, r3
 8008040:	f001 f82c 	bl	800909c <_ZNK11flatbuffers6VectorIxE3GetEm>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
    result->params.zero_point =
 8008048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800804a:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 800804c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800804e:	f7ff faea 	bl	8007626 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008052:	4603      	mov	r3, r0
 8008054:	4618      	mov	r0, r3
 8008056:	f000 ffdc 	bl	8009012 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800805a:	4603      	mov	r3, r0
 800805c:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 800805e:	7afb      	ldrb	r3, [r7, #11]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d009      	beq.n	8008078 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3310      	adds	r3, #16
 800806a:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 800806c:	2204      	movs	r2, #4
 800806e:	210c      	movs	r1, #12
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	4798      	blx	r3
 8008074:	4603      	mov	r3, r0
 8008076:	e008      	b.n	800808a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 8008080:	2204      	movs	r2, #4
 8008082:	210c      	movs	r1, #12
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	4798      	blx	r3
 8008088:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 800808a:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d105      	bne.n	800809e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 8008092:	493a      	ldr	r1, [pc, #232]	; (800817c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 8008094:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008096:	f7fc fbb5 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 800809a:	2301      	movs	r3, #1
 800809c:	e068      	b.n	8008170 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 800809e:	7afb      	ldrb	r3, [r7, #11]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00d      	beq.n	80080c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3310      	adds	r3, #16
 80080aa:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 80080ac:	6a38      	ldr	r0, [r7, #32]
 80080ae:	f7fc fb20 	bl	80046f2 <TfLiteIntArrayGetSizeInBytes>
 80080b2:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 80080b4:	2204      	movs	r2, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	47a0      	blx	r4
 80080bc:	4603      	mov	r3, r0
 80080be:	e00c      	b.n	80080da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	330c      	adds	r3, #12
 80080c6:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 80080c8:	6a38      	ldr	r0, [r7, #32]
 80080ca:	f7fc fb12 	bl	80046f2 <TfLiteIntArrayGetSizeInBytes>
 80080ce:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 80080d0:	2204      	movs	r2, #4
 80080d2:	4619      	mov	r1, r3
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	47a0      	blx	r4
 80080d8:	4603      	mov	r3, r0
    quantization->zero_point =
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d105      	bne.n	80080f2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 80080e6:	4926      	ldr	r1, [pc, #152]	; (8008180 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 80080e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80080ea:	f7fc fb8b 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e03e      	b.n	8008170 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 80080f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080f4:	f7ff fa97 	bl	8007626 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80080f8:	4602      	mov	r2, r0
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f001 f8f7 	bl	80092f2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8008104:	4603      	mov	r3, r0
 8008106:	76fb      	strb	r3, [r7, #27]
 8008108:	7efb      	ldrb	r3, [r7, #27]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 800810e:	7efb      	ldrb	r3, [r7, #27]
 8008110:	e02e      	b.n	8008170 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	6a3a      	ldr	r2, [r7, #32]
 8008118:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 8008122:	2300      	movs	r3, #0
 8008124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	429a      	cmp	r2, r3
 800812c:	da12      	bge.n	8008154 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 800812e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008130:	f7ff fa87 	bl	8007642 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008134:	4602      	mov	r2, r0
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	4619      	mov	r1, r3
 800813a:	4610      	mov	r0, r2
 800813c:	f000 ffae 	bl	800909c <_ZNK11flatbuffers6VectorIxE3GetEm>
 8008140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4413      	add	r3, r2
 8008148:	4602      	mov	r2, r0
 800814a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	3301      	adds	r3, #1
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008152:	e7e8      	b.n	8008126 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8008154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008156:	f7ff fa82 	bl	800765e <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 800815a:	4602      	mov	r2, r0
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8008160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8008168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3734      	adds	r7, #52	; 0x34
 8008174:	46bd      	mov	sp, r7
 8008176:	bd90      	pop	{r4, r7, pc}
 8008178:	080171b4 	.word	0x080171b4
 800817c:	08013ee0 	.word	0x08013ee0
 8008180:	08013f10 	.word	0x08013f10

08008184 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
  *result = {};
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	461a      	mov	r2, r3
 8008196:	2300      	movs	r3, #0
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	6053      	str	r3, [r2, #4]
 800819c:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800819e:	68b8      	ldr	r0, [r7, #8]
 80081a0:	f7ff f876 	bl	8007290 <_ZNK6tflite6Tensor4typeEv>
 80081a4:	4603      	mov	r3, r0
 80081a6:	4618      	mov	r0, r3
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	3308      	adds	r3, #8
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	4619      	mov	r1, r3
 80081b0:	f7fc fcf2 	bl	8004b98 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	e027      	b.n	8008212 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	68b8      	ldr	r0, [r7, #8]
 80081c6:	f7ff fe55 	bl	8007e74 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 80081ca:	4602      	mov	r2, r0
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 80081d0:	68b8      	ldr	r0, [r7, #8]
 80081d2:	f7ff f84f 	bl	8007274 <_ZNK6tflite6Tensor5shapeEv>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bf0c      	ite	eq
 80081dc:	2301      	moveq	r3, #1
 80081de:	2300      	movne	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	4a0c      	ldr	r2, [pc, #48]	; (800821c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 80081ea:	605a      	str	r2, [r3, #4]
 80081ec:	e010      	b.n	8008210 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 80081ee:	68b8      	ldr	r0, [r7, #8]
 80081f0:	f7ff f840 	bl	8007274 <_ZNK6tflite6Tensor5shapeEv>
 80081f4:	4602      	mov	r2, r0
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	3304      	adds	r3, #4
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f001 f85f 	bl	80092c0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8008202:	4603      	mov	r3, r0
 8008204:	75bb      	strb	r3, [r7, #22]
 8008206:	7dbb      	ldrb	r3, [r7, #22]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 800820c:	7dbb      	ldrb	r3, [r7, #22]
 800820e:	e000      	b.n	8008212 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	080171b4 	.word	0x080171b4

08008220 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 800822c:	4a0c      	ldr	r2, [pc, #48]	; (8008260 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	605a      	str	r2, [r3, #4]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	60da      	str	r2, [r3, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	741a      	strb	r2, [r3, #16]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	615a      	str	r2, [r3, #20]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	619a      	str	r2, [r3, #24]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	080171d8 	.word	0x080171d8

08008264 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	4a04      	ldr	r2, [pc, #16]	; (8008280 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	080171d8 	.word	0x080171d8

08008284 <_ZN6tflite14MicroAllocatorD0Ev>:
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff ffe9 	bl	8008264 <_ZN6tflite14MicroAllocatorD1Ev>
 8008292:	211c      	movs	r1, #28
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f007 f890 	bl	800f3ba <_ZdlPvj>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 80082b0:	2110      	movs	r1, #16
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f7ff f858 	bl	8007368 <_ZN6tflite14AlignPointerUpEPhj>
 80082b8:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	441a      	add	r2, r3
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	6979      	ldr	r1, [r7, #20]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f003 f848 	bl	800b360 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 80082d0:	4603      	mov	r3, r0
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 f805 	bl	80082e4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 80082da:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 80082e4:	b590      	push	{r4, r7, lr}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 80082f4:	f007 faa5 	bl	800f842 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 80082fe:	f007 faa0 	bl	800f842 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	330c      	adds	r3, #12
 8008308:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 800830a:	2204      	movs	r2, #4
 800830c:	211c      	movs	r1, #28
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
 8008312:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4619      	mov	r1, r3
 8008318:	201c      	movs	r0, #28
 800831a:	f7fc faa6 	bl	800486a <_ZnwjPv>
 800831e:	4604      	mov	r4, r0
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	4620      	mov	r0, r4
 8008326:	f7ff ff7b 	bl	8008220 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 800832a:	60bc      	str	r4, [r7, #8]
  return allocator;
 800832c:	68bb      	ldr	r3, [r7, #8]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	bd90      	pop	{r4, r7, pc}
	...

08008338 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 8008338:	b5b0      	push	{r4, r5, r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 8008348:	f007 fa7b 	bl	800f842 <abort>

  if (model_is_allocating_) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7c1b      	ldrb	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	4936      	ldr	r1, [pc, #216]	; (8008434 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 800835a:	4618      	mov	r0, r3
 800835c:	f7fc fa52 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return nullptr;
 8008360:	2300      	movs	r3, #0
 8008362:	e063      	b.n	800842c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  model_is_allocating_ = true;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	741a      	strb	r2, [r3, #16]

  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6858      	ldr	r0, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	330c      	adds	r3, #12
 8008376:	681b      	ldr	r3, [r3, #0]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
 8008378:	2204      	movs	r2, #4
 800837a:	2108      	movs	r1, #8
 800837c:	4798      	blx	r3
 800837e:	60f8      	str	r0, [r7, #12]
  builtin_data_allocator_ =
 8008380:	68fb      	ldr	r3, [r7, #12]
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
 8008382:	4619      	mov	r1, r3
 8008384:	2008      	movs	r0, #8
 8008386:	f7fc fa70 	bl	800486a <_ZnwjPv>
 800838a:	4604      	mov	r4, r0
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	4619      	mov	r1, r3
 8008392:	4620      	mov	r0, r4
 8008394:	f7ff fa60 	bl	8007858 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  builtin_data_allocator_ =
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	609c      	str	r4, [r3, #8]

  if (InitScratchBufferData() != kTfLiteOk) {
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fd6b 	bl	8008e78 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bf14      	ite	ne
 80083a8:	2301      	movne	r3, #1
 80083aa:	2300      	moveq	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x7e>
    return nullptr;
 80083b2:	2300      	movs	r3, #0
 80083b4:	e03a      	b.n	800842c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      memory_allocator_->AllocateFromTail(
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685d      	ldr	r5, [r3, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
          alignof(SubgraphAllocations)));
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	330c      	adds	r3, #12
 80083c2:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 80083c4:	6838      	ldr	r0, [r7, #0]
 80083c6:	f7fe fe43 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe feaf 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80083d2:	4603      	mov	r3, r0
 80083d4:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 80083d6:	2204      	movs	r2, #4
 80083d8:	4619      	mov	r1, r3
 80083da:	4628      	mov	r0, r5
 80083dc:	47a0      	blx	r4
 80083de:	60b8      	str	r0, [r7, #8]
  if (output == nullptr) {
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
    MicroPrintf("Failed to allocate memory for model metadata.");
 80083e6:	4814      	ldr	r0, [pc, #80]	; (8008438 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x100>)
 80083e8:	f001 f98e 	bl	8009708 <_Z11MicroPrintfPKcz>
    return nullptr;
 80083ec:	2300      	movs	r3, #0
 80083ee:	e01d      	b.n	800842c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	331c      	adds	r3, #28
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	4798      	blx	r3
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3318      	adds	r3, #24
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
 8008416:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe8>
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xea>
 8008420:	2300      	movs	r3, #0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf2>
    return nullptr;
 8008426:	2300      	movs	r3, #0
 8008428:	e000      	b.n	800842c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf4>
  }
  return output;
 800842a:	68bb      	ldr	r3, [r7, #8]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bdb0      	pop	{r4, r5, r7, pc}
 8008434:	08013f40 	.word	0x08013f40
 8008438:	08013f98 	.word	0x08013f98

0800843c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 800843c:	b590      	push	{r4, r7, lr}
 800843e:	b08b      	sub	sp, #44	; 0x2c
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	7c1b      	ldrb	r3, [r3, #16]
 800844e:	f083 0301 	eor.w	r3, r3, #1
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	4936      	ldr	r1, [pc, #216]	; (8008538 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xfc>)
 800845e:	4618      	mov	r0, r3
 8008460:	f7fc f9d0 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8008464:	2301      	movs	r3, #1
 8008466:	e062      	b.n	800852e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  }

  // TODO(b/187993197): Track scratch buffers for each subgraph.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008468:	2300      	movs	r3, #0
 800846a:	61fb      	str	r3, [r7, #28]
 800846c:	68b8      	ldr	r0, [r7, #8]
 800846e:	f7fe fdef 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8008472:	4603      	mov	r3, r0
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fe5b 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800847a:	4602      	mov	r2, r0
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	4293      	cmp	r3, r2
 8008480:	bf34      	ite	cc
 8008482:	2301      	movcc	r3, #1
 8008484:	2300      	movcs	r3, #0
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d04c      	beq.n	8008526 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xea>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800848c:	68b8      	ldr	r0, [r7, #8]
 800848e:	f7fe fddf 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8008492:	4603      	mov	r3, r0
 8008494:	69f9      	ldr	r1, [r7, #28]
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fe58 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800849c:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x6c>
 80084a4:	f007 f9cd 	bl	800f842 <abort>

    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3330      	adds	r3, #48	; 0x30
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	6952      	ldr	r2, [r2, #20]
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	4798      	blx	r3
 80084ba:	4603      	mov	r3, r0
 80084bc:	75fb      	strb	r3, [r7, #23]
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	e032      	b.n	800852e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        scratch_buffer_handles, scratch_buffer_request_count_));
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	332c      	adds	r3, #44	; 0x2c
 80084ce:	681c      	ldr	r4, [r3, #0]
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	4413      	add	r3, r2
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6819      	ldr	r1, [r3, #0]
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	460b      	mov	r3, r1
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	47a0      	blx	r4
 80084ea:	4603      	mov	r3, r0
 80084ec:	75bb      	strb	r3, [r7, #22]
 80084ee:	7dbb      	ldrb	r3, [r7, #22]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbc>
 80084f4:	7dbb      	ldrb	r3, [r7, #22]
 80084f6:	e01a      	b.n	800852e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
        model, subgraph_allocations[subgraph_idx].tensors,
        *scratch_buffer_handles, subgraph_idx));
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3320      	adds	r3, #32
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	69fa      	ldr	r2, [r7, #28]
 8008502:	00d2      	lsls	r2, r2, #3
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	440a      	add	r2, r1
 8008508:	6852      	ldr	r2, [r2, #4]
 800850a:	69b9      	ldr	r1, [r7, #24]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	4798      	blx	r3
 8008510:	4603      	mov	r3, r0
 8008512:	757b      	strb	r3, [r7, #21]
 8008514:	7d7b      	ldrb	r3, [r7, #21]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe2>
 800851a:	7d7b      	ldrb	r3, [r7, #21]
 800851c:	e007      	b.n	800852e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xf2>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	3301      	adds	r3, #1
 8008522:	61fb      	str	r3, [r7, #28]
 8008524:	e7a2      	b.n	800846c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
        subgraph, subgraph_allocations[subgraph_idx].tensors));
  }
  model_is_allocating_ = false;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	741a      	strb	r2, [r3, #16]
  return kTfLiteOk;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3724      	adds	r7, #36	; 0x24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd90      	pop	{r4, r7, pc}
 8008536:	bf00      	nop
 8008538:	08013fc8 	.word	0x08013fc8

0800853c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6858      	ldr	r0, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2210      	movs	r2, #16
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	4798      	blx	r3
 800855a:	4603      	mov	r3, r0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fc9d 	bl	8008eb2 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8008578:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800857e:	2300      	movs	r3, #0
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	429a      	cmp	r2, r3
 800858a:	d20e      	bcs.n	80085aa <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x46>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4413      	add	r3, r2
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800859a:	d102      	bne.n	80085a2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	3301      	adds	r3, #1
 80085a0:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	3301      	adds	r3, #1
 80085a6:	61bb      	str	r3, [r7, #24]
 80085a8:	e7eb      	b.n	8008582 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1e>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	2b0b      	cmp	r3, #11
 80085ae:	d908      	bls.n	80085c2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x5e>
    TF_LITE_REPORT_ERROR(
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	220c      	movs	r2, #12
 80085b6:	4913      	ldr	r1, [pc, #76]	; (8008604 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xa0>)
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fc f923 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 80085be:	2301      	movs	r3, #1
 80085c0:	e01c      	b.n	80085fc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x98>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	4413      	add	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
  *current_request = {};
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	461a      	mov	r2, r3
 80085d2:	2300      	movs	r3, #0
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085e4:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	461a      	mov	r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3720      	adds	r7, #32
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	08014014 	.word	0x08014014

08008608 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fc47 	bl	8008eb2 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8008624:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008626:	2300      	movs	r3, #0
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	429a      	cmp	r2, r3
 8008632:	d211      	bcs.n	8008658 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	4413      	add	r3, r2
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008642:	d105      	bne.n	8008650 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4413      	add	r3, r2
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3301      	adds	r3, #1
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	e7e8      	b.n	800862a <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6858      	ldr	r0, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6952      	ldr	r2, [r2, #20]
 800866a:	320c      	adds	r2, #12
 800866c:	00d1      	lsls	r1, r2, #3
 800866e:	2204      	movs	r2, #4
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	e000      	b.n	8008682 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 800869e:	f007 f8d0 	bl	800f842 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80086a2:	2300      	movs	r3, #0
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	68b8      	ldr	r0, [r7, #8]
 80086a8:	f7fe fcd2 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 80086ac:	4603      	mov	r3, r0
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe fd3e 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 80086b4:	4602      	mov	r2, r0
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	4293      	cmp	r3, r2
 80086ba:	bf34      	ite	cc
 80086bc:	2301      	movcc	r3, #1
 80086be:	2300      	movcs	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d034      	beq.n	8008730 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 80086c6:	68b8      	ldr	r0, [r7, #8]
 80086c8:	f7fe fcc2 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 80086cc:	4603      	mov	r3, r0
 80086ce:	69f9      	ldr	r1, [r7, #28]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fd3b 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80086d6:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 80086de:	f007 f8b0 	bl	800f842 <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 80086e2:	69b8      	ldr	r0, [r7, #24]
 80086e4:	f7fe fcc2 	bl	800706c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 80086e8:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6858      	ldr	r0, [r3, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	685b      	ldr	r3, [r3, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	330c      	adds	r3, #12
 80086f6:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	212c      	movs	r1, #44	; 0x2c
 80086fc:	fb01 f102 	mul.w	r1, r1, r2
        memory_allocator_->AllocateFromTail(
 8008700:	2204      	movs	r2, #4
 8008702:	4798      	blx	r3
 8008704:	6138      	str	r0, [r7, #16]
    if (output == nullptr) {
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d107      	bne.n	800871c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x90>
      TF_LITE_REPORT_ERROR(
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	490a      	ldr	r1, [pc, #40]	; (800873c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
 8008712:	4618      	mov	r0, r3
 8008714:	f7fc f876 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
 8008718:	2301      	movs	r3, #1
 800871a:	e00a      	b.n	8008732 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	4413      	add	r3, r2
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	3301      	adds	r3, #1
 800872c:	61fb      	str	r3, [r7, #28]
 800872e:	e7ba      	b.n	80086a6 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3720      	adds	r7, #32
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	0801404c 	.word	0x0801404c

08008740 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8008740:	b590      	push	{r4, r7, lr}
 8008742:	b089      	sub	sp, #36	; 0x24
 8008744:	af02      	add	r7, sp, #8
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800874e:	68b8      	ldr	r0, [r7, #8]
 8008750:	f7fe fc7e 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8008754:	4602      	mov	r2, r0
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	4619      	mov	r1, r3
 800875a:	4610      	mov	r0, r2
 800875c:	f7fe fcf6 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008760:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8008768:	f007 f86b 	bl	800f842 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3324      	adds	r3, #36	; 0x24
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	4798      	blx	r3
 8008778:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3328      	adds	r3, #40	; 0x28
 8008780:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 8008782:	2300      	movs	r3, #0
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	47a0      	blx	r4
 8008794:	4603      	mov	r3, r0
          /*allocate_temp=*/false) != kTfLiteOk) {
 8008796:	2b00      	cmp	r3, #0
 8008798:	bf14      	ite	ne
 800879a:	2301      	movne	r3, #1
 800879c:	2300      	moveq	r3, #0
 800879e:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x74>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	4914      	ldr	r1, [pc, #80]	; (80087fc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>)
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fc f82a 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 80087b0:	2300      	movs	r3, #0
 80087b2:	e01f      	b.n	80087f4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
  }

  if (subgraph_allocations != nullptr) {
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01b      	beq.n	80087f2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	4413      	add	r3, r2
 80087c2:	6859      	ldr	r1, [r3, #4]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	4613      	mov	r3, r2
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	6859      	ldr	r1, [r3, #4]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	4613      	mov	r3, r2
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	440b      	add	r3, r1
 80087ec:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 80087f2:	693b      	ldr	r3, [r7, #16]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	371c      	adds	r7, #28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd90      	pop	{r4, r7, pc}
 80087fc:	08014084 	.word	0x08014084

08008800 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8008800:	b590      	push	{r4, r7, lr}
 8008802:	b089      	sub	sp, #36	; 0x24
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800880e:	68b8      	ldr	r0, [r7, #8]
 8008810:	f7fe fc1e 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8008814:	4602      	mov	r2, r0
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	4619      	mov	r1, r3
 800881a:	4610      	mov	r0, r2
 800881c:	f7fe fc96 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008820:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8008828:	f007 f80b 	bl	800f842 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6858      	ldr	r0, [r3, #4]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3310      	adds	r3, #16
 8008838:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800883a:	2204      	movs	r2, #4
 800883c:	2140      	movs	r1, #64	; 0x40
 800883e:	4798      	blx	r3
 8008840:	6138      	str	r0, [r7, #16]
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3328      	adds	r3, #40	; 0x28
 8008848:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 800884a:	2301      	movs	r3, #1
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	47a0      	blx	r4
 800885c:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 800885e:	2b00      	cmp	r3, #0
 8008860:	bf14      	ite	ne
 8008862:	2301      	movne	r3, #1
 8008864:	2300      	moveq	r3, #0
 8008866:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7c>
    TF_LITE_REPORT_ERROR(
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	4914      	ldr	r1, [pc, #80]	; (80088c4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc4>)
 8008872:	4618      	mov	r0, r3
 8008874:	f7fb ffc6 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 8008878:	2300      	movs	r3, #0
 800887a:	e01f      	b.n	80088bc <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
  }

  if (subgraph_allocations != nullptr) {
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d01b      	beq.n	80088ba <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xba>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	6859      	ldr	r1, [r3, #4]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	4613      	mov	r3, r2
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	4413      	add	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	440b      	add	r3, r1
 8008898:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	605a      	str	r2, [r3, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	6859      	ldr	r1, [r3, #4]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	4613      	mov	r3, r2
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	609a      	str	r2, [r3, #8]
  }
  return tensor;
 80088ba:	693b      	ldr	r3, [r7, #16]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	371c      	adds	r7, #28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd90      	pop	{r4, r7, pc}
 80088c4:	080140d0 	.word	0x080140d0

080088c8 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3314      	adds	r3, #20
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4610      	mov	r0, r2
 80088e0:	4798      	blx	r3
}
 80088e2:	bf00      	nop
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 80088ec:	b5b0      	push	{r4, r5, r7, lr}
 80088ee:	b08c      	sub	sp, #48	; 0x30
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 80088fe:	f006 ffa0 	bl	800f842 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008902:	2300      	movs	r3, #0
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
 8008906:	68b8      	ldr	r0, [r7, #8]
 8008908:	f7fe fba2 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 800890c:	4603      	mov	r3, r0
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fc0e 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8008914:	4602      	mov	r2, r0
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	4293      	cmp	r3, r2
 800891a:	bf34      	ite	cc
 800891c:	2301      	movcc	r3, #1
 800891e:	2300      	movcs	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d076      	beq.n	8008a14 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x128>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8008926:	68b8      	ldr	r0, [r7, #8]
 8008928:	f7fe fb92 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 800892c:	4603      	mov	r3, r0
 800892e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fc0b 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008936:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x56>
 800893e:	f006 ff80 	bl	800f842 <abort>

    size_t alloc_count = subgraph->tensors()->size();
 8008942:	69f8      	ldr	r0, [r7, #28]
 8008944:	f7fe fee7 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 8008948:	4603      	mov	r3, r0
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fbce 	bl	80090ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008950:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors =
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6858      	ldr	r0, [r3, #4]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	330c      	adds	r3, #12
 800895e:	681c      	ldr	r4, [r3, #0]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	4613      	mov	r3, r2
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	2204      	movs	r2, #4
 800896c:	4619      	mov	r1, r3
 800896e:	47a0      	blx	r4
 8008970:	6178      	str	r0, [r7, #20]
    if (tensors == nullptr) {
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10c      	bne.n	8008992 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa6>
      TF_LITE_REPORT_ERROR(
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	68d8      	ldr	r0, [r3, #12]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	4613      	mov	r3, r2
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	461a      	mov	r2, r3
 8008988:	4925      	ldr	r1, [pc, #148]	; (8008a20 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x134>)
 800898a:	f7fb ff3b 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 800898e:	2301      	movs	r3, #1
 8008990:	e041      	b.n	8008a16 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 8008992:	2300      	movs	r3, #0
 8008994:	623b      	str	r3, [r7, #32]
 8008996:	6a3a      	ldr	r2, [r7, #32]
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	429a      	cmp	r2, r3
 800899c:	d230      	bcs.n	8008a00 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685c      	ldr	r4, [r3, #4]
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 80089a2:	69f8      	ldr	r0, [r7, #28]
 80089a4:	f7fe feb7 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 80089a8:	4603      	mov	r3, r0
 80089aa:	6a39      	ldr	r1, [r7, #32]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 fbab 	bl	8009108 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80089b2:	4605      	mov	r5, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80089b4:	68b8      	ldr	r0, [r7, #8]
 80089b6:	f7fe ff03 	bl	80077c0 <_ZNK6tflite5Model7buffersEv>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	68d9      	ldr	r1, [r3, #12]
          error_reporter_, &tensors[i]);
 80089be:	6a3a      	ldr	r2, [r7, #32]
 80089c0:	4613      	mov	r3, r2
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	4413      	add	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	4413      	add	r3, r2
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	460b      	mov	r3, r1
 80089d2:	4602      	mov	r2, r0
 80089d4:	4629      	mov	r1, r5
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7ff fbd4 	bl	8008184 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 80089dc:	4603      	mov	r3, r0
 80089de:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 80089e0:	7cfb      	ldrb	r3, [r7, #19]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d008      	beq.n	80089f8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10c>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	6a3a      	ldr	r2, [r7, #32]
 80089ec:	490d      	ldr	r1, [pc, #52]	; (8008a24 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x138>)
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fb ff08 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             i);
        return kTfLiteError;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e00e      	b.n	8008a16 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12a>
    for (size_t i = 0; i < alloc_count; ++i) {
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	3301      	adds	r3, #1
 80089fc:	623b      	str	r3, [r7, #32]
 80089fe:	e7ca      	b.n	8008996 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xaa>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4413      	add	r3, r2
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	3301      	adds	r3, #1
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
 8008a12:	e778      	b.n	8008906 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
  }
  return kTfLiteOk;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3728      	adds	r7, #40	; 0x28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	08014114 	.word	0x08014114
 8008a24:	0801415c 	.word	0x0801415c

08008a28 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 8008a28:	b5b0      	push	{r4, r5, r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8008a34:	2300      	movs	r3, #0
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	68b8      	ldr	r0, [r7, #8]
 8008a3a:	f7fe fe6c 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fb53 	bl	80090ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008a46:	4602      	mov	r2, r0
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	bf34      	ite	cc
 8008a4e:	2301      	movcc	r3, #1
 8008a50:	2300      	movcs	r3, #0
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d04f      	beq.n	8008af8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 8008a58:	68b8      	ldr	r0, [r7, #8]
 8008a5a:	f7fe fe5c 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	69f9      	ldr	r1, [r7, #28]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fb50 	bl	8009108 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8008a68:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 8008a6a:	69b8      	ldr	r0, [r7, #24]
 8008a6c:	f7fe fe23 	bl	80076b6 <_ZNK6tflite6Tensor11is_variableEv>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d03c      	beq.n	8008af0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	461a      	mov	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	f107 0210 	add.w	r2, r7, #16
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe fd7e 	bl	800758e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8008a92:	4603      	mov	r3, r0
 8008a94:	75fb      	strb	r3, [r7, #23]
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	e02c      	b.n	8008afa <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6858      	ldr	r0, [r3, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	330c      	adds	r3, #12
 8008aac:	681d      	ldr	r5, [r3, #0]
 8008aae:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	461a      	mov	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8008ac0:	2210      	movs	r2, #16
 8008ac2:	47a8      	blx	r5
 8008ac4:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 8008ac6:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 8008ac8:	69fa      	ldr	r2, [r7, #28]
 8008aca:	4613      	mov	r3, r2
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	4413      	add	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d108      	bne.n	8008af0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	4907      	ldr	r1, [pc, #28]	; (8008b04 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fb fe8c 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e004      	b.n	8008afa <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	3301      	adds	r3, #1
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	e79f      	b.n	8008a38 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3720      	adds	r7, #32
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bdb0      	pop	{r4, r5, r7, pc}
 8008b02:	bf00      	nop
 8008b04:	0801417c 	.word	0x0801417c

08008b08 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6858      	ldr	r0, [r3, #4]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8008b1e:	2204      	movs	r2, #4
 8008b20:	2140      	movs	r1, #64	; 0x40
 8008b22:	4798      	blx	r3
 8008b24:	4603      	mov	r3, r0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 8008b2e:	b5b0      	push	{r4, r5, r7, lr}
 8008b30:	b086      	sub	sp, #24
 8008b32:	af02      	add	r7, sp, #8
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	607a      	str	r2, [r7, #4]
 8008b3a:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 8008b40:	68b8      	ldr	r0, [r7, #8]
 8008b42:	f7fe fa85 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8008b46:	4602      	mov	r2, r0
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	f7fe fafd 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008b52:	4603      	mov	r3, r0
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe fdde 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4610      	mov	r0, r2
 8008b62:	f000 fad1 	bl	8009108 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8008b66:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8008b68:	68b8      	ldr	r0, [r7, #8]
 8008b6a:	f7fe fe29 	bl	80077c0 <_ZNK6tflite5Model7buffersEv>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	9201      	str	r2, [sp, #4]
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	462a      	mov	r2, r5
 8008b80:	4620      	mov	r0, r4
 8008b82:	f7ff f9a5 	bl	8007ed0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 8008b86:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bdb0      	pop	{r4, r5, r7, pc}

08008b90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
 8008b90:	b590      	push	{r4, r7, lr}
 8008b92:	b0a5      	sub	sp, #148	; 0x94
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8008ba4:	68b8      	ldr	r0, [r7, #8]
 8008ba6:	f7fe fa53 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8008baa:	4602      	mov	r2, r0
 8008bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f7fe faca 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8008bb8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 8008bbc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008bc0:	f7fe fda9 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 fa90 	bl	80090ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 8008bd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008bd8:	4613      	mov	r3, r2
 8008bda:	005b      	lsls	r3, r3, #1
 8008bdc:	4413      	add	r3, r2
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	67bb      	str	r3, [r7, #120]	; 0x78

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6858      	ldr	r0, [r3, #4]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3310      	adds	r3, #16
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008bf4:	4798      	blx	r3
 8008bf6:	6778      	str	r0, [r7, #116]	; 0x74
  if (allocation_info == nullptr) {
 8008bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d108      	bne.n	8008c10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x80>
    TF_LITE_REPORT_ERROR(
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c04:	4985      	ldr	r1, [pc, #532]	; (8008e1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x28c>)
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fb fdfc 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 8008c0c:	2401      	movs	r4, #1
 8008c0e:	e0ff      	b.n	8008e10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 8008c10:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8008c14:	f7fe fd7f 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fa66 	bl	80090ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008c20:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	695a      	ldr	r2, [r3, #20]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	4613      	mov	r3, r2
 8008c32:	460a      	mov	r2, r1
 8008c34:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008c36:	f7fe fe45 	bl	80078c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	643b      	str	r3, [r7, #64]	; 0x40
  TF_LITE_ENSURE_STATUS(
 8008c3e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008c42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe ffaf 	bl	8007bac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8008c54:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd2>
 8008c5c:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 8008c60:	e0d6      	b.n	8008e10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 8008c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c64:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008c6e:	f7fe fe43 	bl	80078f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 8008c72:	4603      	mov	r3, r0
 8008c74:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8008c78:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf6>
 8008c80:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 8008c84:	e0c4      	b.n	8008e10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 f913 	bl	8008eb2 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8008c8c:	66f8      	str	r0, [r7, #108]	; 0x6c

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 8008c8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff f804 	bl	8007ca4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8008ca2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x120>
 8008caa:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
 8008cae:	e0af      	b.n	8008e10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2110      	movs	r1, #16
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f002 fc68 	bl	800b58c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8008cbc:	6678      	str	r0, [r7, #100]	; 0x64
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6858      	ldr	r0, [r3, #4]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3310      	adds	r3, #16
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2210      	movs	r2, #16
 8008cce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008cd0:	4798      	blx	r3
 8008cd2:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8008cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10e      	bne.n	8008cf8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	68d8      	ldr	r0, [r3, #12]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	68d9      	ldr	r1, [r3, #12]
 8008ce2:	4b4f      	ldr	r3, [pc, #316]	; (8008e20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x290>)
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	f240 33d2 	movw	r3, #978	; 0x3d2
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	4b4d      	ldr	r3, [pc, #308]	; (8008e24 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x294>)
 8008cee:	4a4e      	ldr	r2, [pc, #312]	; (8008e28 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x298>)
 8008cf0:	f7fb fda1 	bl	8004836 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008cf4:	2401      	movs	r4, #1
 8008cf6:	e08b      	b.n	8008e10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x280>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8008cf8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cfa:	f107 0314 	add.w	r3, r7, #20
 8008cfe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008d00:	4618      	mov	r0, r3
 8008d02:	f005 ffcd 	bl	800eca0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	68d8      	ldr	r0, [r3, #12]
 8008d0a:	f107 0114 	add.w	r1, r7, #20
 8008d0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008d12:	f7ff f812 	bl	8007d3a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 8008d16:	4603      	mov	r3, r0
 8008d18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x19a>
 8008d24:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 8008d28:	e06d      	b.n	8008e06 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3314      	adds	r3, #20
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2110      	movs	r1, #16
 8008d42:	4618      	mov	r0, r3
 8008d44:	f002 fc22 	bl	800b58c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8008d48:	65b8      	str	r0, [r7, #88]	; 0x58

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8008d4a:	f107 0314 	add.w	r3, r7, #20
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f006 fa5f 	bl	800f212 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	bf34      	ite	cc
 8008d5c:	2301      	movcc	r3, #1
 8008d5e:	2300      	movcs	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00e      	beq.n	8008d84 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
    TF_LITE_REPORT_ERROR(
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	68dc      	ldr	r4, [r3, #12]
 8008d6a:	f107 0314 	add.w	r3, r7, #20
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f006 fa4f 	bl	800f212 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8008d74:	4602      	mov	r2, r0
 8008d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d78:	492c      	ldr	r1, [pc, #176]	; (8008e2c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x29c>)
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7fb fd42 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 8008d80:	2401      	movs	r4, #1
 8008d82:	e040      	b.n	8008e06 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68dc      	ldr	r4, [r3, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f002 fbf1 	bl	800b574 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8008d92:	4602      	mov	r2, r0
 8008d94:	f107 0114 	add.w	r1, r7, #20
 8008d98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f7ff f825 	bl	8007dee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8008da4:	4603      	mov	r3, r0
 8008da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008daa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>
 8008db2:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8008db6:	e026      	b.n	8008e06 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
#ifdef TF_LITE_SHOW_MEMORY_USE
  planner.PrintMemoryPlan();
#endif
  head_usage = planner.GetMaximumMemorySize();
 8008db8:	f107 0314 	add.w	r3, r7, #20
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f006 fa28 	bl	800f212 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8008dc2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d903      	bls.n	8008dda <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x24a>
    max_head_buffer_usage_ = head_usage;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008dd8:	619a      	str	r2, [r3, #24]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6858      	ldr	r0, [r3, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3308      	adds	r3, #8
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	6991      	ldr	r1, [r2, #24]
 8008dec:	2210      	movs	r2, #16
 8008dee:	4798      	blx	r3
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8008df6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x274>
 8008dfe:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 8008e02:	e000      	b.n	8008e06 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x276>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 8008e04:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8008e06:	f107 0314 	add.w	r3, r7, #20
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f005 ff9a 	bl	800ed44 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8008e10:	4623      	mov	r3, r4
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	378c      	adds	r7, #140	; 0x8c
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd90      	pop	{r4, r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	080141ac 	.word	0x080141ac
 8008e20:	08014244 	.word	0x08014244
 8008e24:	080141f0 	.word	0x080141f0
 8008e28:	0801422c 	.word	0x0801422c
 8008e2c:	08014260 	.word	0x08014260

08008e30 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 8008e42:	f006 fcfe 	bl	800f842 <abort>

  if (scratch_buffer_request_count_ == 0) {
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	e00e      	b.n	8008e70 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6858      	ldr	r0, [r3, #4]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	0091      	lsls	r1, r2, #2
 8008e64:	2204      	movs	r2, #4
 8008e66:	4798      	blx	r3
 8008e68:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	615a      	str	r2, [r3, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6858      	ldr	r0, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3308      	adds	r3, #8
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2204      	movs	r2, #4
 8008e96:	2160      	movs	r1, #96	; 0x60
 8008e98:	4798      	blx	r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	73fb      	strb	r3, [r7, #15]
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	e000      	b.n	8008eaa <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f002 fb58 	bl	800b574 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2104      	movs	r1, #4
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe fa4d 	bl	8007368 <_ZN6tflite14AlignPointerUpEPhj>
 8008ece:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>:

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  return internal::FlatBufferVectorToTfLiteTypeArray(
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6858      	ldr	r0, [r3, #4]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68d9      	ldr	r1, [r3, #12]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	f000 f9e6 	bl	80092c0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8008ef4:	4603      	mov	r3, r0
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b082      	sub	sp, #8
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008f22:	887b      	ldrh	r3, [r7, #2]
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f9fc 	bl	8009324 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8008f2c:	4603      	mov	r3, r0
  }
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008f42:	887b      	ldrh	r3, [r7, #2]
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa0c 	bl	8009364 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8008f4c:	4603      	mov	r3, r0
  }
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008f62:	887b      	ldrh	r3, [r7, #2]
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa1c 	bl	80093a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8008f6c:	4603      	mov	r3, r0
  }
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008f82:	887b      	ldrh	r3, [r7, #2]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fa2c 	bl	80093e4 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8008f8c:	4603      	mov	r3, r0
  }
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008fa2:	887b      	ldrh	r3, [r7, #2]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fa3c 	bl	8009424 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8008fac:	4603      	mov	r3, r0
  }
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008fc2:	887b      	ldrh	r3, [r7, #2]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa4c 	bl	8009464 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8008fcc:	4603      	mov	r3, r0
  }
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008fe2:	887b      	ldrh	r3, [r7, #2]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa5c 	bl	80094a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8008fec:	4603      	mov	r3, r0
  }
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4618      	mov	r0, r3
 8009004:	f7f8 fce9 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009008:	4603      	mov	r3, r0
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f7f8 fcdb 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009024:	4603      	mov	r3, r0
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff ffe9 	bl	8009012 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8009040:	4602      	mov	r2, r0
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	4293      	cmp	r3, r2
 8009046:	d306      	bcc.n	8009056 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800904a:	4a0b      	ldr	r2, [pc, #44]	; (8009078 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 800904c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009050:	480a      	ldr	r0, [pc, #40]	; (800907c <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8009052:	f006 fbfd 	bl	800f850 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa66 	bl	8009528 <_ZNK11flatbuffers6VectorIfE4DataEv>
 800905c:	4603      	mov	r3, r0
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fa4b 	bl	80094fc <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8009066:	eef0 7a40 	vmov.f32	s15, s0
  }
 800906a:	eeb0 0a67 	vmov.f32	s0, s15
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	080142b0 	.word	0x080142b0
 8009078:	080142bc 	.word	0x080142bc
 800907c:	08014384 	.word	0x08014384

08009080 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	f7f8 fca4 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009092:	4603      	mov	r3, r0
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff ffea 	bl	8009080 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80090ac:	4602      	mov	r2, r0
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d306      	bcc.n	80090c2 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 80090b4:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 80090b6:	4a0b      	ldr	r2, [pc, #44]	; (80090e4 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 80090b8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80090bc:	480a      	ldr	r0, [pc, #40]	; (80090e8 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 80090be:	f006 fbc7 	bl	800f850 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa52 	bl	800956c <_ZNK11flatbuffers6VectorIxE4DataEv>
 80090c8:	4603      	mov	r3, r0
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fa37 	bl	8009540 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
  }
 80090d6:	4610      	mov	r0, r2
 80090d8:	4619      	mov	r1, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	080142b0 	.word	0x080142b0
 80090e4:	080143f4 	.word	0x080143f4
 80090e8:	08014384 	.word	0x08014384

080090ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f8 fc6e 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80090fe:	4603      	mov	r3, r0
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7ff ffea 	bl	80090ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009118:	4602      	mov	r2, r0
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	4293      	cmp	r3, r2
 800911e:	d306      	bcc.n	800912e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8009122:	4a0a      	ldr	r2, [pc, #40]	; (800914c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8009124:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009128:	4809      	ldr	r0, [pc, #36]	; (8009150 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800912a:	f006 fb91 	bl	800f850 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa3c 	bl	80095ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8009134:	4603      	mov	r3, r0
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fa23 	bl	8009584 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 800913e:	4603      	mov	r3, r0
  }
 8009140:	4618      	mov	r0, r3
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	080142b0 	.word	0x080142b0
 800914c:	0801459c 	.word	0x0801459c
 8009150:	08014384 	.word	0x08014384

08009154 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7fd ffd8 	bl	8007114 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8009164:	4602      	mov	r2, r0
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	4293      	cmp	r3, r2
 800916a:	d306      	bcc.n	800917a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 800916c:	4b09      	ldr	r3, [pc, #36]	; (8009194 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 800916e:	4a0a      	ldr	r2, [pc, #40]	; (8009198 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8009170:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009174:	4809      	ldr	r0, [pc, #36]	; (800919c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8009176:	f006 fb6b 	bl	800f850 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa36 	bl	80095ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8009180:	4603      	mov	r3, r0
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fa1d 	bl	80095c4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 800918a:	4603      	mov	r3, r0
  }
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	080142b0 	.word	0x080142b0
 8009198:	08014694 	.word	0x08014694
 800919c:	08014384 	.word	0x08014384

080091a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7f8 fc14 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80091b2:	4603      	mov	r3, r0
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff ffea 	bl	80091a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 80091cc:	4602      	mov	r2, r0
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d306      	bcc.n	80091e2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 80091d4:	4b09      	ldr	r3, [pc, #36]	; (80091fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 80091d6:	4a0a      	ldr	r2, [pc, #40]	; (8009200 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 80091d8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80091dc:	4809      	ldr	r0, [pc, #36]	; (8009204 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 80091de:	f006 fb37 	bl	800f850 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa22 	bl	800962c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 80091e8:	4603      	mov	r3, r0
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fa09 	bl	8009604 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 80091f2:	4603      	mov	r3, r0
  }
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	080142b0 	.word	0x080142b0
 8009200:	0801488c 	.word	0x0801488c
 8009204:	08014384 	.word	0x08014384

08009208 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f7f8 fbe0 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800921a:	4603      	mov	r3, r0
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7ff ffea 	bl	8009208 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8009234:	4602      	mov	r2, r0
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	4293      	cmp	r3, r2
 800923a:	d306      	bcc.n	800924a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800923c:	4b09      	ldr	r3, [pc, #36]	; (8009264 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800923e:	4a0a      	ldr	r2, [pc, #40]	; (8009268 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8009240:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009244:	4809      	ldr	r0, [pc, #36]	; (800926c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8009246:	f006 fb03 	bl	800f850 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fa0e 	bl	800966c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8009250:	4603      	mov	r3, r0
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	4618      	mov	r0, r3
 8009256:	f000 f9f5 	bl	8009644 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800925a:	4603      	mov	r3, r0
  }
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	080142b0 	.word	0x080142b0
 8009268:	08014984 	.word	0x08014984
 800926c:	08014384 	.word	0x08014384

08009270 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7fd ff65 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009282:	4603      	mov	r3, r0
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff ff8f 	bl	80091bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 800929e:	4603      	mov	r3, r0
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f917 	bl	80094e4 <_ZNK11flatbuffers6VectorIhE4DataEv>
 80092b6:	4603      	mov	r3, r0
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 80092d4:	f006 fab5 	bl	800f842 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 80092de:	f006 fab0 	bl	800f842 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8009306:	f006 fa9c 	bl	800f842 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d101      	bne.n	8009314 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8009310:	f006 fa97 	bl	800f842 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009330:	887b      	ldrh	r3, [r7, #2]
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7f7 fecd 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800933a:	4603      	mov	r3, r0
 800933c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	89fb      	ldrh	r3, [r7, #14]
 8009342:	4413      	add	r3, r2
 8009344:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009346:	89fb      	ldrh	r3, [r7, #14]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d006      	beq.n	800935a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800934c:	68b8      	ldr	r0, [r7, #8]
 800934e:	f7f8 fb5d 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009352:	4602      	mov	r2, r0
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4413      	add	r3, r2
                        : nullptr;
 8009358:	e000      	b.n	800935c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800935a:	2300      	movs	r3, #0
  }
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7f7 fead 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800937a:	4603      	mov	r3, r0
 800937c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	89fb      	ldrh	r3, [r7, #14]
 8009382:	4413      	add	r3, r2
 8009384:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009386:	89fb      	ldrh	r3, [r7, #14]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d006      	beq.n	800939a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800938c:	68b8      	ldr	r0, [r7, #8]
 800938e:	f7f8 fb3d 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009392:	4602      	mov	r2, r0
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	4413      	add	r3, r2
                        : nullptr;
 8009398:	e000      	b.n	800939c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800939a:	2300      	movs	r3, #0
  }
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80093b0:	887b      	ldrh	r3, [r7, #2]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7f7 fe8d 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80093ba:	4603      	mov	r3, r0
 80093bc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	89fb      	ldrh	r3, [r7, #14]
 80093c2:	4413      	add	r3, r2
 80093c4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80093c6:	89fb      	ldrh	r3, [r7, #14]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d006      	beq.n	80093da <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 80093cc:	68b8      	ldr	r0, [r7, #8]
 80093ce:	f7f8 fb1d 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80093d2:	4602      	mov	r2, r0
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	4413      	add	r3, r2
                        : nullptr;
 80093d8:	e000      	b.n	80093dc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80093da:	2300      	movs	r3, #0
  }
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80093f0:	887b      	ldrh	r3, [r7, #2]
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7f7 fe6d 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80093fa:	4603      	mov	r3, r0
 80093fc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	89fb      	ldrh	r3, [r7, #14]
 8009402:	4413      	add	r3, r2
 8009404:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009406:	89fb      	ldrh	r3, [r7, #14]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d006      	beq.n	800941a <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 800940c:	68b8      	ldr	r0, [r7, #8]
 800940e:	f7f8 fafd 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009412:	4602      	mov	r2, r0
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	4413      	add	r3, r2
                        : nullptr;
 8009418:	e000      	b.n	800941c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800941a:	2300      	movs	r3, #0
  }
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009430:	887b      	ldrh	r3, [r7, #2]
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7f7 fe4d 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800943a:	4603      	mov	r3, r0
 800943c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	89fb      	ldrh	r3, [r7, #14]
 8009442:	4413      	add	r3, r2
 8009444:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009446:	89fb      	ldrh	r3, [r7, #14]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d006      	beq.n	800945a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800944c:	68b8      	ldr	r0, [r7, #8]
 800944e:	f7f8 fadd 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009452:	4602      	mov	r2, r0
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4413      	add	r3, r2
                        : nullptr;
 8009458:	e000      	b.n	800945c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800945a:	2300      	movs	r3, #0
  }
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009470:	887b      	ldrh	r3, [r7, #2]
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7f7 fe2d 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800947a:	4603      	mov	r3, r0
 800947c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	89fb      	ldrh	r3, [r7, #14]
 8009482:	4413      	add	r3, r2
 8009484:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8009486:	89fb      	ldrh	r3, [r7, #14]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d006      	beq.n	800949a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800948c:	68b8      	ldr	r0, [r7, #8]
 800948e:	f7f8 fabd 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009492:	4602      	mov	r2, r0
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4413      	add	r3, r2
                        : nullptr;
 8009498:	e000      	b.n	800949c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800949a:	2300      	movs	r3, #0
  }
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80094b0:	887b      	ldrh	r3, [r7, #2]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7f7 fe0d 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80094ba:	4603      	mov	r3, r0
 80094bc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	89fb      	ldrh	r3, [r7, #14]
 80094c2:	4413      	add	r3, r2
 80094c4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80094c6:	89fb      	ldrh	r3, [r7, #14]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d006      	beq.n	80094da <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 80094cc:	68b8      	ldr	r0, [r7, #8]
 80094ce:	f7f8 fa9d 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80094d2:	4602      	mov	r2, r0
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4413      	add	r3, r2
                        : nullptr;
 80094d8:	e000      	b.n	80094dc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80094da:	2300      	movs	r3, #0
  }
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3304      	adds	r3, #4
  }
 80094f0:	4618      	mov	r0, r3
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	4413      	add	r3, r2
 800950e:	edd3 7a00 	vldr	s15, [r3]
 8009512:	eeb0 0a67 	vmov.f32	s0, s15
 8009516:	f7fc f9ed 	bl	80058f4 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800951a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800951e:	eeb0 0a67 	vmov.f32	s0, s15
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
  }
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	4413      	add	r3, r2
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	4610      	mov	r0, r2
 8009558:	4619      	mov	r1, r3
 800955a:	f7fd fe1d 	bl	8007198 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
  }
 8009562:	4610      	mov	r0, r2
 8009564:	4619      	mov	r1, r3
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3304      	adds	r3, #4
  }
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	4413      	add	r3, r2
 8009596:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7f8 fa37 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800959e:	4602      	mov	r2, r0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4413      	add	r3, r2
  }
 80095a4:	4618      	mov	r0, r3
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3304      	adds	r3, #4
  }
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	4413      	add	r3, r2
 80095d6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7f8 fa17 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80095de:	4602      	mov	r2, r0
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4413      	add	r3, r2
  }
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3304      	adds	r3, #4
  }
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	4413      	add	r3, r2
 8009616:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7f8 f9f7 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800961e:	4602      	mov	r2, r0
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4413      	add	r3, r2
  }
 8009624:	4618      	mov	r0, r3
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3304      	adds	r3, #4
  }
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	4413      	add	r3, r2
 8009656:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7f8 f9d7 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800965e:	4602      	mov	r2, r0
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4413      	add	r3, r2
  }
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3304      	adds	r3, #4
  }
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	4a05      	ldr	r2, [pc, #20]	; (80096a4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe f8af 	bl	80077f8 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	080171c0 	.word	0x080171c0

080096a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff ffe7 	bl	8009684 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 80096b6:	2108      	movs	r1, #8
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f005 fe7e 	bl	800f3ba <_ZdlPvj>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b0c2      	sub	sp, #264	; 0x108
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	1d3b      	adds	r3, r7, #4
 80096d0:	6018      	str	r0, [r3, #0]
 80096d2:	463b      	mov	r3, r7
 80096d4:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 80096d6:	463b      	mov	r3, r7
 80096d8:	1d3a      	adds	r2, r7, #4
 80096da:	f107 0008 	add.w	r0, r7, #8
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	6812      	ldr	r2, [r2, #0]
 80096e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80096e6:	f001 fc43 	bl	800af70 <MicroVsnprintf>
  DebugLog(log_buffer);
 80096ea:	f107 0308 	add.w	r3, r7, #8
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7f8 f95a 	bl	80019a8 <DebugLog>
  DebugLog("\r\n");
 80096f4:	4803      	ldr	r0, [pc, #12]	; (8009704 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 80096f6:	f7f8 f957 	bl	80019a8 <DebugLog>
#endif
}
 80096fa:	bf00      	nop
 80096fc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	08014a80 	.word	0x08014a80

08009708 <_Z11MicroPrintfPKcz>:

}  // namespace

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
void MicroPrintf(const char* format, ...) {
 8009708:	b40f      	push	{r0, r1, r2, r3}
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 8009710:	f107 0314 	add.w	r3, r7, #20
 8009714:	607b      	str	r3, [r7, #4]
  Log(format, args);
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	6938      	ldr	r0, [r7, #16]
 800971a:	f7ff ffd5 	bl	80096c8 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  va_end(args);
}
 800971e:	bf00      	nop
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009728:	b004      	add	sp, #16
 800972a:	4770      	bx	lr

0800972c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  Log(format, args);
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	68b8      	ldr	r0, [r7, #8]
 800973c:	f7ff ffc4 	bl	80096c8 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68b9      	ldr	r1, [r7, #8]
 800977a:	4610      	mov	r0, r2
 800977c:	4798      	blx	r3
 800977e:	4602      	mov	r2, r0
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	601a      	str	r2, [r3, #0]
    }
  }
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 800978e:	b580      	push	{r7, lr}
 8009790:	b082      	sub	sp, #8
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6858      	ldr	r0, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	330c      	adds	r3, #12
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	6812      	ldr	r2, [r2, #0]
 80097b0:	4611      	mov	r1, r2
 80097b2:	4798      	blx	r3
    }
  }
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d102      	bne.n	80097d4 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	e007      	b.n	80097e4 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fc fb94 	bl	8005f08 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80097e0:	4603      	mov	r3, r0
 80097e2:	bf00      	nop
  }
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
#endif  // !defined(TF_LITE_STRIP_ERROR_STRINGS)

}  // namespace

MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
                       MicroAllocator* allocator)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0) {
 80097fa:	4a10      	ldr	r2, [pc, #64]	; (800983c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x50>)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	605a      	str	r2, [r3, #4]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	609a      	str	r2, [r3, #8]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	60da      	str	r2, [r3, #12]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	611a      	str	r2, [r3, #16]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	615a      	str	r2, [r3, #20]
  if (model != nullptr) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d005      	beq.n	8009830 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    subgraphs_ = model->subgraphs();
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7fd fc13 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 800982a:	4602      	mov	r2, r0
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	619a      	str	r2, [r3, #24]
  }
}
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	08017240 	.word	0x08017240

08009840 <_ZN6tflite10MicroGraphD1Ev>:

MicroGraph::~MicroGraph() {}
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	4a04      	ldr	r2, [pc, #16]	; (800985c <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	08017240 	.word	0x08017240

08009860 <_ZN6tflite10MicroGraphD0Ev>:
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff ffe9 	bl	8009840 <_ZN6tflite10MicroGraphD1Ev>
 800986e:	211c      	movs	r1, #28
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f005 fda2 	bl	800f3ba <_ZdlPvj>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 8009880:	b580      	push	{r7, lr}
 8009882:	b08a      	sub	sp, #40	; 0x28
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800988e:	2300      	movs	r3, #0
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	4618      	mov	r0, r3
 8009898:	f7fd fc4a 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800989c:	4602      	mov	r2, r0
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	4293      	cmp	r3, r2
 80098a2:	bf34      	ite	cc
 80098a4:	2301      	movcc	r3, #1
 80098a6:	2300      	movcs	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d04f      	beq.n	800994e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xce>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 80098ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fd fbf2 	bl	80070a6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80098c2:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 80098c4:	2300      	movs	r3, #0
 80098c6:	623b      	str	r3, [r7, #32]
 80098c8:	6a3a      	ldr	r2, [r7, #32]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d23a      	bcs.n	8009946 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xc6>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691a      	ldr	r2, [r3, #16]
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	4413      	add	r3, r2
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	212c      	movs	r1, #44	; 0x2c
 80098e0:	fb01 f303 	mul.w	r3, r1, r3
 80098e4:	4413      	add	r3, r2
      TfLiteNode* node =
 80098e6:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	4413      	add	r3, r2
              .node_and_registrations[i]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	212c      	movs	r1, #44	; 0x2c
 80098f8:	fb01 f303 	mul.w	r3, r1, r3
 80098fc:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 80098fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009900:	60bb      	str	r3, [r7, #8]
              .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	2b20      	cmp	r3, #32
 8009908:	d106      	bne.n	8009918 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x98>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	61fb      	str	r3, [r7, #28]
 8009916:	e004      	b.n	8009922 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xa2>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d009      	beq.n	800993e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xbe>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6850      	ldr	r0, [r2, #4]
 8009932:	69fa      	ldr	r2, [r7, #28]
 8009934:	69b9      	ldr	r1, [r7, #24]
 8009936:	4798      	blx	r3
 8009938:	4602      	mov	r2, r0
        node->user_data =
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	3301      	adds	r3, #1
 8009942:	623b      	str	r3, [r7, #32]
 8009944:	e7c0      	b.n	80098c8 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	3301      	adds	r3, #1
 800994a:	627b      	str	r3, [r7, #36]	; 0x24
 800994c:	e7a1      	b.n	8009892 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3728      	adds	r7, #40	; 0x28
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroGraph::PrepareSubgraphs() {
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	; 0x28
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800996e:	2300      	movs	r3, #0
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	4618      	mov	r0, r3
 8009978:	f7fd fbda 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800997c:	4602      	mov	r2, r0
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	4293      	cmp	r3, r2
 8009982:	bf34      	ite	cc
 8009984:	2301      	movcc	r3, #1
 8009986:	2300      	movcs	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d053      	beq.n	8009a36 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xd6>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800998e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800999a:	4611      	mov	r1, r2
 800999c:	4618      	mov	r0, r3
 800999e:	f7fd fb82 	bl	80070a6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 80099a2:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 80099a4:	2300      	movs	r3, #0
 80099a6:	623b      	str	r3, [r7, #32]
 80099a8:	6a3a      	ldr	r2, [r7, #32]
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d23e      	bcs.n	8009a2e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xce>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691a      	ldr	r2, [r3, #16]
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	4413      	add	r3, r2
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	212c      	movs	r1, #44	; 0x2c
 80099c0:	fb01 f303 	mul.w	r3, r1, r3
 80099c4:	4413      	add	r3, r2
      TfLiteNode* node =
 80099c6:	617b      	str	r3, [r7, #20]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	4413      	add	r3, r2
              .node_and_registrations[i]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	212c      	movs	r1, #44	; 0x2c
 80099d8:	fb01 f303 	mul.w	r3, r1, r3
 80099dc:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 80099de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e0:	613b      	str	r3, [r7, #16]
              .registration;
      if (registration->prepare != nullptr) {
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d016      	beq.n	8009a18 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	6852      	ldr	r2, [r2, #4]
 80099f2:	6979      	ldr	r1, [r7, #20]
 80099f4:	4610      	mov	r0, r2
 80099f6:	4798      	blx	r3
 80099f8:	4603      	mov	r3, r0
 80099fa:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb8>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 8009a02:	6938      	ldr	r0, [r7, #16]
 8009a04:	f7ff fedb 	bl	80097be <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8009a08:	4601      	mov	r1, r0
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	6a3a      	ldr	r2, [r7, #32]
 8009a0e:	480e      	ldr	r0, [pc, #56]	; (8009a48 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe8>)
 8009a10:	f7ff fe7a 	bl	8009708 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e012      	b.n	8009a3e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xde>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	6a3a      	ldr	r2, [r7, #32]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fdf1 	bl	8008608 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	623b      	str	r3, [r7, #32]
 8009a2c:	e7bc      	b.n	80099a8 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	3301      	adds	r3, #1
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
 8009a34:	e79d      	b.n	8009972 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x12>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	69fa      	ldr	r2, [r7, #28]
 8009a3a:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3728      	adds	r7, #40	; 0x28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	0801516c 	.word	0x0801516c

08009a4c <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:

TfLiteStatus MicroGraph::FreeSubgraphs() {
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	61fb      	str	r3, [r7, #28]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fd fb64 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	bf34      	ite	cc
 8009a70:	2301      	movcc	r3, #1
 8009a72:	2300      	movcs	r3, #0
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d040      	beq.n	8009afc <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xb0>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	69fa      	ldr	r2, [r7, #28]
 8009a86:	4611      	mov	r1, r2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fd fb0c 	bl	80070a6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8009a8e:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 8009a90:	2300      	movs	r3, #0
 8009a92:	61bb      	str	r3, [r7, #24]
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d22b      	bcs.n	8009af4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa8>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	691a      	ldr	r2, [r3, #16]
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	4413      	add	r3, r2
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	212c      	movs	r1, #44	; 0x2c
 8009aac:	fb01 f303 	mul.w	r3, r1, r3
 8009ab0:	4413      	add	r3, r2
      TfLiteNode* node =
 8009ab2:	60fb      	str	r3, [r7, #12]
      const TfLiteRegistration* registration =
          subgraph_allocations_[subgraph_idx]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	691a      	ldr	r2, [r3, #16]
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	4413      	add	r3, r2
              .node_and_registrations[i]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	212c      	movs	r1, #44	; 0x2c
 8009ac4:	fb01 f303 	mul.w	r3, r1, r3
 8009ac8:	4413      	add	r3, r2
      const TfLiteRegistration* registration =
 8009aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009acc:	60bb      	str	r3, [r7, #8]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xa0>
        registration->free(context_, node->user_data);
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	6850      	ldr	r0, [r2, #4]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	6912      	ldr	r2, [r2, #16]
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	3301      	adds	r3, #1
 8009af0:	61bb      	str	r3, [r7, #24]
 8009af2:	e7cf      	b.n	8009a94 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x48>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	3301      	adds	r3, #1
 8009af8:	61fb      	str	r3, [r7, #28]
 8009afa:	e7b0      	b.n	8009a5e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x12>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3720      	adds	r7, #32
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 8009b0c:	b5b0      	push	{r4, r5, r7, lr}
 8009b0e:	b08a      	sub	sp, #40	; 0x28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
 8009b16:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	695b      	ldr	r3, [r3, #20]
 8009b1c:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fd fb01 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	bf94      	ite	ls
 8009b36:	2301      	movls	r3, #1
 8009b38:	2300      	movhi	r3, #0
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00c      	beq.n	8009b5a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	699b      	ldr	r3, [r3, #24]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fd faf3 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	483c      	ldr	r0, [pc, #240]	; (8009c44 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x138>)
 8009b52:	f7ff fdd9 	bl	8009708 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8009b56:	2401      	movs	r4, #1
 8009b58:	e06e      	b.n	8009c38 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fd faa0 	bl	80070a6 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 8009b66:	61f8      	str	r0, [r7, #28]
  for (size_t i = 0; i < operators_size; ++i) {
 8009b68:	2300      	movs	r3, #0
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d25d      	bcs.n	8009c30 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x124>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	691a      	ldr	r2, [r3, #16]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	4413      	add	r3, r2
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	212c      	movs	r1, #44	; 0x2c
 8009b84:	fb01 f303 	mul.w	r3, r1, r3
 8009b88:	4413      	add	r3, r2
    TfLiteNode* node =
 8009b8a:	61bb      	str	r3, [r7, #24]
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	691a      	ldr	r2, [r3, #16]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	212c      	movs	r1, #44	; 0x2c
 8009b9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ba0:	4413      	add	r3, r2
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba4:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 8009ba6:	6978      	ldr	r0, [r7, #20]
 8009ba8:	f7ff fe09 	bl	80097be <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8009bac:	4601      	mov	r1, r0
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bb4:	f107 0308 	add.w	r3, r7, #8
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff fdc6 	bl	800974a <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>
#endif

    TFLITE_DCHECK(registration->invoke);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xbe>
 8009bc6:	f005 fe3c 	bl	800f842 <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	6852      	ldr	r2, [r2, #4]
 8009bd2:	69b9      	ldr	r1, [r7, #24]
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
 8009bd8:	4603      	mov	r3, r0
 8009bda:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	68da      	ldr	r2, [r3, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3308      	adds	r3, #8
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4610      	mov	r0, r2
 8009bec:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 8009bee:	7cfb      	ldrb	r3, [r7, #19]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d10b      	bne.n	8009c0c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x100>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 8009bf4:	6978      	ldr	r0, [r7, #20]
 8009bf6:	f7ff fde2 	bl	80097be <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8009bfa:	4601      	mov	r1, r0
 8009bfc:	7cfb      	ldrb	r3, [r7, #19]
 8009bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c00:	4811      	ldr	r0, [pc, #68]	; (8009c48 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x13c>)
 8009c02:	f7ff fd81 	bl	8009708 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 8009c06:	2401      	movs	r4, #1
 8009c08:	2500      	movs	r5, #0
 8009c0a:	e006      	b.n	8009c1a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
    } else if (invoke_status != kTfLiteOk) {
 8009c0c:	7cfb      	ldrb	r3, [r7, #19]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10c>
      return invoke_status;
 8009c12:	7cfc      	ldrb	r4, [r7, #19]
 8009c14:	2500      	movs	r5, #0
 8009c16:	e000      	b.n	8009c1a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x10e>
        reinterpret_cast<MicroProfiler*>(context_->profiler));
 8009c18:	2501      	movs	r5, #1
 8009c1a:	f107 0308 	add.w	r3, r7, #8
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff fdb5 	bl	800978e <_ZN6tflite19ScopedMicroProfilerD1Ev>
 8009c24:	2d01      	cmp	r5, #1
 8009c26:	d107      	bne.n	8009c38 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x12c>
  for (size_t i = 0; i < operators_size; ++i) {
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c2e:	e79d      	b.n	8009b6c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x60>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a3a      	ldr	r2, [r7, #32]
 8009c34:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 8009c36:	2400      	movs	r4, #0
 8009c38:	4623      	mov	r3, r4
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3728      	adds	r7, #40	; 0x28
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bdb0      	pop	{r4, r5, r7, pc}
 8009c42:	bf00      	nop
 8009c44:	080151a4 	.word	0x080151a4
 8009c48:	080151d8 	.word	0x080151d8

08009c4c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroGraph::ResetVariableTensors() {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08a      	sub	sp, #40	; 0x28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009c54:	2300      	movs	r3, #0
 8009c56:	627b      	str	r3, [r7, #36]	; 0x24
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fd fa67 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009c62:	4602      	mov	r2, r0
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	4293      	cmp	r3, r2
 8009c68:	bf34      	ite	cc
 8009c6a:	2301      	movcc	r3, #1
 8009c6c:	2300      	movcs	r3, #0
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d077      	beq.n	8009d64 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x118>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff faf8 	bl	8009270 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 8009c80:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009c82:	2300      	movs	r3, #0
 8009c84:	623b      	str	r3, [r7, #32]
 8009c86:	69b8      	ldr	r0, [r7, #24]
 8009c88:	f7fd fd45 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff fa2c 	bl	80090ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009c94:	4602      	mov	r2, r0
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	bf34      	ite	cc
 8009c9c:	2301      	movcc	r3, #1
 8009c9e:	2300      	movcs	r3, #0
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d05a      	beq.n	8009d5c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
      auto* tensor = subgraph->tensors()->Get(i);
 8009ca6:	69b8      	ldr	r0, [r7, #24]
 8009ca8:	f7fd fd35 	bl	8007716 <_ZNK6tflite8SubGraph7tensorsEv>
 8009cac:	4603      	mov	r3, r0
 8009cae:	6a39      	ldr	r1, [r7, #32]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7ff fa29 	bl	8009108 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8009cb6:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 8009cb8:	6978      	ldr	r0, [r7, #20]
 8009cba:	f7fd fcfc 	bl	80076b6 <_ZNK6tflite6Tensor11is_variableEv>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d047      	beq.n	8009d54 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x108>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691a      	ldr	r2, [r3, #16]
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	4413      	add	r3, r2
 8009cce:	6859      	ldr	r1, [r3, #4]
 8009cd0:	6a3a      	ldr	r2, [r7, #32]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	f107 020c 	add.w	r2, r7, #12
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fd fc53 	bl	800758e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	74fb      	strb	r3, [r7, #19]
 8009cec:	7cfb      	ldrb	r3, [r7, #19]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
 8009cf2:	7cfb      	ldrb	r3, [r7, #19]
 8009cf4:	e037      	b.n	8009d66 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x11a>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 8009cfa:	6978      	ldr	r0, [r7, #20]
 8009cfc:	f7fd fac8 	bl	8007290 <_ZNK6tflite6Tensor4typeEv>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b09      	cmp	r3, #9
 8009d04:	bf0c      	ite	eq
 8009d06:	2301      	moveq	r3, #1
 8009d08:	2300      	movne	r3, #0
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00f      	beq.n	8009d30 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe4>
          value = tensor->quantization()->zero_point()->Get(0);
 8009d10:	6978      	ldr	r0, [r7, #20]
 8009d12:	f7fd fcc2 	bl	800769a <_ZNK6tflite6Tensor12quantizationEv>
 8009d16:	4603      	mov	r3, r0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fd fc92 	bl	8007642 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2100      	movs	r1, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff f9ba 	bl	800909c <_ZNK11flatbuffers6VectorIxE3GetEm>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	4413      	add	r3, r2
 8009d3a:	6859      	ldr	r1, [r3, #4]
 8009d3c:	6a3a      	ldr	r2, [r7, #32]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	440b      	add	r3, r1
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	69f9      	ldr	r1, [r7, #28]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f005 fe16 	bl	800f980 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	3301      	adds	r3, #1
 8009d58:	623b      	str	r3, [r7, #32]
 8009d5a:	e794      	b.n	8009c86 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	3301      	adds	r3, #1
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
 8009d62:	e779      	b.n	8009c58 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
               buffer_size);
      }
    }
  }

  return kTfLiteOk;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3728      	adds	r7, #40	; 0x28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <_ZN6tflite10MicroGraph12NumSubgraphsEv>:

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fd f968 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8009d80:	4603      	mov	r3, r0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fd f9d4 	bl	8007130 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	611a      	str	r2, [r3, #16]
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:

size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fd f947 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f7fd f9bf 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fd fcae 	bl	8007732 <_ZNK6tflite8SubGraph6inputsEv>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fb f9b2 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009dde:	4603      	mov	r3, r0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fd f929 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f7fd f9a1 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fd fc90 	bl	8007732 <_ZNK6tflite8SubGraph6inputsEv>
 8009e12:	4602      	mov	r2, r0
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7fb f9a1 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009e1e:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	4413      	add	r3, r2
 8009e2a:	6859      	ldr	r1, [r3, #4]
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	440b      	add	r3, r1
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fd f8fe 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8009e54:	4602      	mov	r2, r0
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	f7fd f976 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009e60:	4603      	mov	r3, r0
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fd fc73 	bl	800774e <_ZNK6tflite8SubGraph7outputsEv>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fb f969 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009e70:	4603      	mov	r3, r0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b086      	sub	sp, #24
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fd f8e0 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8009e90:	4602      	mov	r2, r0
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	4619      	mov	r1, r3
 8009e96:	4610      	mov	r0, r2
 8009e98:	f7fd f958 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fd fc55 	bl	800774e <_ZNK6tflite8SubGraph7outputsEv>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fb f958 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009eb0:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	691a      	ldr	r2, [r3, #16]
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	4413      	add	r3, r2
 8009ebc:	6859      	ldr	r1, [r3, #4]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	440b      	add	r3, r1
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	2104      	movs	r1, #4
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7f7 fdaf 	bl	8001a44 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8009ee6:	4603      	mov	r3, r0
  }
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	210e      	movs	r1, #14
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff f80a 	bl	8008f16 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8009f02:	4603      	mov	r3, r0
  }
 8009f04:	4618      	mov	r0, r3
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <_ZNK6tflite8Operator13intermediatesEv>:
  const flatbuffers::Vector<int32_t> *intermediates() const {
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INTERMEDIATES);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2114      	movs	r1, #20
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fb f8b0 	bl	800507e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8009f1e:	4603      	mov	r3, r0
  }
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2106      	movs	r1, #6
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 fd84 	bl	800aa42 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8009f3a:	4603      	mov	r3, r0
  }
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	4618      	mov	r0, r3
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>:

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fd f865 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fd f8de 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009f90:	4603      	mov	r3, r0
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fd fbcd 	bl	8007732 <_ZNK6tflite8SubGraph6inputsEv>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fb f8d1 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8009fa0:	4603      	mov	r3, r0
  }
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fd f84a 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fd f8c3 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fd fbb2 	bl	8007732 <_ZNK6tflite8SubGraph6inputsEv>
 8009fce:	4603      	mov	r3, r0
  }
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fd f833 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fd f8ac 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fd fba9 	bl	800774e <_ZNK6tflite8SubGraph7outputsEv>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fb f89f 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800a004:	4603      	mov	r3, r0
  }
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fd f818 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 800a020:	4603      	mov	r3, r0
 800a022:	2100      	movs	r1, #0
 800a024:	4618      	mov	r0, r3
 800a026:	f7fd f891 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800a02a:	4603      	mov	r3, r0
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fd fb8e 	bl	800774e <_ZNK6tflite8SubGraph7outputsEv>
 800a032:	4603      	mov	r3, r0
  }
 800a034:	4618      	mov	r0, r3
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>:
  // TODO(b/158263161): Consider switching to Create() function to enable better
  // error reporting during initialization.
  void Init(MicroProfiler* profiler);

  // Gets the current subgraph index used from within context methods.
  int get_subgraph_index() { return graph_.GetCurrentSubgraphIndex(); }
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	336c      	adds	r3, #108	; 0x6c
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff ff7b 	bl	8009f44 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800a04e:	4603      	mov	r3, r0
 800a050:	4618      	mov	r0, r3
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]

      graph_(&context_, model, &allocator_),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	605a      	str	r2, [r3, #4]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	69fa      	ldr	r2, [r7, #28]
 800a076:	609a      	str	r2, [r3, #8]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	330c      	adds	r3, #12
 800a07c:	225c      	movs	r2, #92	; 0x5c
 800a07e:	2100      	movs	r1, #0
 800a080:	4618      	mov	r0, r3
 800a082:	f005 fc7d 	bl	800f980 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 800a086:	69fa      	ldr	r2, [r7, #28]
 800a088:	69b9      	ldr	r1, [r7, #24]
 800a08a:	6838      	ldr	r0, [r7, #0]
 800a08c:	f7fe f90a 	bl	80082a4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 800a090:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	669a      	str	r2, [r3, #104]	; 0x68
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f103 010c 	add.w	r1, r3, #12
      graph_(&context_, model, &allocator_),
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      output_tensors_(nullptr) {
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	f7ff fba0 	bl	80097ec <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 800a0d4:	6a39      	ldr	r1, [r7, #32]
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 f826 	bl	800a128 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	336c      	adds	r3, #108	; 0x6c
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff ff32 	bl	8009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bf14      	ite	ne
 800a0fe:	2301      	movne	r3, #1
 800a100:	2300      	moveq	r3, #0
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	336c      	adds	r3, #108	; 0x6c
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fc9d 	bl	8009a4c <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	336c      	adds	r3, #108	; 0x6c
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff fb92 	bl	8009840 <_ZN6tflite10MicroGraphD1Ev>
  }
}
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  context_.impl_ = static_cast<void*>(this);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	619a      	str	r2, [r3, #24]
  context_.ReportError = ReportOpError;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a0d      	ldr	r2, [pc, #52]	; (800a170 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800a13c:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a0c      	ldr	r2, [pc, #48]	; (800a174 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800a142:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.ReportError = ReportOpError;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a0a      	ldr	r2, [pc, #40]	; (800a170 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x48>)
 800a148:	621a      	str	r2, [r3, #32]
  context_.GetTensor = GetTensor;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a09      	ldr	r2, [pc, #36]	; (800a174 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x4c>)
 800a14e:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.GetEvalTensor = GetEvalTensor;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a09      	ldr	r2, [pc, #36]	; (800a178 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x50>)
 800a154:	661a      	str	r2, [r3, #96]	; 0x60
  context_.profiler = profiler;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	641a      	str	r2, [r3, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	0800a955 	.word	0x0800a955
 800a174:	0800a98d 	.word	0x0800a98d
 800a178:	0800a9dd 	.word	0x0800a9dd

0800a17c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 800a17c:	b5b0      	push	{r4, r5, r7, lr}
 800a17e:	b098      	sub	sp, #96	; 0x60
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800a184:	2300      	movs	r3, #0
 800a186:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	336c      	adds	r3, #108	; 0x6c
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7ff fdee 	bl	8009d6e <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 800a192:	4602      	mov	r2, r0
 800a194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a196:	4293      	cmp	r3, r2
 800a198:	bfb4      	ite	lt
 800a19a:	2301      	movlt	r3, #1
 800a19c:	2300      	movge	r3, #0
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 8189 	beq.w	800a4b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33c>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fc ff50 	bl	8007050 <_ZNK6tflite5Model9subgraphsEv>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	f7fc ffc8 	bl	800714c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800a1bc:	64f8      	str	r0, [r7, #76]	; 0x4c
    TFLITE_DCHECK(subgraph != nullptr);
 800a1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x4c>
 800a1c4:	f005 fb3d 	bl	800f842 <abort>

    auto* opcodes = model_->operator_codes();
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7ff feab 	bl	8009f28 <_ZNK6tflite5Model14operator_codesEv>
 800a1d2:	64b8      	str	r0, [r7, #72]	; 0x48
    BuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fe fe90 	bl	8008efe <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 800a1de:	6478      	str	r0, [r7, #68]	; 0x44
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800a1e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a1e2:	f7fc ff43 	bl	800706c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800a1e6:	6438      	str	r0, [r7, #64]	; 0x40
    for (size_t i = 0; i < operators_size; ++i) {
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	f080 815d 	bcs.w	800a4b0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x334>
      const auto* op = subgraph->operators()->Get(i);
 800a1f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a1f8:	f7fc ff1c 	bl	8007034 <_ZNK6tflite8SubGraph9operatorsEv>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a200:	4618      	mov	r0, r3
 800a202:	f7fe ffa7 	bl	8009154 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800a206:	63f8      	str	r0, [r7, #60]	; 0x3c
      const size_t index = op->opcode_index();
 800a208:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a20a:	f7ff fe62 	bl	8009ed2 <_ZNK6tflite8Operator12opcode_indexEv>
 800a20e:	63b8      	str	r0, [r7, #56]	; 0x38
      if (index >= opcodes->size()) {
 800a210:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a212:	f000 fc26 	bl	800aa62 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800a216:	4602      	mov	r2, r0
 800a218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21a:	4293      	cmp	r3, r2
 800a21c:	bf2c      	ite	cs
 800a21e:	2301      	movcs	r3, #1
 800a220:	2300      	movcc	r3, #0
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b00      	cmp	r3, #0
 800a226:	d005      	beq.n	800a234 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xb8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 800a228:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a22a:	48a6      	ldr	r0, [pc, #664]	; (800a4c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x348>)
 800a22c:	f7ff fa6c 	bl	8009708 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800a230:	2301      	movs	r3, #1
 800a232:	e142      	b.n	800a4ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
      }
      const auto* opcode = opcodes->Get(index);
 800a234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a236:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a238:	f000 fc22 	bl	800aa80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 800a23c:	6378      	str	r0, [r7, #52]	; 0x34
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	461d      	mov	r5, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689c      	ldr	r4, [r3, #8]
                                    &(graph_.GetAllocations()[subgraph_idx]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	336c      	adds	r3, #108	; 0x6c
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff fe85 	bl	8009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a252:	4602      	mov	r2, r0
 800a254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a25e:	212c      	movs	r1, #44	; 0x2c
 800a260:	fb01 f303 	mul.w	r3, r1, r3
 800a264:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
 800a266:	3328      	adds	r3, #40	; 0x28
 800a268:	4622      	mov	r2, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a26e:	f7fb fe8f 	bl	8005f90 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 800a272:	4603      	mov	r3, r0
 800a274:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                          .registration));
      if (status != kTfLiteOk) {
 800a278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00e      	beq.n	800a29e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
        MicroPrintf("Failed to get registration from op code %s\n ",
 800a280:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a282:	f005 f862 	bl	800f34a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800a286:	4603      	mov	r3, r0
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fb fe3d 	bl	8005f08 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a28e:	4603      	mov	r3, r0
 800a290:	4619      	mov	r1, r3
 800a292:	488d      	ldr	r0, [pc, #564]	; (800a4c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x34c>)
 800a294:	f7ff fa38 	bl	8009708 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 800a298:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a29c:	e10d      	b.n	800a4ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	336c      	adds	r3, #108	; 0x6c
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff fe5a 	bl	8009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2b4:	212c      	movs	r1, #44	; 0x2c
 800a2b6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ba:	4413      	add	r3, r2
                                     .registration;
 800a2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (registration == nullptr) {
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d105      	bne.n	800a2d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 800a2c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2c8:	4880      	ldr	r0, [pc, #512]	; (800a4cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x350>)
 800a2ca:	f7ff fa1d 	bl	8009708 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e0f3      	b.n	800a4ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
      }
      BuiltinOperator op_type =
          static_cast<BuiltinOperator>(registration->builtin_code);
 800a2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d4:	695b      	ldr	r3, [r3, #20]
      BuiltinOperator op_type =
 800a2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

      const char* custom_data = nullptr;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	657b      	str	r3, [r7, #84]	; 0x54
      size_t custom_data_size = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	653b      	str	r3, [r7, #80]	; 0x50
      unsigned char* builtin_data = nullptr;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	617b      	str	r3, [r7, #20]

      if (op_type == BuiltinOperator_CUSTOM) {
 800a2e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2ea:	2b20      	cmp	r3, #32
 800a2ec:	d11b      	bne.n	800a326 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1aa>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 800a2ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a2f0:	f7ff fdfe 	bl	8009ef0 <_ZNK6tflite8Operator14custom_optionsEv>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bf14      	ite	ne
 800a2fa:	2301      	movne	r3, #1
 800a2fc:	2300      	moveq	r3, #0
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b00      	cmp	r3, #0
 800a302:	d054      	beq.n	800a3ae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x232>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 800a304:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a306:	f7ff fdf3 	bl	8009ef0 <_ZNK6tflite8Operator14custom_optionsEv>
 800a30a:	4603      	mov	r3, r0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe ffcb 	bl	80092a8 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800a312:	6578      	str	r0, [r7, #84]	; 0x54
          custom_data_size = op->custom_options()->size();
 800a314:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a316:	f7ff fdeb 	bl	8009ef0 <_ZNK6tflite8Operator14custom_optionsEv>
 800a31a:	4603      	mov	r3, r0
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe fe6a 	bl	8008ff6 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800a322:	6538      	str	r0, [r7, #80]	; 0x50
 800a324:	e043      	b.n	800a3ae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x232>
        }
      } else {
        if (op->custom_options() != nullptr) {
 800a326:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a328:	f7ff fde2 	bl	8009ef0 <_ZNK6tflite8Operator14custom_optionsEv>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bf14      	ite	ne
 800a332:	2301      	movne	r3, #1
 800a334:	2300      	moveq	r3, #0
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00b      	beq.n	800a354 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>
          MicroPrintf(
 800a33c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a340:	4618      	mov	r0, r3
 800a342:	f7fb fde1 	bl	8005f08 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a346:	4603      	mov	r3, r0
 800a348:	4619      	mov	r1, r3
 800a34a:	4861      	ldr	r0, [pc, #388]	; (800a4d0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x354>)
 800a34c:	f7ff f9dc 	bl	8009708 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 800a350:	2301      	movs	r3, #1
 800a352:	e0b2      	b.n	800a4ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
        }

        MicroOpResolver::BuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3320      	adds	r3, #32
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800a366:	4610      	mov	r0, r2
 800a368:	4798      	blx	r3
 800a36a:	6278      	str	r0, [r7, #36]	; 0x24
        if (parser == nullptr) {
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10b      	bne.n	800a38a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x20e>
          MicroPrintf("Did not find a parser for %s",
 800a372:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a376:	4618      	mov	r0, r3
 800a378:	f7fb fdc6 	bl	8005f08 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a37c:	4603      	mov	r3, r0
 800a37e:	4619      	mov	r1, r3
 800a380:	4854      	ldr	r0, [pc, #336]	; (800a4d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x358>)
 800a382:	f7ff f9c1 	bl	8009708 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 800a386:	2301      	movs	r3, #1
 800a388:	e097      	b.n	800a4ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
        }
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6899      	ldr	r1, [r3, #8]
 800a38e:	f107 0314 	add.w	r3, r7, #20
 800a392:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a394:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a398:	47a0      	blx	r4
 800a39a:	4603      	mov	r3, r0
 800a39c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x232>
 800a3a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3ac:	e085      	b.n	800a4ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
                                     builtin_data_allocator,
                                     (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800a3b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a3b4:	f7fd f993 	bl	80076de <_ZNK6tflite8Operator6inputsEv>
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	f107 0310 	add.w	r3, r7, #16
 800a3be:	461a      	mov	r2, r3
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f7fe fd89 	bl	8008ed8 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a3cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x25e>
 800a3d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3d8:	e06f      	b.n	800a4ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
          op->inputs(), &inputs_array));

      TfLiteIntArray* outputs_array;
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800a3de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a3e0:	f7fd f98b 	bl	80076fa <_ZNK6tflite8Operator7outputsEv>
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	f107 030c 	add.w	r3, r7, #12
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f7fe fd73 	bl	8008ed8 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800a3f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x28a>
 800a400:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a404:	e059      	b.n	800a4ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
          op->outputs(), &outputs_array));

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	336c      	adds	r3, #108	; 0x6c
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fda6 	bl	8009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a410:	4602      	mov	r2, r0
 800a412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a414:	00db      	lsls	r3, r3, #3
 800a416:	4413      	add	r3, r2
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a41c:	212c      	movs	r1, #44	; 0x2c
 800a41e:	fb01 f303 	mul.w	r3, r1, r3
 800a422:	4413      	add	r3, r2
 800a424:	61fb      	str	r3, [r7, #28]
      *node = {};
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	4618      	mov	r0, r3
 800a42a:	2328      	movs	r3, #40	; 0x28
 800a42c:	461a      	mov	r2, r3
 800a42e:	2100      	movs	r1, #0
 800a430:	f005 faa6 	bl	800f980 <memset>
      node->inputs = inputs_array;
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	615a      	str	r2, [r3, #20]
      node->custom_initial_data = custom_data;
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a44a:	619a      	str	r2, [r3, #24]
      node->custom_initial_data_size = custom_data_size;
 800a44c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	61da      	str	r2, [r3, #28]

      if (op->intermediates() && (op->intermediates()->size() > 0)) {
 800a452:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a454:	f7ff fd5a 	bl	8009f0c <_ZNK6tflite8Operator13intermediatesEv>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fa>
 800a45e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a460:	f7ff fd54 	bl	8009f0c <_ZNK6tflite8Operator13intermediatesEv>
 800a464:	4603      	mov	r3, r0
 800a466:	4618      	mov	r0, r3
 800a468:	f7fa fe6b 	bl	8005142 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fa>
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2fc>
 800a476:	2300      	movs	r3, #0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d015      	beq.n	800a4a8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x32c>
        TfLiteIntArray* intermediates_array;
        TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800a480:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a482:	f7ff fd43 	bl	8009f0c <_ZNK6tflite8Operator13intermediatesEv>
 800a486:	4601      	mov	r1, r0
 800a488:	f107 0308 	add.w	r3, r7, #8
 800a48c:	461a      	mov	r2, r3
 800a48e:	4620      	mov	r0, r4
 800a490:	f7fe fd22 	bl	8008ed8 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEEPP14TfLiteIntArray>
 800a494:	4603      	mov	r3, r0
 800a496:	76fb      	strb	r3, [r7, #27]
 800a498:	7efb      	ldrb	r3, [r7, #27]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x326>
 800a49e:	7efb      	ldrb	r3, [r7, #27]
        return kTfLiteError;
 800a4a0:	e00b      	b.n	800a4ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x33e>
            op->intermediates(), &intermediates_array));
        node->intermediates = intermediates_array;
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < operators_size; ++i) {
 800a4a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4ae:	e69d      	b.n	800a1ec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x70>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800a4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4b6:	e667      	b.n	800a188 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
      }
    }
  }
  return kTfLiteOk;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3760      	adds	r7, #96	; 0x60
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	08015d0c 	.word	0x08015d0c
 800a4c8:	08015d38 	.word	0x08015d38
 800a4cc:	08015d68 	.word	0x08015d68
 800a4d0:	08015d8c 	.word	0x08015d8c
 800a4d4:	08015dd4 	.word	0x08015dd4

0800a4d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4dc:	b088      	sub	sp, #32
 800a4de:	af02      	add	r7, sp, #8
 800a4e0:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	f7fd ff23 	bl	8008338 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 800a4f2:	60f8      	str	r0, [r7, #12]

  if (allocations == nullptr) {
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10b      	bne.n	800a512 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	49a4      	ldr	r1, [pc, #656]	; (800a790 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b8>)
 800a500:	4618      	mov	r0, r3
 800a502:	f7fa f97f 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    return kTfLiteError;
 800a50e:	2301      	movs	r3, #1
 800a510:	e139      	b.n	800a786 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  graph_.SetSubgraphAllocations(allocations);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	336c      	adds	r3, #108	; 0x6c
 800a516:	68f9      	ldr	r1, [r7, #12]
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff fc3a 	bl	8009d92 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7ff fe2c 	bl	800a17c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 800a524:	4603      	mov	r3, r0
 800a526:	72fb      	strb	r3, [r7, #11]
 800a528:	7afb      	ldrb	r3, [r7, #11]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
 800a52e:	7afb      	ldrb	r3, [r7, #11]
 800a530:	e129      	b.n	800a786 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a97      	ldr	r2, [pc, #604]	; (800a794 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2bc>)
 800a536:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a94      	ldr	r2, [pc, #592]	; (800a798 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>)
 800a548:	611a      	str	r2, [r3, #16]
  graph_.InitSubgraphs();
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	336c      	adds	r3, #108	; 0x6c
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff f996 	bl	8009880 <_ZN6tflite10MicroGraph13InitSubgraphsEv>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a91      	ldr	r2, [pc, #580]	; (800a79c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c4>)
 800a558:	64da      	str	r2, [r3, #76]	; 0x4c
  graph_.PrepareSubgraphs();
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	336c      	adds	r3, #108	; 0x6c
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff f9fe 	bl	8009960 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	645a      	str	r2, [r3, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	64da      	str	r2, [r3, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a8b      	ldr	r2, [pc, #556]	; (800a7a0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>)
 800a574:	651a      	str	r2, [r3, #80]	; 0x50

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681d      	ldr	r5, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	336c      	adds	r3, #108	; 0x6c
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff fcea 	bl	8009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a588:	4602      	mov	r2, r0
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	338c      	adds	r3, #140	; 0x8c
 800a58e:	4629      	mov	r1, r5
 800a590:	4620      	mov	r0, r4
 800a592:	f7fd ff53 	bl	800843c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 800a596:	4603      	mov	r3, r0
 800a598:	72bb      	strb	r3, [r7, #10]
 800a59a:	7abb      	ldrb	r3, [r7, #10]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xcc>
 800a5a0:	7abb      	ldrb	r3, [r7, #10]
 800a5a2:	e0f0      	b.n	800a786 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
                                   &scratch_buffer_handles_));

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	330c      	adds	r3, #12
 800a5b0:	681c      	ldr	r4, [r3, #0]
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff fcde 	bl	8009f74 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a5b8:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47a0      	blx	r4
 800a5c2:	4602      	mov	r2, r0
  input_tensors_ =
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (input_tensors_ == nullptr) {
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10d      	bne.n	800a5f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
    TF_LITE_REPORT_ERROR(
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689c      	ldr	r4, [r3, #8]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fccb 	bl	8009f74 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	496f      	ldr	r1, [pc, #444]	; (800a7a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f7fa f90c 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e0ca      	b.n	800a786 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff fcbd 	bl	8009f74 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	4293      	cmp	r3, r2
 800a600:	bf34      	ite	cc
 800a602:	2301      	movcc	r3, #1
 800a604:	2300      	movcs	r3, #0
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d03c      	beq.n	800a686 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	336c      	adds	r3, #108	; 0x6c
 800a622:	4618      	mov	r0, r3
 800a624:	f7ff fc9a 	bl	8009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a628:	4680      	mov	r8, r0
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff fcbd 	bl	8009faa <_ZNK6tflite16MicroInterpreter6inputsEv>
 800a630:	4603      	mov	r3, r0
 800a632:	6979      	ldr	r1, [r7, #20]
 800a634:	4618      	mov	r0, r3
 800a636:	f7fa fd93 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800a63a:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	18d4      	adds	r4, r2, r3
 800a648:	2300      	movs	r3, #0
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	460b      	mov	r3, r1
 800a64e:	4642      	mov	r2, r8
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	4630      	mov	r0, r6
 800a654:	47a8      	blx	r5
 800a656:	4603      	mov	r3, r0
 800a658:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	4413      	add	r3, r2
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d108      	bne.n	800a67e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a6>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	494d      	ldr	r1, [pc, #308]	; (800a7a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 800a674:	4618      	mov	r0, r3
 800a676:	f7fa f8c5 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e083      	b.n	800a786 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < inputs_size(); ++i) {
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	3301      	adds	r3, #1
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	e7b6      	b.n	800a5f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11c>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	330c      	adds	r3, #12
 800a692:	681c      	ldr	r4, [r3, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff fc9f 	bl	8009fd8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a69a:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4619      	mov	r1, r3
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	47a0      	blx	r4
 800a6a4:	4602      	mov	r2, r0
  output_tensors_ =
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (output_tensors_ == nullptr) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10d      	bne.n	800a6d2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fa>
    TF_LITE_REPORT_ERROR(
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	689c      	ldr	r4, [r3, #8]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7ff fc8c 	bl	8009fd8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4939      	ldr	r1, [pc, #228]	; (800a7ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f7fa f89b 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e059      	b.n	800a786 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	613b      	str	r3, [r7, #16]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7ff fc7e 	bl	8009fd8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	bf34      	ite	cc
 800a6e4:	2301      	movcc	r3, #1
 800a6e6:	2300      	movcs	r3, #0
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d03c      	beq.n	800a768 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x290>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	336c      	adds	r3, #108	; 0x6c
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff fc29 	bl	8009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a70a:	4680      	mov	r8, r0
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff fc7e 	bl	800a00e <_ZNK6tflite16MicroInterpreter7outputsEv>
 800a712:	4603      	mov	r3, r0
 800a714:	6939      	ldr	r1, [r7, #16]
 800a716:	4618      	mov	r0, r3
 800a718:	f7fa fd22 	bl	8005160 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800a71c:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	18d4      	adds	r4, r2, r3
 800a72a:	2300      	movs	r3, #0
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	460b      	mov	r3, r1
 800a730:	4642      	mov	r2, r8
 800a732:	6839      	ldr	r1, [r7, #0]
 800a734:	4630      	mov	r0, r6
 800a736:	47a8      	blx	r5
 800a738:	4603      	mov	r3, r0
 800a73a:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d108      	bne.n	800a760 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x288>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	693a      	ldr	r2, [r7, #16]
 800a754:	4916      	ldr	r1, [pc, #88]	; (800a7b0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 800a756:	4618      	mov	r0, r3
 800a758:	f7fa f854 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e012      	b.n	800a786 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	3301      	adds	r3, #1
 800a764:	613b      	str	r3, [r7, #16]
 800a766:	e7b6      	b.n	800a6d6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fe>
    }
  }

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f89d 	bl	800a8a8 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 800a76e:	4603      	mov	r3, r0
 800a770:	727b      	strb	r3, [r7, #9]
 800a772:	7a7b      	ldrb	r3, [r7, #9]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a4>
 800a778:	7a7b      	ldrb	r3, [r7, #9]
 800a77a:	e004      	b.n	800a786 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ae>

  tensors_allocated_ = true;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return kTfLiteOk;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a790:	08015df4 	.word	0x08015df4
 800a794:	0800a8c5 	.word	0x0800a8c5
 800a798:	0800aa1b 	.word	0x0800aa1b
 800a79c:	0800a8f1 	.word	0x0800a8f1
 800a7a0:	0800a927 	.word	0x0800a927
 800a7a4:	08015e18 	.word	0x08015e18
 800a7a8:	08015e64 	.word	0x08015e64
 800a7ac:	08015e8c 	.word	0x08015e8c
 800a7b0:	08015ed8 	.word	0x08015ed8

0800a7b4 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d007      	beq.n	800a7d6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	4912      	ldr	r1, [pc, #72]	; (800a814 <_ZN6tflite16MicroInterpreter6InvokeEv+0x60>)
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fa f819 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e019      	b.n	800a80a <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a7dc:	f083 0301 	eor.w	r3, r3, #1
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d009      	beq.n	800a7fa <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f7ff fe76 	bl	800a4d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
 800a7f8:	e007      	b.n	800a80a <_ZN6tflite16MicroInterpreter6InvokeEv+0x56>
  }
  return graph_.InvokeSubgraph(0);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	336c      	adds	r3, #108	; 0x6c
 800a7fe:	2100      	movs	r1, #0
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff f983 	bl	8009b0c <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
 800a806:	4603      	mov	r3, r0
 800a808:	bf00      	nop
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	08015f00 	.word	0x08015f00

0800a818 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fba6 	bl	8009f74 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a828:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d308      	bcc.n	800a844 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6898      	ldr	r0, [r3, #8]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	4908      	ldr	r1, [pc, #32]	; (800a85c <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 800a83c:	f7f9 ffe2 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800a840:	2300      	movs	r3, #0
 800a842:	e006      	b.n	800a852 <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	681b      	ldr	r3, [r3, #0]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	08015f30 	.word	0x08015f30

0800a860 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff fbb4 	bl	8009fd8 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a870:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	429a      	cmp	r2, r3
 800a878:	d308      	bcc.n	800a88c <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6898      	ldr	r0, [r3, #8]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	683a      	ldr	r2, [r7, #0]
 800a882:	4908      	ldr	r1, [pc, #32]	; (800a8a4 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 800a884:	f7f9 ffbe 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800a888:	2300      	movs	r3, #0
 800a88a:	e006      	b.n	800a89a <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	681b      	ldr	r3, [r3, #0]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	08015f5c 	.word	0x08015f5c

0800a8a8 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  return graph_.ResetVariableTensors();
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	336c      	adds	r3, #108	; 0x6c
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff f9c9 	bl	8009c4c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
 800a8ba:	4603      	mov	r3, r0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800a8d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68db      	ldr	r3, [r3, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
 800a8d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	330c      	adds	r3, #12
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6839      	ldr	r1, [r7, #0]
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	4798      	blx	r3
 800a8e6:	4603      	mov	r3, r0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus MicroInterpreter::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                           size_t bytes,
                                                           int* buffer_idx) {
 800a8f0:	b590      	push	{r4, r7, lr}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
  MicroInterpreter* interpreter =
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	617b      	str	r3, [r7, #20]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  return interpreter->allocator_.RequestScratchBufferInArena(
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	336c      	adds	r3, #108	; 0x6c
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7ff fb1a 	bl	8009f44 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800a910:	4602      	mov	r2, r0
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68b9      	ldr	r1, [r7, #8]
 800a916:	4620      	mov	r0, r4
 800a918:	f7fd fe24 	bl	8008564 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 800a91c:	4603      	mov	r3, r0
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}
 800a91e:	4618      	mov	r0, r3
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	bd90      	pop	{r4, r7, pc}

0800a926 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800a926:	b480      	push	{r7}
 800a928:	b085      	sub	sp, #20
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	009b      	lsls	r3, r3, #2
  ScratchBufferHandle* handle =
 800a940:	4413      	add	r3, r2
 800a942:	60bb      	str	r3, [r7, #8]
  return handle->data;
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	681b      	ldr	r3, [r3, #0]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3714      	adds	r7, #20
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:

void MicroInterpreter::ReportOpError(struct TfLiteContext* context,
                                     const char* format, ...) {
 800a954:	b40e      	push	{r1, r2, r3}
 800a956:	b580      	push	{r7, lr}
 800a958:	b085      	sub	sp, #20
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  MicroInterpreter* interpreter =
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  va_list args;
  va_start(args, format);
 800a964:	f107 0320 	add.w	r3, r7, #32
 800a968:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6898      	ldr	r0, [r3, #8]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3308      	adds	r3, #8
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	69f9      	ldr	r1, [r7, #28]
 800a97c:	4798      	blx	r3
  va_end(args);
#endif
}
 800a97e:	bf00      	nop
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a988:	b003      	add	sp, #12
 800a98a:	4770      	bx	lr

0800a98c <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
 800a98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a990:	b086      	sub	sp, #24
 800a992:	af02      	add	r7, sp, #8
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	60fb      	str	r3, [r7, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	681c      	ldr	r4, [r3, #0]
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681e      	ldr	r6, [r3, #0]
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	336c      	adds	r3, #108	; 0x6c
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7ff fad1 	bl	8009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a9ba:	4680      	mov	r8, r0
  return interpreter->allocator_.AllocateTempTfLiteTensor(
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f7ff fb3d 	bl	800a03c <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	47a0      	blx	r4
 800a9d0:	4603      	mov	r3, r0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9dc <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800a9dc:	b590      	push	{r4, r7, lr}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	336c      	adds	r3, #108	; 0x6c
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff fab3 	bl	8009f5c <_ZN6tflite10MicroGraph14GetAllocationsEv>
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7ff fb1f 	bl	800a03c <_ZN6tflite16MicroInterpreter18get_subgraph_indexEv>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	4423      	add	r3, r4
              .tensors[tensor_idx];
 800aa04:	6859      	ldr	r1, [r3, #4]
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	440b      	add	r3, r1
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd90      	pop	{r4, r7, pc}

0800aa1a <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
 800aa1a:	b480      	push	{r7}
 800aa1c:	b085      	sub	sp, #20
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  MicroInterpreter* interpreter =
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	60fb      	str	r3, [r7, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800aa4e:	887b      	ldrh	r3, [r7, #2]
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f83a 	bl	800aacc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800aa58:	4603      	mov	r3, r0
  }
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7f6 ffb3 	bl	80019da <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800aa74:	4603      	mov	r3, r0
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7ff ffe9 	bl	800aa62 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 800aa90:	4602      	mov	r2, r0
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d306      	bcc.n	800aaa6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 800aa98:	4b09      	ldr	r3, [pc, #36]	; (800aac0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 800aa9a:	4a0a      	ldr	r2, [pc, #40]	; (800aac4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 800aa9c:	f44f 7183 	mov.w	r1, #262	; 0x106
 800aaa0:	4809      	ldr	r0, [pc, #36]	; (800aac8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800aaa2:	f004 fed5 	bl	800f850 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f844 	bl	800ab34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 800aaac:	4603      	mov	r3, r0
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 f82b 	bl	800ab0c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800aab6:	4603      	mov	r3, r0
  }
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	08015f88 	.word	0x08015f88
 800aac4:	080161d0 	.word	0x080161d0
 800aac8:	08016064 	.word	0x08016064

0800aacc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800aad8:	887b      	ldrh	r3, [r7, #2]
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7f6 faf9 	bl	80010d4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800aae2:	4603      	mov	r3, r0
 800aae4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	89fb      	ldrh	r3, [r7, #14]
 800aaea:	4413      	add	r3, r2
 800aaec:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800aaee:	89fb      	ldrh	r3, [r7, #14]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d006      	beq.n	800ab02 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800aaf4:	68b8      	ldr	r0, [r7, #8]
 800aaf6:	f7f6 ff89 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800aafa:	4602      	mov	r2, r0
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	4413      	add	r3, r2
                        : nullptr;
 800ab00:	e000      	b.n	800ab04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ab02:	2300      	movs	r3, #0
  }
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7f6 ff73 	bl	8001a0c <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800ab26:	4602      	mov	r2, r0
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4413      	add	r3, r2
  }
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3304      	adds	r3, #4
  }
 800ab40:	4618      	mov	r0, r3
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d20e      	bcs.n	800ab86 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	1c5a      	adds	r2, r3, #1
 800ab72:	617a      	str	r2, [r7, #20]
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	7812      	ldrb	r2, [r2, #0]
 800ab78:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	1e5a      	subs	r2, r3, #1
 800ab7e:	613a      	str	r2, [r7, #16]
 800ab80:	7bfa      	ldrb	r2, [r7, #15]
 800ab82:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800ab84:	e7ec      	b.n	800ab60 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800ab86:	687b      	ldr	r3, [r7, #4]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
  char* current = main;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	3301      	adds	r3, #1
 800abb0:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800abb2:	e7f7      	b.n	800aba4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00e      	beq.n	800abe4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d20a      	bcs.n	800abe4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	701a      	strb	r2, [r3, #0]
    ++current;
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	3301      	adds	r3, #1
 800abda:	617b      	str	r3, [r7, #20]
    ++to_append;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	3301      	adds	r3, #1
 800abe0:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800abe2:	e7ec      	b.n	800abbe <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	2200      	movs	r2, #0
 800abe8:	701a      	strb	r2, [r3, #0]
  return current;
 800abea:	697b      	ldr	r3, [r7, #20]
}
 800abec:	4618      	mov	r0, r3
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b088      	sub	sp, #32
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac10:	fb02 f201 	mul.w	r2, r2, r1
 800ac14:	1a9b      	subs	r3, r3, r2
 800ac16:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2b09      	cmp	r3, #9
 800ac1c:	dc04      	bgt.n	800ac28 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	3330      	adds	r3, #48	; 0x30
 800ac24:	77fb      	strb	r3, [r7, #31]
 800ac26:	e003      	b.n	800ac30 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	3357      	adds	r3, #87	; 0x57
 800ac2e:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	60ba      	str	r2, [r7, #8]
 800ac36:	7ffa      	ldrb	r2, [r7, #31]
 800ac38:	701a      	strb	r2, [r3, #0]
    i /= base;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac42:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d000      	beq.n	800ac4c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800ac4a:	e7dd      	b.n	800ac08 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	69b8      	ldr	r0, [r7, #24]
 800ac56:	f7ff ff79 	bl	800ab4c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 800ac5a:	68bb      	ldr	r3, [r7, #8]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3720      	adds	r7, #32
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	da07      	bge.n	800ac88 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	603a      	str	r2, [r7, #0]
 800ac7e:	222d      	movs	r2, #45	; 0x2d
 800ac80:	701a      	strb	r2, [r3, #0]
    u = -u;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	425b      	negs	r3, r3
 800ac86:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800ac88:	220a      	movs	r2, #10
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7ff ffb3 	bl	800abf8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800ac92:	4603      	mov	r3, r0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b090      	sub	sp, #64	; 0x40
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800aca8:	f107 0310 	add.w	r3, r7, #16
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7ff ffd8 	bl	800ac64 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800acb4:	f107 0310 	add.w	r3, r7, #16
 800acb8:	461a      	mov	r2, r3
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7ff ff69 	bl	800ab94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800acc2:	4603      	mov	r3, r0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3740      	adds	r7, #64	; 0x40
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800accc:	b580      	push	{r7, lr}
 800acce:	b090      	sub	sp, #64	; 0x40
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
 800acd8:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800acda:	f107 0310 	add.w	r3, r7, #16
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff ff88 	bl	800abf8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 800ace8:	f107 0310 	add.w	r3, r7, #16
 800acec:	461a      	mov	r2, r3
 800acee:	68b9      	ldr	r1, [r7, #8]
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff ff4f 	bl	800ab94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800acf6:	4603      	mov	r3, r0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3740      	adds	r7, #64	; 0x40
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800ad00:	b590      	push	{r4, r7, lr}
 800ad02:	b09b      	sub	sp, #108	; 0x6c
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	ed87 0a01 	vstr	s0, [r7, #4]
 800ad0a:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	332f      	adds	r3, #47	; 0x2f
 800ad14:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 800ad16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 800ad1c:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800ad20:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800ad22:	2317      	movs	r3, #23
 800ad24:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800ad26:	237f      	movs	r3, #127	; 0x7f
 800ad28:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 800ad2a:	4b6a      	ldr	r3, [pc, #424]	; (800aed4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad2e:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 800ad30:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	0ddb      	lsrs	r3, r3, #23
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800ad3a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ad42:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	da05      	bge.n	800ad56 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 800ad4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad4c:	222d      	movs	r2, #45	; 0x2d
 800ad4e:	701a      	strb	r2, [r3, #0]
    current += 1;
 800ad50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad52:	3301      	adds	r3, #1
 800ad54:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800ad56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	2b80      	cmp	r3, #128	; 0x80
 800ad60:	d118      	bne.n	800ad94 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800ad62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 800ad68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	4a5a      	ldr	r2, [pc, #360]	; (800aed8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 800ad70:	4619      	mov	r1, r3
 800ad72:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ad74:	f7ff ff0e 	bl	800ab94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800ad78:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800ad7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad7c:	e0a5      	b.n	800aeca <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800ad7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	4a55      	ldr	r2, [pc, #340]	; (800aedc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800ad86:	4619      	mov	r1, r3
 800ad88:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ad8a:	f7ff ff03 	bl	800ab94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800ad8e:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800ad90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad92:	e09a      	b.n	800aeca <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800ad94:	230d      	movs	r3, #13
 800ad96:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 800ad98:	4b51      	ldr	r3, [pc, #324]	; (800aee0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 800ad9a:	f107 040c 	add.w	r4, r7, #12
 800ad9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ada0:	c407      	stmia	r4!, {r0, r1, r2}
 800ada2:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800ada4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada6:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800ada8:	2300      	movs	r3, #0
 800adaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adae:	2b0c      	cmp	r3, #12
 800adb0:	dc0f      	bgt.n	800add2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800adb2:	f107 020c 	add.w	r2, r7, #12
 800adb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adb8:	4413      	add	r3, r2
 800adba:	f993 3000 	ldrsb.w	r3, [r3]
 800adbe:	461a      	mov	r2, r3
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	40d3      	lsrs	r3, r2
 800adc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800adc6:	4413      	add	r3, r2
 800adc8:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 800adca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adcc:	3301      	adds	r3, #1
 800adce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800add0:	e7ec      	b.n	800adac <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800add2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add4:	2231      	movs	r2, #49	; 0x31
 800add6:	701a      	strb	r2, [r3, #0]
  current += 1;
 800add8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adda:	3301      	adds	r3, #1
 800addc:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800adde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ade0:	222e      	movs	r2, #46	; 0x2e
 800ade2:	701a      	strb	r2, [r3, #0]
  current += 1;
 800ade4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ade6:	3301      	adds	r3, #1
 800ade8:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 800adea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adec:	2200      	movs	r2, #0
 800adee:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800adf0:	2307      	movs	r3, #7
 800adf2:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 800adf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2b07      	cmp	r3, #7
 800adfc:	dc01      	bgt.n	800ae02 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800adfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae00:	e063      	b.n	800aeca <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800ae02:	2301      	movs	r3, #1
 800ae04:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae08:	2b06      	cmp	r3, #6
 800ae0a:	dc08      	bgt.n	800ae1e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 800ae0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae10:	4413      	add	r3, r2
 800ae12:	2230      	movs	r2, #48	; 0x30
 800ae14:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800ae16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae18:	3301      	adds	r3, #1
 800ae1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae1c:	e7f3      	b.n	800ae06 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 800ae1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae20:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800ae22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae26:	1ad1      	subs	r1, r2, r3
 800ae28:	230a      	movs	r3, #10
 800ae2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae2c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ae2e:	f7ff ff4d 	bl	800accc <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800ae32:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800ae34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	f1c3 0307 	rsb	r3, r3, #7
 800ae42:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800ae44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae46:	2230      	movs	r2, #48	; 0x30
 800ae48:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d018      	beq.n	800ae82 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 800ae50:	2300      	movs	r3, #0
 800ae52:	657b      	str	r3, [r7, #84]	; 0x54
 800ae54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	da0f      	bge.n	800ae7c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 800ae5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae66:	4413      	add	r3, r2
 800ae68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae6a:	7812      	ldrb	r2, [r2, #0]
 800ae6c:	701a      	strb	r2, [r3, #0]
      *current = '0';
 800ae6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae70:	2230      	movs	r2, #48	; 0x30
 800ae72:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800ae74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae76:	3301      	adds	r3, #1
 800ae78:	657b      	str	r3, [r7, #84]	; 0x54
 800ae7a:	e7eb      	b.n	800ae54 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 800ae7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae7e:	3307      	adds	r3, #7
 800ae80:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800ae82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae84:	3b01      	subs	r3, #1
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b30      	cmp	r3, #48	; 0x30
 800ae8a:	d108      	bne.n	800ae9e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 800ae8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d203      	bcs.n	800ae9e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800ae96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800ae9c:	e7f1      	b.n	800ae82 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800ae9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aea0:	2200      	movs	r2, #0
 800aea2:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800aea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	4a0e      	ldr	r2, [pc, #56]	; (800aee4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 800aeac:	4619      	mov	r1, r3
 800aeae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800aeb0:	f7ff fe70 	bl	800ab94 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800aeb4:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800aeb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aeb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aebe:	4619      	mov	r1, r3
 800aec0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800aec2:	f7ff feeb 	bl	800ac9c <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 800aec6:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 800aec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	376c      	adds	r7, #108	; 0x6c
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd90      	pop	{r4, r7, pc}
 800aed2:	bf00      	nop
 800aed4:	007fffff 	.word	0x007fffff
 800aed8:	080163d0 	.word	0x080163d0
 800aedc:	080163d4 	.word	0x080163d4
 800aee0:	080163dc 	.word	0x080163dc
 800aee4:	080163d8 	.word	0x080163d8

0800aee8 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800aef2:	6879      	ldr	r1, [r7, #4]
 800aef4:	6838      	ldr	r0, [r7, #0]
 800aef6:	f7ff feb5 	bl	800ac64 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 800aefa:	4602      	mov	r2, r0
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	1ad3      	subs	r3, r2, r3
}
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800af12:	220a      	movs	r2, #10
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	6838      	ldr	r0, [r7, #0]
 800af18:	f7ff fe6e 	bl	800abf8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800af1c:	4602      	mov	r2, r0
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	1ad3      	subs	r3, r2, r3
}
 800af22:	4618      	mov	r0, r3
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800af34:	2210      	movs	r2, #16
 800af36:	6879      	ldr	r1, [r7, #4]
 800af38:	6838      	ldr	r0, [r7, #0]
 800af3a:	f7ff fe5d 	bl	800abf8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800af3e:	4602      	mov	r2, r0
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	1ad3      	subs	r3, r2, r3
}
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	ed97 0a00 	vldr	s0, [r7]
 800af5e:	f7ff fecf 	bl	800ad00 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 800af62:	4602      	mov	r2, r0
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	1ad3      	subs	r3, r2, r3
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 800af70:	b590      	push	{r4, r7, lr}
 800af72:	b08b      	sub	sp, #44	; 0x2c
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	3b01      	subs	r3, #1
 800af8a:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 8151 	beq.w	800b238 <MicroVsnprintf+0x2c8>
 800af96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	f280 814c 	bge.w	800b238 <MicroVsnprintf+0x2c8>
    if (*current == '%') {
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b25      	cmp	r3, #37	; 0x25
 800afa6:	f040 813b 	bne.w	800b220 <MicroVsnprintf+0x2b0>
      current++;
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	3301      	adds	r3, #1
 800afae:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b25      	cmp	r3, #37	; 0x25
 800afb6:	f000 80e2 	beq.w	800b17e <MicroVsnprintf+0x20e>
 800afba:	2b25      	cmp	r3, #37	; 0x25
 800afbc:	dbe6      	blt.n	800af8c <MicroVsnprintf+0x1c>
 800afbe:	2b78      	cmp	r3, #120	; 0x78
 800afc0:	dce4      	bgt.n	800af8c <MicroVsnprintf+0x1c>
 800afc2:	2b63      	cmp	r3, #99	; 0x63
 800afc4:	dbe2      	blt.n	800af8c <MicroVsnprintf+0x1c>
 800afc6:	3b63      	subs	r3, #99	; 0x63
 800afc8:	2b15      	cmp	r3, #21
 800afca:	d8df      	bhi.n	800af8c <MicroVsnprintf+0x1c>
 800afcc:	a201      	add	r2, pc, #4	; (adr r2, 800afd4 <MicroVsnprintf+0x64>)
 800afce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd2:	bf00      	nop
 800afd4:	0800b197 	.word	0x0800b197
 800afd8:	0800b02d 	.word	0x0800b02d
 800afdc:	0800af8d 	.word	0x0800af8d
 800afe0:	0800b113 	.word	0x0800b113
 800afe4:	0800af8d 	.word	0x0800af8d
 800afe8:	0800af8d 	.word	0x0800af8d
 800afec:	0800af8d 	.word	0x0800af8d
 800aff0:	0800af8d 	.word	0x0800af8d
 800aff4:	0800af8d 	.word	0x0800af8d
 800aff8:	0800af8d 	.word	0x0800af8d
 800affc:	0800af8d 	.word	0x0800af8d
 800b000:	0800af8d 	.word	0x0800af8d
 800b004:	0800af8d 	.word	0x0800af8d
 800b008:	0800af8d 	.word	0x0800af8d
 800b00c:	0800af8d 	.word	0x0800af8d
 800b010:	0800af8d 	.word	0x0800af8d
 800b014:	0800b1d5 	.word	0x0800b1d5
 800b018:	0800af8d 	.word	0x0800af8d
 800b01c:	0800b06f 	.word	0x0800b06f
 800b020:	0800af8d 	.word	0x0800af8d
 800b024:	0800af8d 	.word	0x0800af8d
 800b028:	0800b0b1 	.word	0x0800b0b1
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800b02c:	69ba      	ldr	r2, [r7, #24]
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	2b0a      	cmp	r3, #10
 800b034:	dc09      	bgt.n	800b04a <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
 800b036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	627a      	str	r2, [r7, #36]	; 0x24
 800b03c:	461a      	mov	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	4413      	add	r3, r2
 800b042:	2200      	movs	r2, #0
 800b044:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	e0ff      	b.n	800b24a <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	18d0      	adds	r0, r2, r3
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	1d1a      	adds	r2, r3, #4
 800b054:	603a      	str	r2, [r7, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4619      	mov	r1, r3
 800b05a:	f7ff ff45 	bl	800aee8 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 800b05e:	4602      	mov	r2, r0
          output_index +=
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	4413      	add	r3, r2
 800b064:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	3301      	adds	r3, #1
 800b06a:	623b      	str	r3, [r7, #32]
          break;
 800b06c:	e0e3      	b.n	800b236 <MicroVsnprintf+0x2c6>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800b06e:	69ba      	ldr	r2, [r7, #24]
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	2b0a      	cmp	r3, #10
 800b076:	dc09      	bgt.n	800b08c <MicroVsnprintf+0x11c>
            output[output_index++] = '\0';
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	1c5a      	adds	r2, r3, #1
 800b07c:	627a      	str	r2, [r7, #36]	; 0x24
 800b07e:	461a      	mov	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	4413      	add	r3, r2
 800b084:	2200      	movs	r2, #0
 800b086:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	e0de      	b.n	800b24a <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	18d0      	adds	r0, r2, r3
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	1d1a      	adds	r2, r3, #4
 800b096:	603a      	str	r2, [r7, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4619      	mov	r1, r3
 800b09c:	f7ff ff34 	bl	800af08 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800b0a0:	4602      	mov	r2, r0
          output_index +=
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	4413      	add	r3, r2
 800b0a6:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	623b      	str	r3, [r7, #32]
          break;
 800b0ae:	e0c2      	b.n	800b236 <MicroVsnprintf+0x2c6>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	dc09      	bgt.n	800b0ce <MicroVsnprintf+0x15e>
            output[output_index++] = '\0';
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	1c5a      	adds	r2, r3, #1
 800b0be:	627a      	str	r2, [r7, #36]	; 0x24
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	e0bd      	b.n	800b24a <MicroVsnprintf+0x2da>
          }
          output[output_index++] = '0';
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	1c5a      	adds	r2, r3, #1
 800b0d2:	627a      	str	r2, [r7, #36]	; 0x24
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	4413      	add	r3, r2
 800b0da:	2230      	movs	r2, #48	; 0x30
 800b0dc:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	1c5a      	adds	r2, r3, #1
 800b0e2:	627a      	str	r2, [r7, #36]	; 0x24
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	2278      	movs	r2, #120	; 0x78
 800b0ec:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	18d0      	adds	r0, r2, r3
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	1d1a      	adds	r2, r3, #4
 800b0f8:	603a      	str	r2, [r7, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	f7ff ff14 	bl	800af2a <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800b102:	4602      	mov	r2, r0
          output_index +=
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	4413      	add	r3, r2
 800b108:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	3301      	adds	r3, #1
 800b10e:	623b      	str	r3, [r7, #32]
          break;
 800b110:	e091      	b.n	800b236 <MicroVsnprintf+0x2c6>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	ee07 3a90 	vmov	s15, r3
 800b11c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b120:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800b124:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12c:	d509      	bpl.n	800b142 <MicroVsnprintf+0x1d2>
            output[output_index++] = '\0';
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	627a      	str	r2, [r7, #36]	; 0x24
 800b134:	461a      	mov	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	4413      	add	r3, r2
 800b13a:	2200      	movs	r2, #0
 800b13c:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	e083      	b.n	800b24a <MicroVsnprintf+0x2da>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	18d4      	adds	r4, r2, r3
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	3307      	adds	r3, #7
 800b14c:	f023 0307 	bic.w	r3, r3, #7
 800b150:	f103 0208 	add.w	r2, r3, #8
 800b154:	603a      	str	r2, [r7, #0]
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	4610      	mov	r0, r2
 800b15c:	4619      	mov	r1, r3
 800b15e:	f7f5 fd4d 	bl	8000bfc <__aeabi_d2f>
 800b162:	4603      	mov	r3, r0
 800b164:	ee00 3a10 	vmov	s0, r3
 800b168:	4620      	mov	r0, r4
 800b16a:	f7ff feef 	bl	800af4c <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800b16e:	4602      	mov	r2, r0
          output_index +=
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	4413      	add	r3, r2
 800b174:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	3301      	adds	r3, #1
 800b17a:	623b      	str	r3, [r7, #32]
          break;
 800b17c:	e05b      	b.n	800b236 <MicroVsnprintf+0x2c6>
        case '%':
          output[output_index++] = *current++;
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	623a      	str	r2, [r7, #32]
 800b184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b186:	1c51      	adds	r1, r2, #1
 800b188:	6279      	str	r1, [r7, #36]	; 0x24
 800b18a:	4611      	mov	r1, r2
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	440a      	add	r2, r1
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	7013      	strb	r3, [r2, #0]
          break;
 800b194:	e04f      	b.n	800b236 <MicroVsnprintf+0x2c6>
        case 'c':
          if (usable_length - output_index < 1) {
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	dc09      	bgt.n	800b1b4 <MicroVsnprintf+0x244>
            output[output_index++] = '\0';
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	627a      	str	r2, [r7, #36]	; 0x24
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	701a      	strb	r2, [r3, #0]
            return output_index;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	e04a      	b.n	800b24a <MicroVsnprintf+0x2da>
          }
          output[output_index++] = va_arg(args, int32_t);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	1d1a      	adds	r2, r3, #4
 800b1b8:	603a      	str	r2, [r7, #0]
 800b1ba:	6819      	ldr	r1, [r3, #0]
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	627a      	str	r2, [r7, #36]	; 0x24
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	b2ca      	uxtb	r2, r1
 800b1ca:	701a      	strb	r2, [r3, #0]
          current++;
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	623b      	str	r3, [r7, #32]
          break;
 800b1d2:	e030      	b.n	800b236 <MicroVsnprintf+0x2c6>
        case 's':
          char* string = va_arg(args, char*);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	1d1a      	adds	r2, r3, #4
 800b1d8:	603a      	str	r2, [r7, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	4413      	add	r3, r2
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	dd14      	ble.n	800b218 <MicroVsnprintf+0x2a8>
                 string[string_idx] != '\0') {
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00e      	beq.n	800b218 <MicroVsnprintf+0x2a8>
            output[output_index++] = string[string_idx++];
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	61fa      	str	r2, [r7, #28]
 800b200:	461a      	mov	r2, r3
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	441a      	add	r2, r3
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	1c59      	adds	r1, r3, #1
 800b20a:	6279      	str	r1, [r7, #36]	; 0x24
 800b20c:	4619      	mov	r1, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	440b      	add	r3, r1
 800b212:	7812      	ldrb	r2, [r2, #0]
 800b214:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800b216:	e7e4      	b.n	800b1e2 <MicroVsnprintf+0x272>
          }
          current++;
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	3301      	adds	r3, #1
 800b21c:	623b      	str	r3, [r7, #32]
 800b21e:	e6b5      	b.n	800af8c <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 800b220:	6a3b      	ldr	r3, [r7, #32]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	623a      	str	r2, [r7, #32]
 800b226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b228:	1c51      	adds	r1, r2, #1
 800b22a:	6279      	str	r1, [r7, #36]	; 0x24
 800b22c:	4611      	mov	r1, r2
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	440a      	add	r2, r1
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800b236:	e6a9      	b.n	800af8c <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	627a      	str	r2, [r7, #36]	; 0x24
 800b23e:	461a      	mov	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	4413      	add	r3, r2
 800b244:	2200      	movs	r2, #0
 800b246:	701a      	strb	r2, [r3, #0]
  return output_index;
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	372c      	adds	r7, #44	; 0x2c
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd90      	pop	{r4, r7, pc}
 800b252:	bf00      	nop

0800b254 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  int result = 1;
 800b25c:	2301      	movs	r3, #1
 800b25e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800b260:	2300      	movs	r3, #0
 800b262:	60bb      	str	r3, [r7, #8]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	da0c      	bge.n	800b288 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	fb02 f303 	mul.w	r3, r2, r3
 800b27e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	3301      	adds	r3, #1
 800b284:	60bb      	str	r3, [r7, #8]
 800b286:	e7ed      	b.n	800b264 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 800b288:	68fb      	ldr	r3, [r7, #12]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
	...

0800b298 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
 800b2a2:	4a11      	ldr	r2, [pc, #68]	; (800b2e8 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	601a      	str	r2, [r3, #0]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	605a      	str	r2, [r3, #4]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	689a      	ldr	r2, [r3, #8]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	609a      	str	r2, [r3, #8]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	68da      	ldr	r2, [r3, #12]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	60da      	str	r2, [r3, #12]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	691a      	ldr	r2, [r3, #16]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	611a      	str	r2, [r3, #16]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	695a      	ldr	r2, [r3, #20]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	615a      	str	r2, [r3, #20]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	699a      	ldr	r2, [r3, #24]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	619a      	str	r2, [r3, #24]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	08017278 	.word	0x08017278

0800b2ec <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 800b2fa:	4a0e      	ldr	r2, [pc, #56]	; (800b334 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	601a      	str	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	605a      	str	r2, [r3, #4]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	609a      	str	r2, [r3, #8]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	60da      	str	r2, [r3, #12]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	611a      	str	r2, [r3, #16]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	615a      	str	r2, [r3, #20]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	689a      	ldr	r2, [r3, #8]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	619a      	str	r2, [r3, #24]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4618      	mov	r0, r3
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	08017278 	.word	0x08017278

0800b338 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	4413      	add	r3, r2
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	68b9      	ldr	r1, [r7, #8]
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f7ff ffcb 	bl	800b2ec <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	4618      	mov	r0, r3
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800b360:	b590      	push	{r4, r7, lr}
 800b362:	b08d      	sub	sp, #52	; 0x34
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800b372:	f004 fa66 	bl	800f842 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d101      	bne.n	800b380 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 800b37c:	f004 fa61 	bl	800f842 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800b380:	f107 0010 	add.w	r0, r7, #16
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	68f9      	ldr	r1, [r7, #12]
 800b38a:	f7ff ffd5 	bl	800b338 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 800b38e:	f107 0310 	add.w	r3, r7, #16
 800b392:	2204      	movs	r2, #4
 800b394:	211c      	movs	r1, #28
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f87c 	bl	800b494 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 800b39c:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	201c      	movs	r0, #28
 800b3a4:	f7f9 fa61 	bl	800486a <_ZnwjPv>
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	f107 0310 	add.w	r3, r7, #16
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f7ff ff71 	bl	800b298 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800b3b6:	f107 0310 	add.w	r3, r7, #16
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 f806 	bl	800b3cc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 800b3c0:	4623      	mov	r3, r4
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3734      	adds	r7, #52	; 0x34
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd90      	pop	{r4, r7, pc}
	...

0800b3cc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	4a04      	ldr	r2, [pc, #16]	; (800b3e8 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	08017278 	.word	0x08017278

0800b3ec <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7ff ffe9 	bl	800b3cc <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800b3fa:	211c      	movs	r1, #28
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f003 ffdc 	bl	800f3ba <_ZdlPvj>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af02      	add	r7, sp, #8
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	691a      	ldr	r2, [r3, #16]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	429a      	cmp	r2, r3
 800b422:	d007      	beq.n	800b434 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	4918      	ldr	r1, [pc, #96]	; (800b48c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f9 f9ea 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 800b430:	2301      	movs	r3, #1
 800b432:	e026      	b.n	800b482 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fb ff94 	bl	8007368 <_ZN6tflite14AlignPointerUpEPhj>
 800b440:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	695a      	ldr	r2, [r3, #20]
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	429a      	cmp	r2, r3
 800b452:	d20c      	bcs.n	800b46e <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6858      	ldr	r0, [r3, #4]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	490a      	ldr	r1, [pc, #40]	; (800b490 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 800b466:	f7f9 f9cd 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e009      	b.n	800b482 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	441a      	add	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	691a      	ldr	r2, [r3, #16]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	08016400 	.word	0x08016400
 800b490:	08016458 	.word	0x08016458

0800b494 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af02      	add	r7, sp, #8
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	695a      	ldr	r2, [r3, #20]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	425b      	negs	r3, r3
 800b4a8:	4413      	add	r3, r2
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fb ff74 	bl	800739a <_ZN6tflite16AlignPointerDownEPhj>
 800b4b2:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d212      	bcs.n	800b4e4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	691a      	ldr	r2, [r3, #16]
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6858      	ldr	r0, [r3, #4]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	1ad2      	subs	r2, r2, r3
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	4906      	ldr	r1, [pc, #24]	; (800b4f4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 800b4dc:	f7f9 f992 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	e003      	b.n	800b4ec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800b4ea:	697b      	ldr	r3, [r7, #20]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	0801649c 	.word	0x0801649c

0800b4f8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b088      	sub	sp, #32
 800b4fc:	af02      	add	r7, sp, #8
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	699b      	ldr	r3, [r3, #24]
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fb ff2c 	bl	8007368 <_ZN6tflite14AlignPointerUpEPhj>
 800b510:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	695a      	ldr	r2, [r3, #20]
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800b51c:	693a      	ldr	r2, [r7, #16]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	429a      	cmp	r2, r3
 800b522:	d20c      	bcs.n	800b53e <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6858      	ldr	r0, [r3, #4]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	4907      	ldr	r1, [pc, #28]	; (800b554 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 800b536:	f7f9 f965 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e005      	b.n	800b54a <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	441a      	add	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	619a      	str	r2, [r3, #24]
  return aligned_result;
 800b548:	697b      	ldr	r3, [r7, #20]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3718      	adds	r7, #24
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	080164e8 	.word	0x080164e8

0800b558 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	691a      	ldr	r2, [r3, #16]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	619a      	str	r2, [r3, #24]
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	4618      	mov	r0, r3
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fb fee3 	bl	8007368 <_ZN6tflite14AlignPointerUpEPhj>
 800b5a2:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fb fef5 	bl	800739a <_ZN6tflite16AlignPointerDownEPhj>
 800b5b0:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	1ad3      	subs	r3, r2, r3
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800b5c0:	b480      	push	{r7}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800b5c8:	f04f 0201 	mov.w	r2, #1
 800b5cc:	f04f 0300 	mov.w	r3, #0
 800b5d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	da1b      	bge.n	800b61a <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b5f2:	6979      	ldr	r1, [r7, #20]
 800b5f4:	fb02 f001 	mul.w	r0, r2, r1
 800b5f8:	6939      	ldr	r1, [r7, #16]
 800b5fa:	fb03 f101 	mul.w	r1, r3, r1
 800b5fe:	4401      	add	r1, r0
 800b600:	6938      	ldr	r0, [r7, #16]
 800b602:	fba0 2302 	umull	r2, r3, r0, r2
 800b606:	4419      	add	r1, r3
 800b608:	460b      	mov	r3, r1
 800b60a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800b60e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	3301      	adds	r3, #1
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	e7de      	b.n	800b5d8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800b61a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800b61e:	4610      	mov	r0, r2
 800b620:	4619      	mov	r1, r3
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800b63e:	f004 f900 	bl	800f842 <abort>
  TFLITE_DCHECK(node != nullptr);
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d101      	bne.n	800b64c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800b648:	f004 f8fb 	bl	800f842 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	6819      	ldr	r1, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	440b      	add	r3, r1
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	4619      	mov	r1, r3
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	4790      	blx	r2
 800b662:	4603      	mov	r3, r0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff ffd5 	bl	800b62c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b682:	4603      	mov	r3, r0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800b69e:	f004 f8d0 	bl	800f842 <abort>
  TFLITE_DCHECK(node != nullptr);
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800b6a8:	f004 f8cb 	bl	800f842 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	6859      	ldr	r1, [r3, #4]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	440b      	add	r3, r1
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	4790      	blx	r2
 800b6c2:	4603      	mov	r3, r0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 800b6da:	f004 f8b2 	bl	800f842 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b6ea:	b480      	push	{r7}
 800b6ec:	b083      	sub	sp, #12
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	e000      	b.n	800b700 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800b71a:	f004 f892 	bl	800f842 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b72a:	b480      	push	{r7}
 800b72c:	b083      	sub	sp, #12
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	e000      	b.n	800b740 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	da01      	bge.n	800b760 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800b75c:	f004 f871 	bl	800f842 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	db01      	blt.n	800b76e <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800b76a:	f004 f86a 	bl	800f842 <abort>
    return dims_[i];
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	685b      	ldr	r3, [r3, #4]
  }
 800b778:	4618      	mov	r0, r3
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	3304      	adds	r3, #4
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	4b04      	ldr	r3, [pc, #16]	; (800b7b0 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eeb0 0a67 	vmov.f32	s0, s15
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	7f7fffff 	.word	0x7f7fffff

0800b7b4 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800b7b4:	b480      	push	{r7}
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800b7bc:	ee07 3a90 	vmov	s15, r3
 800b7c0:	eeb0 0a67 	vmov.f32	s0, s15
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	da01      	bge.n	800b7ea <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	e000      	b.n	800b7ec <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 800b7ea:	687b      	ldr	r3, [r7, #4]
    }
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	ed87 0a03 	vstr	s0, [r7, #12]
 800b802:	edc7 0a02 	vstr	s1, [r7, #8]
 800b806:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800b80a:	f107 0208 	add.w	r2, r7, #8
 800b80e:	f107 030c 	add.w	r3, r7, #12
 800b812:	4611      	mov	r1, r2
 800b814:	4618      	mov	r0, r3
 800b816:	f7fa fdf7 	bl	8006408 <_ZSt3maxIfERKT_S2_S2_>
 800b81a:	4602      	mov	r2, r0
 800b81c:	1d3b      	adds	r3, r7, #4
 800b81e:	4619      	mov	r1, r3
 800b820:	4610      	mov	r0, r2
 800b822:	f7fa fdd8 	bl	80063d6 <_ZSt3minIfERKT_S2_S2_>
 800b826:	4603      	mov	r3, r0
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	ee07 3a90 	vmov	s15, r3
}
 800b82e:	eeb0 0a67 	vmov.f32	s0, s15
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	4603      	mov	r3, r0
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800b846:	7bfb      	ldrb	r3, [r7, #15]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d10b      	bne.n	800b864 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	f04f 0200 	mov.w	r2, #0
 800b852:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800b854:	f7ff ffa0 	bl	800b798 <_ZNSt14numeric_limitsIfE3maxEv>
 800b858:	eef0 7a40 	vmov.f32	s15, s0
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800b862:	e023      	b.n	800b8ac <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	2b03      	cmp	r3, #3
 800b868:	d107      	bne.n	800b87a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	f04f 0200 	mov.w	r2, #0
 800b870:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a0f      	ldr	r2, [pc, #60]	; (800b8b4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800b876:	601a      	str	r2, [r3, #0]
}
 800b878:	e018      	b.n	800b8ac <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d107      	bne.n	800b890 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	4a0d      	ldr	r2, [pc, #52]	; (800b8b8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800b884:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b88c:	601a      	str	r2, [r3, #0]
}
 800b88e:	e00d      	b.n	800b8ac <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800b890:	f7ff ff90 	bl	800b7b4 <_ZNSt14numeric_limitsIfE6lowestEv>
 800b894:	eef0 7a40 	vmov.f32	s15, s0
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800b89e:	f7ff ff7b 	bl	800b798 <_ZNSt14numeric_limitsIfE3maxEv>
 800b8a2:	eef0 7a40 	vmov.f32	s15, s0
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	edc3 7a00 	vstr	s15, [r3]
}
 800b8ac:	bf00      	nop
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	40c00000 	.word	0x40c00000
 800b8b8:	bf800000 	.word	0xbf800000

0800b8bc <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 800b8ca:	f003 ffba 	bl	800f842 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b8da:	b480      	push	{r7}
 800b8dc:	b083      	sub	sp, #12
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	e000      	b.n	800b8f0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800b916:	b480      	push	{r7}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 800b93e:	f003 ff80 	bl	800f842 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 800b94e:	b590      	push	{r4, r7, lr}
 800b950:	b087      	sub	sp, #28
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	607a      	str	r2, [r7, #4]
 800b95a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b95c:	68b9      	ldr	r1, [r7, #8]
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f7ff fef4 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b964:	4604      	mov	r4, r0
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff feef 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b96e:	4603      	mov	r3, r0
 800b970:	429c      	cmp	r4, r3
 800b972:	d001      	beq.n	800b978 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800b974:	f003 ff65 	bl	800f842 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800b978:	68b9      	ldr	r1, [r7, #8]
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f7ff fee6 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b980:	4603      	mov	r3, r0
 800b982:	613b      	str	r3, [r7, #16]
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff fee0 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800b98c:	4603      	mov	r3, r0
 800b98e:	617b      	str	r3, [r7, #20]
 800b990:	f107 0214 	add.w	r2, r7, #20
 800b994:	f107 0310 	add.w	r3, r7, #16
 800b998:	4611      	mov	r1, r2
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fa fe46 	bl	800662c <_ZSt3minIlERKT_S2_S2_>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	681b      	ldr	r3, [r3, #0]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	371c      	adds	r7, #28
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd90      	pop	{r4, r7, pc}

0800b9ac <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff fe01 	bl	800b5c0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
}
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7fb fc96 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b9dc:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	db03      	blt.n	800b9ec <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	db01      	blt.n	800b9f0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800b9ec:	f003 ff29 	bl	800f842 <abort>
  const auto* dims_data = shape.DimsData();
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7ff fec5 	bl	800b780 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800b9f6:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	613b      	str	r3, [r7, #16]
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	da12      	bge.n	800ba2e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d005      	beq.n	800ba1c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	4413      	add	r3, r2
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	e000      	b.n	800ba1e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	fb03 f302 	mul.w	r3, r3, r2
 800ba24:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	613b      	str	r3, [r7, #16]
 800ba2c:	e7e8      	b.n	800ba00 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 800ba2e:	697b      	ldr	r3, [r7, #20]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3718      	adds	r7, #24
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800ba38:	b590      	push	{r4, r7, lr}
 800ba3a:	b091      	sub	sp, #68	; 0x44
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6a1b      	ldr	r3, [r3, #32]
 800ba50:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800ba52:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ba54:	f7fb fc58 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ba58:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800ba5a:	6838      	ldr	r0, [r7, #0]
 800ba5c:	f7fb fc54 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ba60:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	3b01      	subs	r3, #1
 800ba66:	4619      	mov	r1, r3
 800ba68:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ba6a:	f7ff ffaf 	bl	800b9cc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800ba6e:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	1e99      	subs	r1, r3, #2
 800ba74:	6a3b      	ldr	r3, [r7, #32]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba7a:	6838      	ldr	r0, [r7, #0]
 800ba7c:	f7ff ff67 	bl	800b94e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ba80:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	4619      	mov	r1, r3
 800ba88:	6838      	ldr	r0, [r7, #0]
 800ba8a:	f7ff fe5f 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800ba8e:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800ba90:	2300      	movs	r3, #0
 800ba92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	da5f      	bge.n	800bb5c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800baa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	da55      	bge.n	800bb54 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 800baa8:	f04f 0300 	mov.w	r3, #0
 800baac:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800baae:	2300      	movs	r3, #0
 800bab0:	633b      	str	r3, [r7, #48]	; 0x30
 800bab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	da21      	bge.n	800bafe <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800baba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	fb02 f203 	mul.w	r2, r2, r3
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	4413      	add	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4413      	add	r3, r2
 800bacc:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800bad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad2:	693a      	ldr	r2, [r7, #16]
 800bad4:	fb02 f203 	mul.w	r2, r2, r3
 800bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bada:	4413      	add	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bae0:	4413      	add	r3, r2
 800bae2:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800bae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800baee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baf2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	3301      	adds	r3, #1
 800bafa:	633b      	str	r3, [r7, #48]	; 0x30
 800bafc:	e7d9      	b.n	800bab2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 800bafe:	f04f 0300 	mov.w	r3, #0
 800bb02:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800bb04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d005      	beq.n	800bb16 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb10:	4413      	add	r3, r2
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800bb16:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bb1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb26:	fb02 f203 	mul.w	r2, r2, r3
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	4413      	add	r3, r2
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb32:	18d4      	adds	r4, r2, r3
 800bb34:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800bb38:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800bb3c:	eeb0 0a67 	vmov.f32	s0, s15
 800bb40:	f7ff fe5a 	bl	800b7f8 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800bb44:	eef0 7a40 	vmov.f32	s15, s0
 800bb48:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4e:	3301      	adds	r3, #1
 800bb50:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb52:	e7a5      	b.n	800baa0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 800bb54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb56:	3301      	adds	r3, #1
 800bb58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb5a:	e79b      	b.n	800ba94 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800bb5c:	bf00      	nop
 800bb5e:	3744      	adds	r7, #68	; 0x44
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd90      	pop	{r4, r7, pc}

0800bb64 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b096      	sub	sp, #88	; 0x58
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800bb9c:	6838      	ldr	r0, [r7, #0]
 800bb9e:	f7fb fbb3 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	dc01      	bgt.n	800bbac <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800bba8:	f003 fe4b 	bl	800f842 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800bbac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bbae:	f7fb fbab 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d001      	beq.n	800bbbc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800bbb8:	f003 fe43 	bl	800f842 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800bbbc:	69fa      	ldr	r2, [r7, #28]
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	dd01      	ble.n	800bbc8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800bbc4:	f003 fe3d 	bl	800f842 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800bbc8:	6838      	ldr	r0, [r7, #0]
 800bbca:	f7fb fb9d 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bbce:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bbd4:	f7ff fdba 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbd8:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800bbda:	2101      	movs	r1, #1
 800bbdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bbde:	f7ff fdb5 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbe2:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800bbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe6:	3b02      	subs	r3, #2
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6838      	ldr	r0, [r7, #0]
 800bbec:	f7ff fdae 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	dd01      	ble.n	800bbfc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 800bbf8:	f003 fe23 	bl	800f842 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800bbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	4619      	mov	r1, r3
 800bc02:	6838      	ldr	r0, [r7, #0]
 800bc04:	f7ff fda2 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800bc08:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	657b      	str	r3, [r7, #84]	; 0x54
 800bc0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc12:	429a      	cmp	r2, r3
 800bc14:	da75      	bge.n	800bd02 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800bc16:	2300      	movs	r3, #0
 800bc18:	653b      	str	r3, [r7, #80]	; 0x50
 800bc1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	da6b      	bge.n	800bcfa <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32_t acc = 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800bc26:	2300      	movs	r3, #0
 800bc28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	da26      	bge.n	800bc80 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32_t input_val = input_data[b * accum_depth + d];
 800bc32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc36:	fb02 f203 	mul.w	r2, r2, r3
 800bc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc3c:	4413      	add	r3, r2
 800bc3e:	461a      	mov	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4413      	add	r3, r2
 800bc44:	f993 3000 	ldrsb.w	r3, [r3]
 800bc48:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800bc4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc4e:	fb02 f203 	mul.w	r2, r2, r3
 800bc52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc54:	4413      	add	r3, r2
 800bc56:	461a      	mov	r2, r3
 800bc58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f993 3000 	ldrsb.w	r3, [r3]
 800bc60:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800bc62:	6a3a      	ldr	r2, [r7, #32]
 800bc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc66:	4413      	add	r3, r2
 800bc68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc6c:	440a      	add	r2, r1
 800bc6e:	fb02 f203 	mul.w	r2, r2, r3
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	4413      	add	r3, r2
 800bc76:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800bc78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc7e:	e7d4      	b.n	800bc2a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 800bc80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d007      	beq.n	800bc96 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 800bc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc8c:	4413      	add	r3, r2
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	4413      	add	r3, r2
 800bc94:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7fa fca1 	bl	80065e4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800bca2:	4603      	mov	r3, r0
 800bca4:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcaa:	4413      	add	r3, r2
 800bcac:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800bcae:	f107 021c 	add.w	r2, r7, #28
 800bcb2:	f107 0314 	add.w	r3, r7, #20
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fa fccb 	bl	8006654 <_ZSt3maxIlERKT_S2_S2_>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800bcc4:	f107 0218 	add.w	r2, r7, #24
 800bcc8:	f107 0314 	add.w	r3, r7, #20
 800bccc:	4611      	mov	r1, r2
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fa fcac 	bl	800662c <_ZSt3minIlERKT_S2_S2_>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800bcda:	6979      	ldr	r1, [r7, #20]
 800bcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bce0:	fb02 f203 	mul.w	r2, r2, r3
 800bce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce6:	4413      	add	r3, r2
 800bce8:	461a      	mov	r2, r3
 800bcea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcec:	4413      	add	r3, r2
 800bcee:	b24a      	sxtb	r2, r1
 800bcf0:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800bcf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	653b      	str	r3, [r7, #80]	; 0x50
 800bcf8:	e78f      	b.n	800bc1a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 800bcfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	657b      	str	r3, [r7, #84]	; 0x54
 800bd00:	e785      	b.n	800bc0e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 800bd02:	bf00      	nop
 800bd04:	3758      	adds	r7, #88	; 0x58
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
#include "tensorflow/lite/micro/kernels/kernel_util.h"

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b084      	sub	sp, #16
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	60f8      	str	r0, [r7, #12]
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d101      	bne.n	800bd22 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800bd1e:	f003 fd90 	bl	800f842 <abort>
  return context->AllocatePersistentBuffer(context,
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd26:	2120      	movs	r1, #32
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	4798      	blx	r3
 800bd2c:	4603      	mov	r3, r0
                                           sizeof(OpDataFullyConnected));
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
	...

0800bd38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800bd38:	b5b0      	push	{r4, r5, r7, lr}
 800bd3a:	b08c      	sub	sp, #48	; 0x30
 800bd3c:	af04      	add	r7, sp, #16
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800bd4a:	f003 fd7a 	bl	800f842 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800bd56:	f003 fd74 	bl	800f842 <abort>

  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	61fb      	str	r3, [r7, #28]
  const auto params =
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 800bd66:	4b47      	ldr	r3, [pc, #284]	; (800be84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7fa fed3 	bl	8006b1a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800bd74:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10a      	bne.n	800bd92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	695c      	ldr	r4, [r3, #20]
 800bd80:	4b41      	ldr	r3, [pc, #260]	; (800be88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	232f      	movs	r3, #47	; 0x2f
 800bd86:	4a41      	ldr	r2, [pc, #260]	; (800be8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800bd88:	4941      	ldr	r1, [pc, #260]	; (800be90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	47a0      	blx	r4
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e073      	b.n	800be7a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 800bd92:	4b40      	ldr	r3, [pc, #256]	; (800be94 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7fa febd 	bl	8006b1a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800bda0:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	695c      	ldr	r4, [r3, #20]
 800bdac:	4b3a      	ldr	r3, [pc, #232]	; (800be98 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	2332      	movs	r3, #50	; 0x32
 800bdb2:	4a36      	ldr	r2, [pc, #216]	; (800be8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800bdb4:	4936      	ldr	r1, [pc, #216]	; (800be90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	47a0      	blx	r4
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e05d      	b.n	800be7a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 800bdbe:	4b37      	ldr	r3, [pc, #220]	; (800be9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7fa fed7 	bl	8006b7a <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800bdcc:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 800bdce:	4b34      	ldr	r3, [pc, #208]	; (800bea0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	6839      	ldr	r1, [r7, #0]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7fa feaf 	bl	8006b3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800bddc:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10a      	bne.n	800bdfa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	695c      	ldr	r4, [r3, #20]
 800bde8:	4b2e      	ldr	r3, [pc, #184]	; (800bea4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	2336      	movs	r3, #54	; 0x36
 800bdee:	4a27      	ldr	r2, [pc, #156]	; (800be8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800bdf0:	4927      	ldr	r1, [pc, #156]	; (800be90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	47a0      	blx	r4
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e03f      	b.n	800be7a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	781a      	ldrb	r2, [r3, #0]
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	429a      	cmp	r2, r3
 800be04:	d01a      	beq.n	800be3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	695c      	ldr	r4, [r3, #20]
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7f8 fc7c 	bl	800470c <TfLiteTypeGetName>
 800be14:	4605      	mov	r5, r0
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7f8 fc76 	bl	800470c <TfLiteTypeGetName>
 800be20:	4603      	mov	r3, r0
 800be22:	9303      	str	r3, [sp, #12]
 800be24:	9502      	str	r5, [sp, #8]
 800be26:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 800be28:	9301      	str	r3, [sp, #4]
 800be2a:	4b20      	ldr	r3, [pc, #128]	; (800beac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	2338      	movs	r3, #56	; 0x38
 800be30:	4a16      	ldr	r2, [pc, #88]	; (800be8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800be32:	491f      	ldr	r1, [pc, #124]	; (800beb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	47a0      	blx	r4
 800be38:	2301      	movs	r3, #1
 800be3a:	e01e      	b.n	800be7a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	781a      	ldrb	r2, [r3, #0]
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	d006      	beq.n	800be56 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11e>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	4919      	ldr	r1, [pc, #100]	; (800beb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	4798      	blx	r3
 800be52:	2301      	movs	r3, #1
 800be54:	e011      	b.n	800be7a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	7819      	ldrb	r1, [r3, #0]
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	781a      	ldrb	r2, [r3, #0]
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	9303      	str	r3, [sp, #12]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	9302      	str	r3, [sp, #8]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	9301      	str	r3, [sp, #4]
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 f9a8 	bl	800c1c6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 800be76:	4603      	mov	r3, r0
                                       input, filter, bias, output, data);
 800be78:	bf00      	nop
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3720      	adds	r7, #32
 800be7e:	46bd      	mov	sp, r7
 800be80:	bdb0      	pop	{r4, r5, r7, pc}
 800be82:	bf00      	nop
 800be84:	08017290 	.word	0x08017290
 800be88:	08016590 	.word	0x08016590
 800be8c:	08016534 	.word	0x08016534
 800be90:	08016578 	.word	0x08016578
 800be94:	08017294 	.word	0x08017294
 800be98:	080165a4 	.word	0x080165a4
 800be9c:	08017298 	.word	0x08017298
 800bea0:	0801729c 	.word	0x0801729c
 800bea4:	080165b8 	.word	0x080165b8
 800bea8:	080165e8 	.word	0x080165e8
 800beac:	080165f8 	.word	0x080165f8
 800beb0:	080165cc 	.word	0x080165cc
 800beb4:	08016604 	.word	0x08016604

0800beb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800beb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beba:	b0d3      	sub	sp, #332	; 0x14c
 800bebc:	af06      	add	r7, sp, #24
 800bebe:	1d3b      	adds	r3, r7, #4
 800bec0:	6018      	str	r0, [r3, #0]
 800bec2:	463b      	mov	r3, r7
 800bec4:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800bec6:	463b      	mov	r3, r7
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 800bed0:	f003 fcb7 	bl	800f842 <abort>
  const auto* params =
 800bed4:	463b      	mov	r3, r7
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800bede:	4b8a      	ldr	r3, [pc, #552]	; (800c108 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>)
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	4639      	mov	r1, r7
 800bee4:	1d3b      	adds	r3, r7, #4
 800bee6:	6809      	ldr	r1, [r1, #0]
 800bee8:	6818      	ldr	r0, [r3, #0]
 800beea:	f7ff fbbf 	bl	800b66c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800beee:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800bef2:	4b86      	ldr	r3, [pc, #536]	; (800c10c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	4639      	mov	r1, r7
 800bef8:	1d3b      	adds	r3, r7, #4
 800befa:	6809      	ldr	r1, [r1, #0]
 800befc:	6818      	ldr	r0, [r3, #0]
 800befe:	f7ff fbb5 	bl	800b66c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800bf02:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800bf06:	4b82      	ldr	r3, [pc, #520]	; (800c110 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	1d3b      	adds	r3, r7, #4
 800bf0e:	6809      	ldr	r1, [r1, #0]
 800bf10:	6818      	ldr	r0, [r3, #0]
 800bf12:	f7ff fbab 	bl	800b66c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800bf16:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800bf1a:	4b7e      	ldr	r3, [pc, #504]	; (800c114 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	4639      	mov	r1, r7
 800bf20:	1d3b      	adds	r3, r7, #4
 800bf22:	6809      	ldr	r1, [r1, #0]
 800bf24:	6818      	ldr	r0, [r3, #0]
 800bf26:	f7ff fbb1 	bl	800b68c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800bf2a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 800bf2e:	463b      	mov	r3, r7
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 800bf38:	f003 fc83 	bl	800f842 <abort>
  const auto& data =
 800bf3c:	463b      	mov	r3, r7
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800bf46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf4a:	7a1b      	ldrb	r3, [r3, #8]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d002      	beq.n	800bf56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
 800bf50:	2b09      	cmp	r3, #9
 800bf52:	d061      	beq.n	800c018 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
 800bf54:	e0bf      	b.n	800c0d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 800bf56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf5a:	781a      	ldrb	r2, [r3, #0]
 800bf5c:	f107 0308 	add.w	r3, r7, #8
 800bf60:	4611      	mov	r1, r2
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 f91a 	bl	800c19c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 800bf68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf6c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800bf70:	4618      	mov	r0, r3
 800bf72:	f000 f97e 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800bf76:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800bf7a:	f7ff fba7 	bl	800b6cc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800bf7e:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800bf80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf84:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 f972 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800bf8e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800bf92:	f7ff fb9b 	bl	800b6cc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800bf96:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800bf98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bf9c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f000 f966 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800bfa6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800bfaa:	f7ff fb8f 	bl	800b6cc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800bfae:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800bfb0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bfb4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 f95a 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800bfbe:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800bfc2:	f7ff fb92 	bl	800b6ea <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bfcc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800bfd0:	f107 0008 	add.w	r0, r7, #8
 800bfd4:	9304      	str	r3, [sp, #16]
 800bfd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bfda:	9303      	str	r3, [sp, #12]
 800bfdc:	9502      	str	r5, [sp, #8]
 800bfde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	9400      	str	r4, [sp, #0]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	4632      	mov	r2, r6
 800bfea:	f7ff fd25 	bl	800ba38 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800bfee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fb f97d 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800bff8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fb f978 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c002:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c006:	4618      	mov	r0, r3
 800c008:	f7fb f973 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800c00c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c010:	4618      	mov	r0, r3
 800c012:	f7fb f96e 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800c016:	e071      	b.n	800c0fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    case kTfLiteInt8: {
      tflite::reference_integer_ops::FullyConnected(
          FullyConnectedParamsQuantized(data),
 800c018:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c01c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800c020:	4618      	mov	r0, r3
 800c022:	f000 f891 	bl	800c148 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 800c026:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c02a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 f91f 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800c034:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800c038:	f7ff fb68 	bl	800b70c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c03c:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(filter),
 800c03e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c042:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800c046:	4618      	mov	r0, r3
 800c048:	f000 f913 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800c04c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c050:	f7ff fb5c 	bl	800b70c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c054:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 800c056:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800c05a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 f907 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800c064:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c068:	f7ff fc62 	bl	800b930 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800c06c:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 800c06e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c072:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800c076:	4618      	mov	r0, r3
 800c078:	f000 f8fb 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
 800c07c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800c080:	f7ff fb53 	bl	800b72a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800c084:	4603      	mov	r3, r0
 800c086:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800c08a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800c08e:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c098:	9303      	str	r3, [sp, #12]
 800c09a:	9502      	str	r5, [sp, #8]
 800c09c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800c0a0:	9301      	str	r3, [sp, #4]
 800c0a2:	9400      	str	r4, [sp, #0]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	4632      	mov	r2, r6
 800c0a8:	f7ff fd5c 	bl	800bb64 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
          tflite::micro::GetTensorShape(output),
 800c0ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7fb f91e 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800c0b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fb f919 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c0c0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fb f914 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800c0ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fb f90f 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int8_t>(output));
      break;
 800c0d4:	e012      	b.n	800c0fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>
    }

    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800c0d6:	1d3b      	adds	r3, r7, #4
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	695c      	ldr	r4, [r3, #20]
 800c0dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0e0:	7a1b      	ldrb	r3, [r3, #8]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7f8 fb12 	bl	800470c <TfLiteTypeGetName>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c0ee:	7a1b      	ldrb	r3, [r3, #8]
 800c0f0:	1d38      	adds	r0, r7, #4
 800c0f2:	4909      	ldr	r1, [pc, #36]	; (800c118 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 800c0f4:	6800      	ldr	r0, [r0, #0]
 800c0f6:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e000      	b.n	800c0fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
    }
  }
  return kTfLiteOk;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800c104:	46bd      	mov	sp, r7
 800c106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c108:	08017290 	.word	0x08017290
 800c10c:	08017294 	.word	0x08017294
 800c110:	08017298 	.word	0x08017298
 800c114:	0801729c 	.word	0x0801729c
 800c118:	0801667c 	.word	0x0801667c

0800c11c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 800c11c:	b4b0      	push	{r4, r5, r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a07      	ldr	r2, [pc, #28]	; (800c144 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 800c128:	461c      	mov	r4, r3
 800c12a:	4615      	mov	r5, r2
 800c12c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c12e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c130:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bcb0      	pop	{r4, r5, r7}
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	08016698 	.word	0x08016698

0800c148 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	425a      	negs	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	425a      	negs	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	69da      	ldr	r2, [r3, #28]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	689a      	ldr	r2, [r3, #8]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	68da      	ldr	r2, [r3, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	619a      	str	r2, [r3, #24]
  return op_params;
 800c18e:	bf00      	nop
}
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f103 0220 	add.w	r2, r3, #32
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f103 011c 	add.w	r1, r3, #28
 800c1b4:	78fb      	ldrb	r3, [r7, #3]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff fb3e 	bl	800b838 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 800c1bc:	bf00      	nop
}
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b08a      	sub	sp, #40	; 0x28
 800c1ca:	af02      	add	r7, sp, #8
 800c1cc:	60f8      	str	r0, [r7, #12]
 800c1ce:	607b      	str	r3, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	72fb      	strb	r3, [r7, #11]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 800c1d8:	7abb      	ldrb	r3, [r7, #10]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d044      	beq.n	800c268 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 800c1de:	f04f 0200 	mov.w	r2, #0
 800c1e2:	f04f 0300 	mov.w	r3, #0
 800c1e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800c1ea:	f107 0310 	add.w	r3, r7, #16
 800c1ee:	9301      	str	r3, [sp, #4]
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7fa fcd0 	bl	8006ba0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800c200:	4603      	mov	r3, r0
 800c202:	77fb      	strb	r3, [r7, #31]
 800c204:	7ffb      	ldrb	r3, [r7, #31]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d001      	beq.n	800c20e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 800c20a:	7ffb      	ldrb	r3, [r7, #31]
 800c20c:	e02d      	b.n	800c26a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 800c20e:	ed97 7b04 	vldr	d7, [r7, #16]
 800c212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c216:	3304      	adds	r3, #4
 800c218:	4619      	mov	r1, r3
 800c21a:	4610      	mov	r0, r2
 800c21c:	eeb0 0a47 	vmov.f32	s0, s14
 800c220:	eef0 0a67 	vmov.f32	s1, s15
 800c224:	f7f9 ff5e 	bl	80060e4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	691a      	ldr	r2, [r3, #16]
 800c22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c22e:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 800c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 800c238:	f003 fb03 	bl	800f842 <abort>
    data->filter_zero_point = filter->params.zero_point;
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	691a      	ldr	r2, [r3, #16]
 800c240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c242:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	691a      	ldr	r2, [r3, #16]
 800c248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24a:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 800c24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c24e:	f103 0208 	add.w	r2, r3, #8
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	330c      	adds	r3, #12
 800c256:	7af9      	ldrb	r1, [r7, #11]
 800c258:	9300      	str	r3, [sp, #0]
 800c25a:	4613      	mov	r3, r2
 800c25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f7fa fe90 	bl	8006f84 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800c264:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 800c266:	e000      	b.n	800c26a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3720      	adds	r7, #32
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800c272:	b580      	push	{r7, lr}
 800c274:	b086      	sub	sp, #24
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d103      	bne.n	800c292 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7fb f810 	bl	80072b0 <_ZN6tflite12RuntimeShapeC1Ev>
 800c290:	e00d      	b.n	800c2ae <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	6939      	ldr	r1, [r7, #16]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f7fb f80f 	bl	80072cc <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800c2b6:	b590      	push	{r4, r7, lr}
 800c2b8:	b087      	sub	sp, #28
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7fb f820 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c2c8:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	617b      	str	r3, [r7, #20]
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	da15      	bge.n	800c302 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d00d      	beq.n	800c2fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800c2de:	6979      	ldr	r1, [r7, #20]
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f7ff fa33 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	6979      	ldr	r1, [r7, #20]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff fa2e 	bl	800b74c <_ZNK6tflite12RuntimeShape4DimsEi>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	429c      	cmp	r4, r3
 800c2f4:	d001      	beq.n	800c2fa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 800c2f6:	f003 faa4 	bl	800f842 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	617b      	str	r3, [r7, #20]
 800c300:	e7e5      	b.n	800c2ce <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800c302:	68b9      	ldr	r1, [r7, #8]
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f7ff fb61 	bl	800b9cc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800c30a:	4603      	mov	r3, r0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	371c      	adds	r7, #28
 800c310:	46bd      	mov	sp, r7
 800c312:	bd90      	pop	{r4, r7, pc}

0800c314 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800c314:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800c318:	b08b      	sub	sp, #44	; 0x2c
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	461a      	mov	r2, r3
 800c324:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c328:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b64 = b;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	461a      	mov	r2, r3
 800c330:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c334:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t sum = a64 + b64;
 800c338:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c33c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c340:	1884      	adds	r4, r0, r2
 800c342:	eb41 0503 	adc.w	r5, r1, r3
 800c346:	e9c7 4504 	strd	r4, r5, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800c34a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c34e:	2a00      	cmp	r2, #0
 800c350:	f173 0300 	sbcs.w	r3, r3, #0
 800c354:	db04      	blt.n	800c360 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4c>
 800c356:	f04f 0201 	mov.w	r2, #1
 800c35a:	f04f 0300 	mov.w	r3, #0
 800c35e:	e003      	b.n	800c368 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x54>
 800c360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c368:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800c36c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c374:	eb10 0802 	adds.w	r8, r0, r2
 800c378:	eb41 0903 	adc.w	r9, r1, r3
 800c37c:	4642      	mov	r2, r8
 800c37e:	464b      	mov	r3, r9
 800c380:	2a00      	cmp	r2, #0
 800c382:	f173 0100 	sbcs.w	r1, r3, #0
 800c386:	da02      	bge.n	800c38e <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x7a>
 800c388:	3201      	adds	r2, #1
 800c38a:	f143 0300 	adc.w	r3, r3, #0
 800c38e:	f04f 0000 	mov.w	r0, #0
 800c392:	f04f 0100 	mov.w	r1, #0
 800c396:	0850      	lsrs	r0, r2, #1
 800c398:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800c39c:	1059      	asrs	r1, r3, #1
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4613      	mov	r3, r2
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	372c      	adds	r7, #44	; 0x2c
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800c3ae:	4770      	bx	lr

0800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800c3b8:	f107 030c 	add.w	r3, r7, #12
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fa f9e3 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6013      	str	r3, [r2, #0]
    return retval;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
  }
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
	...

0800c3d4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b08a      	sub	sp, #40	; 0x28
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800c3dc:	f000 f9f7 	bl	800c7ce <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 f9fd 	bl	800c7e4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800c3ee:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800c3f2:	f000 fa29 	bl	800c848 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 fa11 	bl	800c820 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800c3fe:	4603      	mov	r3, r0
 800c400:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800c402:	4823      	ldr	r0, [pc, #140]	; (800c490 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800c404:	f000 fa20 	bl	800c848 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800c408:	4603      	mov	r3, r0
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 fa08 	bl	800c820 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800c410:	4603      	mov	r3, r0
 800c412:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800c414:	69b9      	ldr	r1, [r7, #24]
 800c416:	6a38      	ldr	r0, [r7, #32]
 800c418:	f000 fa23 	bl	800c862 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c41c:	4603      	mov	r3, r0
 800c41e:	4619      	mov	r1, r3
 800c420:	69f8      	ldr	r0, [r7, #28]
 800c422:	f000 fa40 	bl	800c8a6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800c426:	4603      	mov	r3, r0
 800c428:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800c42a:	2300      	movs	r3, #0
 800c42c:	627b      	str	r3, [r7, #36]	; 0x24
 800c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c430:	2b02      	cmp	r3, #2
 800c432:	dc21      	bgt.n	800c478 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 800c434:	6979      	ldr	r1, [r7, #20]
 800c436:	6a38      	ldr	r0, [r7, #32]
 800c438:	f000 fa13 	bl	800c862 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c43c:	4603      	mov	r3, r0
 800c43e:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800c440:	f000 fa4f 	bl	800c8e2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800c444:	4603      	mov	r3, r0
 800c446:	6939      	ldr	r1, [r7, #16]
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fa53 	bl	800c8f4 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800c44e:	4603      	mov	r3, r0
 800c450:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800c452:	68f9      	ldr	r1, [r7, #12]
 800c454:	6978      	ldr	r0, [r7, #20]
 800c456:	f000 fa6b 	bl	800c930 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c45a:	4603      	mov	r3, r0
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fa89 	bl	800c974 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800c462:	4603      	mov	r3, r0
 800c464:	4619      	mov	r1, r3
 800c466:	6978      	ldr	r0, [r7, #20]
 800c468:	f000 fa1d 	bl	800c8a6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800c46c:	4603      	mov	r3, r0
 800c46e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	3301      	adds	r3, #1
 800c474:	627b      	str	r3, [r7, #36]	; 0x24
 800c476:	e7da      	b.n	800c42e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800c478:	6978      	ldr	r0, [r7, #20]
 800c47a:	f000 fa95 	bl	800c9a8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800c47e:	4603      	mov	r3, r0
 800c480:	4618      	mov	r0, r3
 800c482:	f000 faa7 	bl	800c9d4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800c486:	4603      	mov	r3, r0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3728      	adds	r7, #40	; 0x28
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	c3c3c3c4 	.word	0xc3c3c3c4

0800c494 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800c49c:	f107 030c 	add.w	r3, r7, #12
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 f989 	bl	800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6013      	str	r3, [r2, #0]
    return retval;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
  }
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800c4b8:	b590      	push	{r4, r7, lr}
 800c4ba:	b091      	sub	sp, #68	; 0x44
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 800c4c0:	f000 faa2 	bl	800ca08 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 800c4c8:	2001      	movs	r0, #1
 800c4ca:	f000 faa6 	bl	800ca1a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4d4:	f000 fab5 	bl	800ca42 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 800c4dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 facd 	bl	800ca7e <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 faaa 	bl	800ca42 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 800c4f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4f4:	f000 fae1 	bl	800caba <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 faf8 	bl	800caf0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 800c500:	4603      	mov	r3, r0
 800c502:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 800c504:	6879      	ldr	r1, [r7, #4]
 800c506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c508:	f000 fa9b 	bl	800ca42 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800c50c:	4603      	mov	r3, r0
 800c50e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c510:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f94f 	bl	800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800c51a:	4603      	mov	r3, r0
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 800c520:	4883      	ldr	r0, [pc, #524]	; (800c730 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 800c522:	f7fa f950 	bl	80067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800c526:	4603      	mov	r3, r0
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fa f938 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800c52e:	4603      	mov	r3, r0
 800c530:	627b      	str	r3, [r7, #36]	; 0x24
 800c532:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800c536:	f7fa f953 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800c53a:	4603      	mov	r3, r0
 800c53c:	4619      	mov	r1, r3
 800c53e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c540:	f7fa f959 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800c544:	4603      	mov	r3, r0
 800c546:	4618      	mov	r0, r3
 800c548:	f7fa f9c2 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800c54c:	4604      	mov	r4, r0
 800c54e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c552:	f000 fb2f 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c556:	4603      	mov	r3, r0
 800c558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c55a:	4619      	mov	r1, r3
 800c55c:	4620      	mov	r0, r4
 800c55e:	f000 fb4b 	bl	800cbf8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800c562:	4603      	mov	r3, r0
 800c564:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 800c566:	4873      	ldr	r0, [pc, #460]	; (800c734 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 800c568:	f7fa f92d 	bl	80067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800c56c:	4603      	mov	r3, r0
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fa f915 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800c574:	4603      	mov	r3, r0
 800c576:	623b      	str	r3, [r7, #32]
 800c578:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c57c:	f7fa f930 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800c580:	4603      	mov	r3, r0
 800c582:	4619      	mov	r1, r3
 800c584:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c586:	f7fa f936 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800c58a:	4603      	mov	r3, r0
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fa f99f 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800c592:	4604      	mov	r4, r0
 800c594:	6a39      	ldr	r1, [r7, #32]
 800c596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c598:	f000 fb0c 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c59c:	4603      	mov	r3, r0
 800c59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 fb28 	bl	800cbf8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 800c5ac:	4862      	ldr	r0, [pc, #392]	; (800c738 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 800c5ae:	f7fa f90a 	bl	80067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fa f8f2 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	61fb      	str	r3, [r7, #28]
 800c5be:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800c5c2:	f7fa f90d 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5cc:	f7fa f913 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fa f97c 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800c5d8:	4604      	mov	r4, r0
 800c5da:	69f9      	ldr	r1, [r7, #28]
 800c5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5de:	f000 fae9 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f000 fb05 	bl	800cbf8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 800c5f2:	4852      	ldr	r0, [pc, #328]	; (800c73c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 800c5f4:	f7fa f8e7 	bl	80067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fa f8cf 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800c600:	4603      	mov	r3, r0
 800c602:	61bb      	str	r3, [r7, #24]
 800c604:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800c608:	f7fa f8ea 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800c60c:	4603      	mov	r3, r0
 800c60e:	4619      	mov	r1, r3
 800c610:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c612:	f7fa f8f0 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800c616:	4603      	mov	r3, r0
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fa f959 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800c61e:	4604      	mov	r4, r0
 800c620:	69b9      	ldr	r1, [r7, #24]
 800c622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c624:	f000 fac6 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c628:	4603      	mov	r3, r0
 800c62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c62c:	4619      	mov	r1, r3
 800c62e:	4620      	mov	r0, r4
 800c630:	f000 fae2 	bl	800cbf8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800c634:	4603      	mov	r3, r0
 800c636:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 800c638:	4841      	ldr	r0, [pc, #260]	; (800c740 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 800c63a:	f7fa f8c4 	bl	80067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800c63e:	4603      	mov	r3, r0
 800c640:	4618      	mov	r0, r3
 800c642:	f7fa f8ac 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800c646:	4603      	mov	r3, r0
 800c648:	617b      	str	r3, [r7, #20]
 800c64a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800c64e:	f7fa f8c7 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800c652:	4603      	mov	r3, r0
 800c654:	4619      	mov	r1, r3
 800c656:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c658:	f7fa f8cd 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800c65c:	4603      	mov	r3, r0
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fa f936 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800c664:	4604      	mov	r4, r0
 800c666:	6979      	ldr	r1, [r7, #20]
 800c668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c66a:	f000 faa3 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c66e:	4603      	mov	r3, r0
 800c670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c672:	4619      	mov	r1, r3
 800c674:	4620      	mov	r0, r4
 800c676:	f000 fabf 	bl	800cbf8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800c67a:	4603      	mov	r3, r0
 800c67c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 800c67e:	4831      	ldr	r0, [pc, #196]	; (800c744 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 800c680:	f7fa f8a1 	bl	80067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800c684:	4603      	mov	r3, r0
 800c686:	4618      	mov	r0, r3
 800c688:	f7fa f889 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800c68c:	4603      	mov	r3, r0
 800c68e:	613b      	str	r3, [r7, #16]
 800c690:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800c694:	f7fa f8a4 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800c698:	4603      	mov	r3, r0
 800c69a:	4619      	mov	r1, r3
 800c69c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c69e:	f7fa f8aa 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fa f913 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	6939      	ldr	r1, [r7, #16]
 800c6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6b0:	f000 fa80 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f000 fa9c 	bl	800cbf8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 800c6c4:	20f2      	movs	r0, #242	; 0xf2
 800c6c6:	f7fa f87e 	bl	80067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fa f866 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c6da:	f7fa f881 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c6e4:	f7fa f887 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fa f8f0 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	68f9      	ldr	r1, [r7, #12]
 800c6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f6:	f000 fa5d 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6fe:	4619      	mov	r1, r3
 800c700:	4620      	mov	r0, r4
 800c702:	f000 fa79 	bl	800cbf8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800c706:	4603      	mov	r3, r0
 800c708:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fa95 	bl	800cc3a <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 800c710:	4604      	mov	r4, r0
 800c712:	f000 f85c 	bl	800c7ce <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800c716:	4603      	mov	r3, r0
 800c718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c71a:	4619      	mov	r1, r3
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 fa6b 	bl	800cbf8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 800c722:	4603      	mov	r3, r0
 800c724:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3744      	adds	r7, #68	; 0x44
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd90      	pop	{r4, r7, pc}
 800c730:	63afbe7b 	.word	0x63afbe7b
 800c734:	4da2cbf2 	.word	0x4da2cbf2
 800c738:	2f16ac6c 	.word	0x2f16ac6c
 800c73c:	1152aaa4 	.word	0x1152aaa4
 800c740:	02582ab7 	.word	0x02582ab7
 800c744:	000afe11 	.word	0x000afe11

0800c748 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800c748:	b5b0      	push	{r4, r5, r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800c750:	1d3b      	adds	r3, r7, #4
 800c752:	4618      	mov	r0, r3
 800c754:	f7fa f818 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800c758:	4603      	mov	r3, r0
 800c75a:	681d      	ldr	r5, [r3, #0]
 800c75c:	f107 030c 	add.w	r3, r7, #12
 800c760:	4618      	mov	r0, r3
 800c762:	f000 fa7c 	bl	800cc5e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800c766:	4604      	mov	r4, r0
 800c768:	4628      	mov	r0, r5
 800c76a:	f000 fa83 	bl	800cc74 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 800c76e:	4603      	mov	r3, r0
 800c770:	6023      	str	r3, [r4, #0]
  return result;
 800c772:	68fb      	ldr	r3, [r7, #12]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bdb0      	pop	{r4, r5, r7, pc}

0800c77c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800c77c:	b590      	push	{r4, r7, lr}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
 800c786:	1d3b      	adds	r3, r7, #4
 800c788:	4618      	mov	r0, r3
 800c78a:	f000 fa68 	bl	800cc5e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800c78e:	4603      	mov	r3, r0
 800c790:	681c      	ldr	r4, [r3, #0]
 800c792:	463b      	mov	r3, r7
 800c794:	4618      	mov	r0, r3
 800c796:	f000 fa62 	bl	800cc5e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800c79a:	4603      	mov	r3, r0
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f7fa f859 	bl	8006858 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fa6f 	bl	800cc8c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd90      	pop	{r4, r7, pc}

0800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800c7d2:	f000 fa82 	bl	800ccda <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7f9 ffe0 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800c7de:	4603      	mov	r3, r0
  }
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800c7e4:	b590      	push	{r4, r7, lr}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
 800c7ee:	1d3b      	adds	r3, r7, #4
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7f9 ffc9 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	681c      	ldr	r4, [r3, #0]
 800c7fa:	463b      	mov	r3, r7
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7f9 ffc3 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800c802:	4603      	mov	r3, r0
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4619      	mov	r1, r3
 800c808:	4620      	mov	r0, r4
 800c80a:	f7ff fd83 	bl	800c314 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800c80e:	4603      	mov	r3, r0
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff fdcd 	bl	800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800c816:	4603      	mov	r3, r0
 800c818:	4618      	mov	r0, r3
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd90      	pop	{r4, r7, pc}

0800c820 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800c820:	b590      	push	{r4, r7, lr}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800c828:	f107 030c 	add.w	r3, r7, #12
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 fa5b 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c832:	4604      	mov	r4, r0
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7f9 ffd3 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800c83a:	4603      	mov	r3, r0
 800c83c:	6023      	str	r3, [r4, #0]
    return retval;
 800c83e:	68fb      	ldr	r3, [r7, #12]
  }
 800c840:	4618      	mov	r0, r3
 800c842:	3714      	adds	r7, #20
 800c844:	46bd      	mov	sp, r7
 800c846:	bd90      	pop	{r4, r7, pc}

0800c848 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800c850:	2100      	movs	r1, #0
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7f9 ff12 	bl	800667c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800c858:	4603      	mov	r3, r0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800c862:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c864:	b085      	sub	sp, #20
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800c86c:	1d3b      	adds	r3, r7, #4
 800c86e:	4618      	mov	r0, r3
 800c870:	f7f9 ff8a 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800c874:	4603      	mov	r3, r0
 800c876:	681d      	ldr	r5, [r3, #0]
 800c878:	463b      	mov	r3, r7
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 fa34 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c880:	4603      	mov	r3, r0
 800c882:	681e      	ldr	r6, [r3, #0]
 800c884:	f107 030c 	add.w	r3, r7, #12
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 fa2d 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c88e:	4604      	mov	r4, r0
 800c890:	4631      	mov	r1, r6
 800c892:	4628      	mov	r0, r5
 800c894:	f7f9 fe36 	bl	8006504 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800c898:	4603      	mov	r3, r0
 800c89a:	6023      	str	r3, [r4, #0]
  return c;
 800c89c:	68fb      	ldr	r3, [r7, #12]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8a6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800c8a6:	b590      	push	{r4, r7, lr}
 800c8a8:	b083      	sub	sp, #12
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	6039      	str	r1, [r7, #0]
 800c8b0:	1d3b      	adds	r3, r7, #4
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 fa18 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	681c      	ldr	r4, [r3, #0]
 800c8bc:	463b      	mov	r3, r7
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 fa12 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f7f9 ffc4 	bl	8006858 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 fa13 	bl	800ccfe <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	370c      	adds	r7, #12
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd90      	pop	{r4, r7, pc}

0800c8e2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800c8e6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800c8ea:	f7ff ff99 	bl	800c820 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800c8ee:	4603      	mov	r3, r0
  }
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800c8f4:	b590      	push	{r4, r7, lr}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
 800c8fe:	1d3b      	adds	r3, r7, #4
 800c900:	4618      	mov	r0, r3
 800c902:	f000 f9f1 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c906:	4603      	mov	r3, r0
 800c908:	681c      	ldr	r4, [r3, #0]
 800c90a:	463b      	mov	r3, r7
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 f9eb 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c912:	4603      	mov	r3, r0
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4619      	mov	r1, r3
 800c918:	4620      	mov	r0, r4
 800c91a:	f7f9 ffcb 	bl	80068b4 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800c91e:	4603      	mov	r3, r0
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f9ec 	bl	800ccfe <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800c926:	4603      	mov	r3, r0
 800c928:	4618      	mov	r0, r3
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd90      	pop	{r4, r7, pc}

0800c930 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800c930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800c93a:	1d3b      	adds	r3, r7, #4
 800c93c:	4618      	mov	r0, r3
 800c93e:	f000 f9d3 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c942:	4603      	mov	r3, r0
 800c944:	681d      	ldr	r5, [r3, #0]
 800c946:	463b      	mov	r3, r7
 800c948:	4618      	mov	r0, r3
 800c94a:	f000 f9cd 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c94e:	4603      	mov	r3, r0
 800c950:	681e      	ldr	r6, [r3, #0]
 800c952:	f107 030c 	add.w	r3, r7, #12
 800c956:	4618      	mov	r0, r3
 800c958:	f000 f9e2 	bl	800cd20 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800c95c:	4604      	mov	r4, r0
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	f7f9 fdcf 	bl	8006504 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800c966:	4603      	mov	r3, r0
 800c968:	6023      	str	r3, [r4, #0]
  return c;
 800c96a:	68fb      	ldr	r3, [r7, #12]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c974 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800c974:	b5b0      	push	{r4, r5, r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800c97c:	1d3b      	adds	r3, r7, #4
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 f9ce 	bl	800cd20 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800c984:	4603      	mov	r3, r0
 800c986:	681d      	ldr	r5, [r3, #0]
 800c988:	f107 030c 	add.w	r3, r7, #12
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f9ab 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c992:	4604      	mov	r4, r0
 800c994:	4628      	mov	r0, r5
 800c996:	f000 f9ce 	bl	800cd36 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800c99a:	4603      	mov	r3, r0
 800c99c:	6023      	str	r3, [r4, #0]
  return result;
 800c99e:	68fb      	ldr	r3, [r7, #12]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bdb0      	pop	{r4, r5, r7, pc}

0800c9a8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800c9a8:	b590      	push	{r4, r7, lr}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800c9b0:	1d3b      	adds	r3, r7, #4
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 f998 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	f107 030c 	add.w	r3, r7, #12
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 f9c5 	bl	800cd4e <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	6013      	str	r3, [r2, #0]
  return c;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd90      	pop	{r4, r7, pc}

0800c9d4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800c9d4:	b5b0      	push	{r4, r5, r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800c9dc:	1d3b      	adds	r3, r7, #4
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 f9b5 	bl	800cd4e <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	681d      	ldr	r5, [r3, #0]
 800c9e8:	f107 030c 	add.w	r3, r7, #12
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7f9 fecb 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	f000 f9b5 	bl	800cd64 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	6023      	str	r3, [r4, #0]
  return result;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bdb0      	pop	{r4, r5, r7, pc}

0800ca08 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800ca0c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800ca10:	f000 f803 	bl	800ca1a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 800ca14:	4603      	mov	r3, r0
  }
 800ca16:	4618      	mov	r0, r3
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800ca1a:	b590      	push	{r4, r7, lr}
 800ca1c:	b085      	sub	sp, #20
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800ca22:	f107 030c 	add.w	r3, r7, #12
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff fec6 	bl	800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7f9 fed6 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ca34:	4603      	mov	r3, r0
 800ca36:	6023      	str	r3, [r4, #0]
    return retval;
 800ca38:	68fb      	ldr	r3, [r7, #12]
  }
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd90      	pop	{r4, r7, pc}

0800ca42 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800ca42:	b590      	push	{r4, r7, lr}
 800ca44:	b083      	sub	sp, #12
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
 800ca4c:	1d3b      	adds	r3, r7, #4
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7ff feb2 	bl	800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800ca54:	4603      	mov	r3, r0
 800ca56:	681c      	ldr	r4, [r3, #0]
 800ca58:	463b      	mov	r3, r7
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7ff feac 	bl	800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800ca60:	4603      	mov	r3, r0
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4619      	mov	r1, r3
 800ca66:	4620      	mov	r0, r4
 800ca68:	f7f9 ff24 	bl	80068b4 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7ff fd10 	bl	800c494 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ca74:	4603      	mov	r3, r0
 800ca76:	4618      	mov	r0, r3
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd90      	pop	{r4, r7, pc}

0800ca7e <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 800ca7e:	b590      	push	{r4, r7, lr}
 800ca80:	b083      	sub	sp, #12
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
 800ca88:	1d3b      	adds	r3, r7, #4
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff fe94 	bl	800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800ca90:	4603      	mov	r3, r0
 800ca92:	681c      	ldr	r4, [r3, #0]
 800ca94:	463b      	mov	r3, r7
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7ff fe8e 	bl	800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4619      	mov	r1, r3
 800caa2:	4620      	mov	r0, r4
 800caa4:	f7f9 fea7 	bl	80067f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800caa8:	4603      	mov	r3, r0
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff fcf2 	bl	800c494 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800cab0:	4603      	mov	r3, r0
 800cab2:	4618      	mov	r0, r3
 800cab4:	370c      	adds	r7, #12
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd90      	pop	{r4, r7, pc}

0800caba <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800caba:	b5b0      	push	{r4, r5, r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800cac2:	1d3b      	adds	r3, r7, #4
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7ff fe77 	bl	800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800caca:	4603      	mov	r3, r0
 800cacc:	681d      	ldr	r5, [r3, #0]
 800cace:	f107 030c 	add.w	r3, r7, #12
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f9 fe58 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cad8:	4604      	mov	r4, r0
 800cada:	4628      	mov	r0, r5
 800cadc:	f000 f94e 	bl	800cd7c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 800cae0:	4603      	mov	r3, r0
 800cae2:	6023      	str	r3, [r4, #0]
  return result;
 800cae4:	68fb      	ldr	r3, [r7, #12]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800caf0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b08a      	sub	sp, #40	; 0x28
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800caf8:	482c      	ldr	r0, [pc, #176]	; (800cbac <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800cafa:	f7f9 fe64 	bl	80067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800cafe:	4603      	mov	r3, r0
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7f9 fe4c 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800cb06:	4603      	mov	r3, r0
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800cb0a:	4829      	ldr	r0, [pc, #164]	; (800cbb0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800cb0c:	f7f9 fe5b 	bl	80067c6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800cb10:	4603      	mov	r3, r0
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7f9 fe43 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800cb1c:	f000 f93a 	bl	800cd94 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800cb20:	4603      	mov	r3, r0
 800cb22:	4619      	mov	r1, r3
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 f93e 	bl	800cda6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800cb2e:	69f9      	ldr	r1, [r7, #28]
 800cb30:	69f8      	ldr	r0, [r7, #28]
 800cb32:	f000 f83f 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800cb36:	4603      	mov	r3, r0
 800cb38:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800cb3a:	69f9      	ldr	r1, [r7, #28]
 800cb3c:	69b8      	ldr	r0, [r7, #24]
 800cb3e:	f000 f839 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800cb42:	4603      	mov	r3, r0
 800cb44:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800cb46:	69b9      	ldr	r1, [r7, #24]
 800cb48:	69b8      	ldr	r0, [r7, #24]
 800cb4a:	f000 f833 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800cb52:	6938      	ldr	r0, [r7, #16]
 800cb54:	f000 f945 	bl	800cde2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800cb5c:	6979      	ldr	r1, [r7, #20]
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 f921 	bl	800cda6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800cb64:	4603      	mov	r3, r0
 800cb66:	6a39      	ldr	r1, [r7, #32]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 f823 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	69b9      	ldr	r1, [r7, #24]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 f917 	bl	800cda6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f000 f947 	bl	800ce0e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800cb80:	4603      	mov	r3, r0
 800cb82:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	69f8      	ldr	r0, [r7, #28]
 800cb88:	f000 f90d 	bl	800cda6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	4619      	mov	r1, r3
 800cb90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb92:	f000 f80f 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800cb96:	4603      	mov	r3, r0
 800cb98:	4619      	mov	r1, r3
 800cb9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb9c:	f000 f94d 	bl	800ce3a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800cba0:	4603      	mov	r3, r0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3728      	adds	r7, #40	; 0x28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	70f5a894 	.word	0x70f5a894
 800cbb0:	2aaaaaab 	.word	0x2aaaaaab

0800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800cbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800cbbe:	1d3b      	adds	r3, r7, #4
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7f9 fde1 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	681d      	ldr	r5, [r3, #0]
 800cbca:	463b      	mov	r3, r7
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7f9 fddb 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	681e      	ldr	r6, [r3, #0]
 800cbd6:	f107 030c 	add.w	r3, r7, #12
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7f9 fdd4 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	f7f9 fc8d 	bl	8006504 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800cbea:	4603      	mov	r3, r0
 800cbec:	6023      	str	r3, [r4, #0]
  return c;
 800cbee:	68fb      	ldr	r3, [r7, #12]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3714      	adds	r7, #20
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbf8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800cbf8:	b590      	push	{r4, r7, lr}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800cc04:	f107 0308 	add.w	r3, r7, #8
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7f9 fdbd 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cc0e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800cc10:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800cc12:	1d3b      	adds	r3, r7, #4
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7f9 fdb7 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cc1a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	4621      	mov	r1, r4
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f7f9 fec4 	bl	80069b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7ff fbc0 	bl	800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800cc30:	4603      	mov	r3, r0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd90      	pop	{r4, r7, pc}

0800cc3a <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b082      	sub	sp, #8
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
 800cc42:	1d3b      	adds	r3, r7, #4
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff fdb7 	bl	800c7b8 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 f911 	bl	800ce76 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 800cc54:	4603      	mov	r3, r0
 800cc56:	4618      	mov	r0, r3
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 800cc5e:	b480      	push	{r7}
 800cc60:	b083      	sub	sp, #12
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 f90c 	bl	800ce9a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 800cc82:	4603      	mov	r3, r0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800cc94:	f107 030c 	add.w	r3, r7, #12
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7ff ffe0 	bl	800cc5e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6013      	str	r3, [r2, #0]
    return retval;
 800cca4:	68fb      	ldr	r3, [r7, #12]
  }
 800cca6:	4618      	mov	r0, r3
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800ccae:	b480      	push	{r7}
 800ccb0:	b083      	sub	sp, #12
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
 800ccb6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f993 2000 	ldrsb.w	r2, [r3]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	f993 3000 	ldrsb.w	r3, [r3]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	da01      	bge.n	800cccc <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	e000      	b.n	800ccce <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 800cccc:	687b      	ldr	r3, [r7, #4]
    }
 800ccce:	4618      	mov	r0, r3
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800ccde:	f7f9 f9f8 	bl	80060d2 <_ZNSt14numeric_limitsIlE3maxEv>
 800cce2:	4603      	mov	r3, r0
  }
 800cce4:	4618      	mov	r0, r3
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800cd06:	f107 030c 	add.w	r3, r7, #12
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff ffec 	bl	800cce8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800cd10:	4602      	mov	r2, r0
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6013      	str	r3, [r2, #0]
    return retval;
 800cd16:	68fb      	ldr	r3, [r7, #12]
  }
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b082      	sub	sp, #8
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 f8b8 	bl	800ceb4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800cd44:	4603      	mov	r3, r0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3708      	adds	r7, #8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800cd4e:	b480      	push	{r7}
 800cd50:	b083      	sub	sp, #12
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 f8e3 	bl	800cf38 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800cd72:	4603      	mov	r3, r0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3708      	adds	r7, #8
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 f919 	bl	800cfbc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 800cd8a:	4603      	mov	r3, r0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800cd94:	b580      	push	{r7, lr}
 800cd96:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800cd98:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800cd9c:	f7f9 fcff 	bl	800679e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800cda0:	4603      	mov	r3, r0
  }
 800cda2:	4618      	mov	r0, r3
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800cda6:	b590      	push	{r4, r7, lr}
 800cda8:	b083      	sub	sp, #12
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
 800cdb0:	1d3b      	adds	r3, r7, #4
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7f9 fce8 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	681c      	ldr	r4, [r3, #0]
 800cdbc:	463b      	mov	r3, r7
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7f9 fce2 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f7f9 fd44 	bl	8006858 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7ff faec 	bl	800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	4618      	mov	r0, r3
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd90      	pop	{r4, r7, pc}

0800cde2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b082      	sub	sp, #8
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800cdea:	1d3b      	adds	r3, r7, #4
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7f9 fccb 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800cdf2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 f922 	bl	800d040 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff fad6 	bl	800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ce04:	4603      	mov	r3, r0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3708      	adds	r7, #8
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b082      	sub	sp, #8
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800ce16:	1d3b      	adds	r3, r7, #4
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7f9 fcb5 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ce1e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7f9 fd3a 	bl	800689c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7ff fac0 	bl	800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ce30:	4603      	mov	r3, r0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800ce3a:	b590      	push	{r4, r7, lr}
 800ce3c:	b083      	sub	sp, #12
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800ce44:	1d3b      	adds	r3, r7, #4
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7f9 fc9e 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ce4c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800ce4e:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800ce50:	463b      	mov	r3, r7
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7f9 fc98 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ce58:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 f8fa 	bl	800d058 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800ce64:	4603      	mov	r3, r0
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7ff faa2 	bl	800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ce6c:	4603      	mov	r3, r0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	370c      	adds	r7, #12
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd90      	pop	{r4, r7, pc}

0800ce76 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	bf0c      	ite	eq
 800ce84:	2301      	moveq	r3, #1
 800ce86:	2300      	movne	r3, #0
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7f9 fd20 	bl	80068d0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800ce90:	4603      	mov	r3, r0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800cea2:	210c      	movs	r1, #12
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7f9 fbe9 	bl	800667c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800ceaa:	4603      	mov	r3, r0
  }
 800ceac:	4618      	mov	r0, r3
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08a      	sub	sp, #40	; 0x28
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800cebc:	f7f9 fb09 	bl	80064d2 <_ZNSt14numeric_limitsIlE3minEv>
 800cec0:	4603      	mov	r3, r0
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7f9 fc8c 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cec8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800ceca:	f7f9 f902 	bl	80060d2 <_ZNSt14numeric_limitsIlE3maxEv>
 800cece:	4603      	mov	r3, r0
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7f9 fc85 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ced6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800ced8:	2320      	movs	r3, #32
 800ceda:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800cedc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cee0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800cee2:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800cee6:	f7f9 fc7b 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ceea:	4603      	mov	r3, r0
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7f9 fcc0 	bl	8006874 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800cef4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800cef6:	480f      	ldr	r0, [pc, #60]	; (800cf34 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800cef8:	f7f9 fc72 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cefc:	4603      	mov	r3, r0
 800cefe:	4619      	mov	r1, r3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7f9 fc95 	bl	8006830 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800cf06:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800cf08:	2102      	movs	r1, #2
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7f9 fd0a 	bl	8006924 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800cf10:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	6a39      	ldr	r1, [r7, #32]
 800cf16:	6978      	ldr	r0, [r7, #20]
 800cf18:	f7f9 fd4a 	bl	80069b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800cf1c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf22:	6938      	ldr	r0, [r7, #16]
 800cf24:	f7f9 fd44 	bl	80069b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800cf28:	60f8      	str	r0, [r7, #12]
    return result;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
  }
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3728      	adds	r7, #40	; 0x28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	e0000001 	.word	0xe0000001

0800cf38 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08a      	sub	sp, #40	; 0x28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800cf40:	f7f9 fac7 	bl	80064d2 <_ZNSt14numeric_limitsIlE3minEv>
 800cf44:	4603      	mov	r3, r0
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7f9 fc4a 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cf4c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800cf4e:	f7f9 f8c0 	bl	80060d2 <_ZNSt14numeric_limitsIlE3maxEv>
 800cf52:	4603      	mov	r3, r0
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7f9 fc43 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cf5a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800cf5c:	2320      	movs	r3, #32
 800cf5e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800cf60:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cf64:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800cf66:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800cf6a:	f7f9 fc39 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7f9 fc7e 	bl	8006874 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800cf78:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800cf7a:	480f      	ldr	r0, [pc, #60]	; (800cfb8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800cf7c:	f7f9 fc30 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cf80:	4603      	mov	r3, r0
 800cf82:	4619      	mov	r1, r3
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7f9 fc53 	bl	8006830 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800cf8a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800cf8c:	2101      	movs	r1, #1
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7f9 fcc8 	bl	8006924 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800cf94:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	6a39      	ldr	r1, [r7, #32]
 800cf9a:	6978      	ldr	r0, [r7, #20]
 800cf9c:	f7f9 fd08 	bl	80069b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800cfa0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfa6:	6938      	ldr	r0, [r7, #16]
 800cfa8:	f7f9 fd02 	bl	80069b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800cfac:	60f8      	str	r0, [r7, #12]
    return result;
 800cfae:	68fb      	ldr	r3, [r7, #12]
  }
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3728      	adds	r7, #40	; 0x28
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	c0000001 	.word	0xc0000001

0800cfbc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08a      	sub	sp, #40	; 0x28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800cfc4:	f7f9 fa85 	bl	80064d2 <_ZNSt14numeric_limitsIlE3minEv>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7f9 fc08 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cfd0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800cfd2:	f7f9 f87e 	bl	80060d2 <_ZNSt14numeric_limitsIlE3maxEv>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7f9 fc01 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cfde:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800cfe0:	2320      	movs	r3, #32
 800cfe2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800cfe4:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800cfe8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800cfea:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 800cfee:	f7f9 fbf7 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800cff2:	4603      	mov	r3, r0
 800cff4:	4619      	mov	r1, r3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7f9 fc3c 	bl	8006874 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800cffc:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800cffe:	480f      	ldr	r0, [pc, #60]	; (800d03c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 800d000:	f7f9 fbee 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d004:	4603      	mov	r3, r0
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7f9 fc11 	bl	8006830 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800d00e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800d010:	2105      	movs	r1, #5
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7f9 fc86 	bl	8006924 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800d018:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	6a39      	ldr	r1, [r7, #32]
 800d01e:	6978      	ldr	r0, [r7, #20]
 800d020:	f7f9 fcc6 	bl	80069b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800d024:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d02a:	6938      	ldr	r0, [r7, #16]
 800d02c:	f7f9 fcc0 	bl	80069b0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800d030:	60f8      	str	r0, [r7, #12]
    return result;
 800d032:	68fb      	ldr	r3, [r7, #12]
  }
 800d034:	4618      	mov	r0, r3
 800d036:	3728      	adds	r7, #40	; 0x28
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	fc000001 	.word	0xfc000001

0800d040 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f813 	bl	800d074 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800d04e:	4603      	mov	r3, r0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f812 	bl	800d08e <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800d06a:	4603      	mov	r3, r0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800d07c:	2102      	movs	r1, #2
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7f9 fafc 	bl	800667c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d084:	4603      	mov	r3, r0
  }
 800d086:	4618      	mov	r0, r3
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800d08e:	b580      	push	{r7, lr}
 800d090:	b082      	sub	sp, #8
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	6039      	str	r1, [r7, #0]
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7f9 fbdc 	bl	8006858 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
	...

0800d0ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800d0ac:	b5b0      	push	{r4, r5, r7, lr}
 800d0ae:	b08e      	sub	sp, #56	; 0x38
 800d0b0:	af04      	add	r7, sp, #16
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7f9 fd2d 	bl	8006b1a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800d0c0:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d10a      	bne.n	800d0de <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	695c      	ldr	r4, [r3, #20]
 800d0cc:	4b62      	ldr	r3, [pc, #392]	; (800d258 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 800d0ce:	9300      	str	r3, [sp, #0]
 800d0d0:	2323      	movs	r3, #35	; 0x23
 800d0d2:	4a62      	ldr	r2, [pc, #392]	; (800d25c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800d0d4:	4962      	ldr	r1, [pc, #392]	; (800d260 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	47a0      	blx	r4
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e0b8      	b.n	800d250 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800d0de:	2200      	movs	r2, #0
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7f9 fd29 	bl	8006b3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800d0e8:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10a      	bne.n	800d106 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	695c      	ldr	r4, [r3, #20]
 800d0f4:	4b5b      	ldr	r3, [pc, #364]	; (800d264 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	2325      	movs	r3, #37	; 0x25
 800d0fa:	4a58      	ldr	r2, [pc, #352]	; (800d25c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800d0fc:	4958      	ldr	r1, [pc, #352]	; (800d260 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	47a0      	blx	r4
 800d102:	2301      	movs	r3, #1
 800d104:	e0a4      	b.n	800d250 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 800d106:	69b8      	ldr	r0, [r7, #24]
 800d108:	f7fe fc50 	bl	800b9ac <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800d10c:	4602      	mov	r2, r0
 800d10e:	460b      	mov	r3, r1
 800d110:	4613      	mov	r3, r2
 800d112:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800d11a:	6838      	ldr	r0, [r7, #0]
 800d11c:	f7fe fbee 	bl	800b8fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800d120:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800d122:	2b01      	cmp	r3, #1
 800d124:	d109      	bne.n	800d13a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d105      	bne.n	800d13a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d101      	bne.n	800d13a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800d136:	2301      	movs	r3, #1
 800d138:	e000      	b.n	800d13c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800d13a:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 800d146:	2301      	movs	r3, #1
 800d148:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 800d14a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d14e:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 800d150:	2300      	movs	r3, #0
 800d152:	61fb      	str	r3, [r7, #28]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	69fa      	ldr	r2, [r7, #28]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	da2b      	bge.n	800d1b6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d170:	d118      	bne.n	800d1a4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800d172:	6a3b      	ldr	r3, [r7, #32]
 800d174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d178:	d011      	beq.n	800d19e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	695c      	ldr	r4, [r3, #20]
 800d17e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d182:	9303      	str	r3, [sp, #12]
 800d184:	6a3b      	ldr	r3, [r7, #32]
 800d186:	9302      	str	r3, [sp, #8]
 800d188:	4b37      	ldr	r3, [pc, #220]	; (800d268 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 800d18a:	9301      	str	r3, [sp, #4]
 800d18c:	4b37      	ldr	r3, [pc, #220]	; (800d26c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	233a      	movs	r3, #58	; 0x3a
 800d192:	4a32      	ldr	r2, [pc, #200]	; (800d25c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800d194:	4936      	ldr	r1, [pc, #216]	; (800d270 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	47a0      	blx	r4
 800d19a:	2301      	movs	r3, #1
 800d19c:	e058      	b.n	800d250 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	623b      	str	r3, [r7, #32]
 800d1a2:	e004      	b.n	800d1ae <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	fb02 f303 	mul.w	r3, r2, r3
 800d1ac:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	61fb      	str	r3, [r7, #28]
 800d1b4:	e7ce      	b.n	800d154 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1bc:	d011      	beq.n	800d1e2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800d1be:	693a      	ldr	r2, [r7, #16]
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c2:	fb92 f2f3 	sdiv	r2, r2, r3
 800d1c6:	68f9      	ldr	r1, [r7, #12]
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	440b      	add	r3, r1
 800d1ce:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	685a      	ldr	r2, [r3, #4]
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	fb02 f303 	mul.w	r3, r2, r3
 800d1e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	781a      	ldrb	r2, [r3, #0]
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d01a      	beq.n	800d224 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	695c      	ldr	r4, [r3, #20]
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f7 fa88 	bl	800470c <TfLiteTypeGetName>
 800d1fc:	4605      	mov	r5, r0
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	4618      	mov	r0, r3
 800d204:	f7f7 fa82 	bl	800470c <TfLiteTypeGetName>
 800d208:	4603      	mov	r3, r0
 800d20a:	9303      	str	r3, [sp, #12]
 800d20c:	9502      	str	r5, [sp, #8]
 800d20e:	4b19      	ldr	r3, [pc, #100]	; (800d274 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	4b19      	ldr	r3, [pc, #100]	; (800d278 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	2345      	movs	r3, #69	; 0x45
 800d218:	4a10      	ldr	r2, [pc, #64]	; (800d25c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800d21a:	4918      	ldr	r1, [pc, #96]	; (800d27c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	47a0      	blx	r4
 800d220:	2301      	movs	r3, #1
 800d222:	e015      	b.n	800d250 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800d224:	693a      	ldr	r2, [r7, #16]
 800d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d228:	429a      	cmp	r2, r3
 800d22a:	d010      	beq.n	800d24e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	695c      	ldr	r4, [r3, #20]
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	9303      	str	r3, [sp, #12]
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	9302      	str	r3, [sp, #8]
 800d238:	4b11      	ldr	r3, [pc, #68]	; (800d280 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 800d23a:	9301      	str	r3, [sp, #4]
 800d23c:	4b11      	ldr	r3, [pc, #68]	; (800d284 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	2346      	movs	r3, #70	; 0x46
 800d242:	4a06      	ldr	r2, [pc, #24]	; (800d25c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800d244:	490a      	ldr	r1, [pc, #40]	; (800d270 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	47a0      	blx	r4
 800d24a:	2301      	movs	r3, #1
 800d24c:	e000      	b.n	800d250 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3728      	adds	r7, #40	; 0x28
 800d254:	46bd      	mov	sp, r7
 800d256:	bdb0      	pop	{r4, r5, r7, pc}
 800d258:	08016800 	.word	0x08016800
 800d25c:	080167ac 	.word	0x080167ac
 800d260:	080167e8 	.word	0x080167e8
 800d264:	08016814 	.word	0x08016814
 800d268:	08016844 	.word	0x08016844
 800d26c:	08016848 	.word	0x08016848
 800d270:	08016828 	.word	0x08016828
 800d274:	08016870 	.word	0x08016870
 800d278:	08016880 	.word	0x08016880
 800d27c:	08016854 	.word	0x08016854
 800d280:	0801688c 	.word	0x0801688c
 800d284:	080168a0 	.word	0x080168a0

0800d288 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800d288:	b590      	push	{r4, r7, lr}
 800d28a:	b087      	sub	sp, #28
 800d28c:	af04      	add	r7, sp, #16
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800d292:	6838      	ldr	r0, [r7, #0]
 800d294:	f7fe fb32 	bl	800b8fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d007      	beq.n	800d2ae <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800d29e:	6838      	ldr	r0, [r7, #0]
 800d2a0:	f7fe fb2c 	bl	800b8fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d001      	beq.n	800d2ae <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e000      	b.n	800d2b0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00a      	beq.n	800d2ca <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	695c      	ldr	r4, [r3, #20]
 800d2b8:	4b27      	ldr	r3, [pc, #156]	; (800d358 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	234b      	movs	r3, #75	; 0x4b
 800d2be:	4a27      	ldr	r2, [pc, #156]	; (800d35c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800d2c0:	4927      	ldr	r1, [pc, #156]	; (800d360 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	47a0      	blx	r4
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e041      	b.n	800d34e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800d2ca:	6838      	ldr	r0, [r7, #0]
 800d2cc:	f7fe fb23 	bl	800b916 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	bf14      	ite	ne
 800d2d6:	2301      	movne	r3, #1
 800d2d8:	2300      	moveq	r3, #0
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d013      	beq.n	800d308 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	695c      	ldr	r4, [r3, #20]
 800d2e4:	6838      	ldr	r0, [r7, #0]
 800d2e6:	f7fe fb16 	bl	800b916 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	9203      	str	r2, [sp, #12]
 800d2f0:	9302      	str	r3, [sp, #8]
 800d2f2:	4b1c      	ldr	r3, [pc, #112]	; (800d364 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800d2f4:	9301      	str	r3, [sp, #4]
 800d2f6:	4b1c      	ldr	r3, [pc, #112]	; (800d368 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	234c      	movs	r3, #76	; 0x4c
 800d2fc:	4a17      	ldr	r2, [pc, #92]	; (800d35c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800d2fe:	491b      	ldr	r1, [pc, #108]	; (800d36c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	47a0      	blx	r4
 800d304:	2301      	movs	r3, #1
 800d306:	e022      	b.n	800d34e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f7ff fece 	bl	800d0ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	bf14      	ite	ne
 800d316:	2301      	movne	r3, #1
 800d318:	2300      	moveq	r3, #0
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d015      	beq.n	800d34c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	695c      	ldr	r4, [r3, #20]
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f7ff fec0 	bl	800d0ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800d32c:	4603      	mov	r3, r0
 800d32e:	461a      	mov	r2, r3
 800d330:	2300      	movs	r3, #0
 800d332:	9303      	str	r3, [sp, #12]
 800d334:	9202      	str	r2, [sp, #8]
 800d336:	4b0e      	ldr	r3, [pc, #56]	; (800d370 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	4b0e      	ldr	r3, [pc, #56]	; (800d374 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	234d      	movs	r3, #77	; 0x4d
 800d340:	4a06      	ldr	r2, [pc, #24]	; (800d35c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800d342:	490a      	ldr	r1, [pc, #40]	; (800d36c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	47a0      	blx	r4
 800d348:	2301      	movs	r3, #1
 800d34a:	e000      	b.n	800d34e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	370c      	adds	r7, #12
 800d352:	46bd      	mov	sp, r7
 800d354:	bd90      	pop	{r4, r7, pc}
 800d356:	bf00      	nop
 800d358:	080168b4 	.word	0x080168b4
 800d35c:	080167ac 	.word	0x080167ac
 800d360:	080167e8 	.word	0x080167e8
 800d364:	080168e4 	.word	0x080168e4
 800d368:	080168e8 	.word	0x080168e8
 800d36c:	08016828 	.word	0x08016828
 800d370:	080168fc 	.word	0x080168fc
 800d374:	08016908 	.word	0x08016908

0800d378 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800d382:	2200      	movs	r2, #0
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f7fe f970 	bl	800b66c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d38c:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800d38e:	2200      	movs	r2, #0
 800d390:	6839      	ldr	r1, [r7, #0]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7fe f97a 	bl	800b68c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800d398:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	7a1b      	ldrb	r3, [r3, #8]
 800d39e:	f107 020c 	add.w	r2, r7, #12
 800d3a2:	4611      	mov	r1, r2
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fa f825 	bl	80073f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	74fb      	strb	r3, [r7, #19]
 800d3ae:	7cfb      	ldrb	r3, [r7, #19]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 800d3b4:	7cfb      	ldrb	r3, [r7, #19]
 800d3b6:	e024      	b.n	800d402 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7fd ff49 	bl	800b254 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	fb02 f303 	mul.w	r3, r2, r3
 800d3ca:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d013      	beq.n	800d400 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 800d3d8:	2300      	movs	r3, #0
 800d3da:	61fb      	str	r3, [r7, #28]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	69fa      	ldr	r2, [r7, #28]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d20d      	bcs.n	800d400 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	441a      	add	r2, r3
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	6819      	ldr	r1, [r3, #0]
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	440b      	add	r3, r1
 800d3f4:	7812      	ldrb	r2, [r2, #0]
 800d3f6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	61fb      	str	r3, [r7, #28]
 800d3fe:	e7ed      	b.n	800d3dc <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3720      	adds	r7, #32
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
	...

0800d40c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 800d40c:	b4b0      	push	{r4, r5, r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a07      	ldr	r2, [pc, #28]	; (800d434 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 800d418:	461c      	mov	r4, r3
 800d41a:	4615      	mov	r5, r2
 800d41c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d41e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d420:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bcb0      	pop	{r4, r5, r7}
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	08016928 	.word	0x08016928

0800d438 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	fa02 f303 	lsl.w	r3, r2, r3
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f9 f858 	bl	8006504 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800d454:	4603      	mov	r3, r0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <_ZN6tflite10lut_lookupEsPKs>:
  return static_cast<LutOutT>(base + delta);
}

// int16_t -> int16_t table lookup with interpolation
// LUT must have 513 values
inline int16_t lut_lookup(int16_t value, const int16_t* lut) {
 800d45e:	b580      	push	{r7, lr}
 800d460:	b082      	sub	sp, #8
 800d462:	af00      	add	r7, sp, #0
 800d464:	4603      	mov	r3, r0
 800d466:	6039      	str	r1, [r7, #0]
 800d468:	80fb      	strh	r3, [r7, #6]
  return lut_lookup_with_interpolation(value, lut);
 800d46a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	4618      	mov	r0, r3
 800d472:	f000 fb87 	bl	800db84 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_>
 800d476:	4603      	mov	r3, r0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 800d480:	b580      	push	{r7, lr}
 800d482:	b088      	sub	sp, #32
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	4618      	mov	r0, r3
 800d490:	f7f9 f968 	bl	8006764 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800d494:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	1ad2      	subs	r2, r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 800d4ac:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 800d4ae:	69b8      	ldr	r0, [r7, #24]
 800d4b0:	f7fe ff7e 	bl	800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe ff8c 	bl	800c3d4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800d4c0:	f107 0314 	add.w	r3, r7, #20
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7f9 f95f 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	681b      	ldr	r3, [r3, #0]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3720      	adds	r7, #32
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	ed2d 8b02 	vpush	{d8}
 800d4dc:	b08e      	sub	sp, #56	; 0x38
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	60f8      	str	r0, [r7, #12]
 800d4e2:	60b9      	str	r1, [r7, #8]
 800d4e4:	607a      	str	r2, [r7, #4]
 800d4e6:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800d4e8:	68b8      	ldr	r0, [r7, #8]
 800d4ea:	f7f9 ff0d 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	6a39      	ldr	r1, [r7, #32]
 800d4f8:	68b8      	ldr	r0, [r7, #8]
 800d4fa:	f7fe fedc 	bl	800c2b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800d4fe:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800d500:	6a3b      	ldr	r3, [r7, #32]
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	6a39      	ldr	r1, [r7, #32]
 800d506:	68b8      	ldr	r0, [r7, #8]
 800d508:	f7fe fa21 	bl	800b94e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800d50c:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 800d50e:	2300      	movs	r3, #0
 800d510:	637b      	str	r3, [r7, #52]	; 0x34
 800d512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	429a      	cmp	r2, r3
 800d518:	f280 8087 	bge.w	800d62a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 800d51c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800d520:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800d522:	2300      	movs	r3, #0
 800d524:	633b      	str	r3, [r7, #48]	; 0x30
 800d526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	da15      	bge.n	800d55a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 800d52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d530:	69ba      	ldr	r2, [r7, #24]
 800d532:	fb02 f203 	mul.w	r2, r2, r3
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	4413      	add	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	441a      	add	r2, r3
 800d540:	f107 0310 	add.w	r3, r7, #16
 800d544:	4611      	mov	r1, r2
 800d546:	4618      	mov	r0, r3
 800d548:	f7f8 ff5e 	bl	8006408 <_ZSt3maxIfERKT_S2_S2_>
 800d54c:	4603      	mov	r3, r0
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 800d552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d554:	3301      	adds	r3, #1
 800d556:	633b      	str	r3, [r7, #48]	; 0x30
 800d558:	e7e5      	b.n	800d526 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 800d55a:	f04f 0300 	mov.w	r3, #0
 800d55e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800d560:	2300      	movs	r3, #0
 800d562:	62bb      	str	r3, [r7, #40]	; 0x28
 800d564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	429a      	cmp	r2, r3
 800d56a:	da36      	bge.n	800d5da <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800d56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d56e:	69ba      	ldr	r2, [r7, #24]
 800d570:	fb02 f203 	mul.w	r2, r2, r3
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d576:	4413      	add	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	4413      	add	r3, r2
 800d57e:	ed93 7a00 	vldr	s14, [r3]
 800d582:	edd7 7a04 	vldr	s15, [r7, #16]
 800d586:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	4610      	mov	r0, r2
 800d592:	4619      	mov	r1, r3
 800d594:	f7f3 fb32 	bl	8000bfc <__aeabi_d2f>
 800d598:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800d59c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d5a0:	eeb0 0a67 	vmov.f32	s0, s15
 800d5a4:	f7f8 ff9e 	bl	80064e4 <_ZSt3expf>
 800d5a8:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 800d5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ae:	69ba      	ldr	r2, [r7, #24]
 800d5b0:	fb02 f203 	mul.w	r2, r2, r3
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	4413      	add	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5bc:	4413      	add	r3, r2
 800d5be:	697a      	ldr	r2, [r7, #20]
 800d5c0:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 800d5c2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d5c6:	edd7 7a05 	vldr	s15, [r7, #20]
 800d5ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5d8:	e7c4      	b.n	800d564 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800d5da:	2300      	movs	r3, #0
 800d5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800d5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	da1d      	bge.n	800d622 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 800d5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e8:	69ba      	ldr	r2, [r7, #24]
 800d5ea:	fb02 f203 	mul.w	r2, r2, r3
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	4413      	add	r3, r2
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5f6:	4413      	add	r3, r2
 800d5f8:	edd3 6a00 	vldr	s13, [r3]
 800d5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fe:	69ba      	ldr	r2, [r7, #24]
 800d600:	fb02 f203 	mul.w	r2, r2, r3
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	4413      	add	r3, r2
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d60c:	4413      	add	r3, r2
 800d60e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d616:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	3301      	adds	r3, #1
 800d61e:	627b      	str	r3, [r7, #36]	; 0x24
 800d620:	e7dd      	b.n	800d5de <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 800d622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d624:	3301      	adds	r3, #1
 800d626:	637b      	str	r3, [r7, #52]	; 0x34
 800d628:	e773      	b.n	800d512 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 800d62a:	bf00      	nop
 800d62c:	3738      	adds	r7, #56	; 0x38
 800d62e:	46bd      	mov	sp, r7
 800d630:	ecbd 8b02 	vpop	{d8}
 800d634:	bd80      	pop	{r7, pc}
	...

0800d638 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08a      	sub	sp, #40	; 0x28
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
 800d644:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	fb02 f203 	mul.w	r2, r2, r3
 800d64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d650:	4413      	add	r3, r2
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	4413      	add	r3, r2
 800d658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d65c:	461a      	mov	r2, r3
 800d65e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6899      	ldr	r1, [r3, #8]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 800d66e:	461a      	mov	r2, r3
 800d670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d672:	f7f8 ffb7 	bl	80065e4 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800d676:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 800d678:	6a3a      	ldr	r2, [r7, #32]
 800d67a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d67e:	4413      	add	r3, r2
 800d680:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800d682:	4b12      	ldr	r3, [pc, #72]	; (800d6cc <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 800d684:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 800d686:	f107 0214 	add.w	r2, r7, #20
 800d68a:	f107 0310 	add.w	r3, r7, #16
 800d68e:	4611      	mov	r1, r2
 800d690:	4618      	mov	r0, r3
 800d692:	f7f8 ffdf 	bl	8006654 <_ZSt3maxIlERKT_S2_S2_>
 800d696:	4602      	mov	r2, r0
 800d698:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d69c:	61bb      	str	r3, [r7, #24]
 800d69e:	f107 0318 	add.w	r3, r7, #24
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	f7f8 ffc1 	bl	800662c <_ZSt3minIlERKT_S2_S2_>
 800d6aa:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 800d6ac:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 800d6ae:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return lut_lookup(sat_sym_scaled_diff, params.exp_lut);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff fecf 	bl	800d45e <_ZN6tflite10lut_lookupEsPKs>
 800d6c0:	4603      	mov	r3, r0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3728      	adds	r7, #40	; 0x28
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	ffff8000 	.word	0xffff8000

0800d6d0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 800d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d4:	b0a1      	sub	sp, #132	; 0x84
 800d6d6:	af02      	add	r7, sp, #8
 800d6d8:	6178      	str	r0, [r7, #20]
 800d6da:	6139      	str	r1, [r7, #16]
 800d6dc:	60fa      	str	r2, [r7, #12]
 800d6de:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800d6e0:	6938      	ldr	r0, [r7, #16]
 800d6e2:	f7f9 fe11 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d6f0:	6938      	ldr	r0, [r7, #16]
 800d6f2:	f7fe fde0 	bl	800c2b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800d6f6:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800d6f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d6fe:	6938      	ldr	r0, [r7, #16]
 800d700:	f7fe f925 	bl	800b94e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800d704:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 800d706:	2300      	movs	r3, #0
 800d708:	677b      	str	r3, [r7, #116]	; 0x74
 800d70a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d70c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d70e:	429a      	cmp	r2, r3
 800d710:	f280 8119 	bge.w	800d946 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 800d714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d718:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 800d71a:	2300      	movs	r3, #0
 800d71c:	673b      	str	r3, [r7, #112]	; 0x70
 800d71e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d722:	429a      	cmp	r2, r3
 800d724:	da16      	bge.n	800d754 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800d726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d728:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d72a:	fb02 f203 	mul.w	r2, r2, r3
 800d72e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d730:	4413      	add	r3, r2
 800d732:	005b      	lsls	r3, r3, #1
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	441a      	add	r2, r3
 800d738:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800d73c:	4611      	mov	r1, r2
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fe f844 	bl	800b7cc <_ZSt3maxIsERKT_S2_S2_>
 800d744:	4603      	mov	r3, r0
 800d746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d74a:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 800d74c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d74e:	3301      	adds	r3, #1
 800d750:	673b      	str	r3, [r7, #112]	; 0x70
 800d752:	e7e4      	b.n	800d71e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 800d754:	2300      	movs	r3, #0
 800d756:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 800d758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d75a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d75c:	fb02 f303 	mul.w	r3, r2, r3
 800d760:	005b      	lsls	r3, r3, #1
 800d762:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d766:	4413      	add	r3, r2
 800d768:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 800d76a:	2300      	movs	r3, #0
 800d76c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d76e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d772:	429a      	cmp	r2, r3
 800d774:	da1f      	bge.n	800d7b6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800d776:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 800d77a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d77c:	005b      	lsls	r3, r3, #1
 800d77e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d780:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 800d782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d784:	9301      	str	r3, [sp, #4]
 800d786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	460b      	mov	r3, r1
 800d78c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d78e:	68f9      	ldr	r1, [r7, #12]
 800d790:	6978      	ldr	r0, [r7, #20]
 800d792:	f7ff ff51 	bl	800d638 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 800d796:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 800d798:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 800d79a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7aa:	4413      	add	r3, r2
 800d7ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 800d7ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d7b4:	e7db      	b.n	800d76e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 800d7b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7f8 ffd3 	bl	8006764 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 800d7c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d7cc:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 800d7d0:	3901      	subs	r1, #1
 800d7d2:	f1a1 0620 	sub.w	r6, r1, #32
 800d7d6:	f1c1 0020 	rsb	r0, r1, #32
 800d7da:	fa03 f501 	lsl.w	r5, r3, r1
 800d7de:	fa02 f606 	lsl.w	r6, r2, r6
 800d7e2:	4335      	orrs	r5, r6
 800d7e4:	fa22 f000 	lsr.w	r0, r2, r0
 800d7e8:	4305      	orrs	r5, r0
 800d7ea:	fa02 f401 	lsl.w	r4, r2, r1
 800d7ee:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 800d7f2:	603b      	str	r3, [r7, #0]
 800d7f4:	f145 0300 	adc.w	r3, r5, #0
 800d7f8:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 800d7fa:	f04f 0200 	mov.w	r2, #0
 800d7fe:	f04f 0300 	mov.w	r3, #0
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	0b8a      	lsrs	r2, r1, #14
 800d806:	6879      	ldr	r1, [r7, #4]
 800d808:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 800d810:	4613      	mov	r3, r2
 800d812:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 800d814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d816:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 800d81a:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800d81c:	4b4c      	ldr	r3, [pc, #304]	; (800d950 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 800d81e:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 800d820:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d824:	f107 0320 	add.w	r3, r7, #32
 800d828:	4611      	mov	r1, r2
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7f8 ff12 	bl	8006654 <_ZSt3maxIlERKT_S2_S2_>
 800d830:	4602      	mov	r2, r0
 800d832:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d836:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d83c:	4619      	mov	r1, r3
 800d83e:	4610      	mov	r0, r2
 800d840:	f7f8 fef4 	bl	800662c <_ZSt3minIlERKT_S2_S2_>
 800d844:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 800d846:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 800d848:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 =
        lut_lookup(sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d850:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800d854:	4611      	mov	r1, r2
 800d856:	4618      	mov	r0, r3
 800d858:	f7ff fe01 	bl	800d45e <_ZN6tflite10lut_lookupEsPKs>
 800d85c:	4603      	mov	r3, r0
 800d85e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 800d862:	2300      	movs	r3, #0
 800d864:	667b      	str	r3, [r7, #100]	; 0x64
 800d866:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d86a:	429a      	cmp	r2, r3
 800d86c:	da67      	bge.n	800d93e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 800d86e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d872:	f1c3 031f 	rsb	r3, r3, #31
 800d876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 800d87a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d87e:	3b01      	subs	r3, #1
 800d880:	2201      	movs	r2, #1
 800d882:	fa02 f303 	lsl.w	r3, r2, r3
 800d886:	461a      	mov	r2, r3
 800d888:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d88c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800d890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d892:	005b      	lsls	r3, r3, #1
 800d894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d896:	4413      	add	r3, r2
 800d898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d89c:	b218      	sxth	r0, r3
 800d89e:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800d8a2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800d8a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800d8aa:	fb02 fc01 	mul.w	ip, r2, r1
 800d8ae:	fb00 f603 	mul.w	r6, r0, r3
 800d8b2:	4466      	add	r6, ip
 800d8b4:	fba0 2302 	umull	r2, r3, r0, r2
 800d8b8:	18f1      	adds	r1, r6, r3
 800d8ba:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 800d8bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d8c0:	eb12 0a00 	adds.w	sl, r2, r0
 800d8c4:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 800d8c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 800d8cc:	f1c3 0120 	rsb	r1, r3, #32
 800d8d0:	f1b3 0220 	subs.w	r2, r3, #32
 800d8d4:	fa2a f803 	lsr.w	r8, sl, r3
 800d8d8:	fa0b f101 	lsl.w	r1, fp, r1
 800d8dc:	ea48 0801 	orr.w	r8, r8, r1
 800d8e0:	d403      	bmi.n	800d8ea <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 800d8e2:	fa4b f202 	asr.w	r2, fp, r2
 800d8e6:	ea48 0802 	orr.w	r8, r8, r2
 800d8ea:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 800d8ee:	4643      	mov	r3, r8
 800d8f0:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 800d8f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d8fa:	f107 031c 	add.w	r3, r7, #28
 800d8fe:	4611      	mov	r1, r2
 800d900:	4618      	mov	r0, r3
 800d902:	f7f8 fea7 	bl	8006654 <_ZSt3maxIlERKT_S2_S2_>
 800d906:	4602      	mov	r2, r0
 800d908:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d90c:	637b      	str	r3, [r7, #52]	; 0x34
 800d90e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d912:	4619      	mov	r1, r3
 800d914:	4610      	mov	r0, r2
 800d916:	f7f8 fe89 	bl	800662c <_ZSt3minIlERKT_S2_S2_>
 800d91a:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 800d91c:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 800d91e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d922:	fb02 f203 	mul.w	r2, r2, r3
 800d926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d928:	4413      	add	r3, r2
 800d92a:	005b      	lsls	r3, r3, #1
 800d92c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d930:	4413      	add	r3, r2
 800d932:	b20a      	sxth	r2, r1
 800d934:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 800d936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d938:	3301      	adds	r3, #1
 800d93a:	667b      	str	r3, [r7, #100]	; 0x64
 800d93c:	e793      	b.n	800d866 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 800d93e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d940:	3301      	adds	r3, #1
 800d942:	677b      	str	r3, [r7, #116]	; 0x74
 800d944:	e6e1      	b.n	800d70a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 800d946:	bf00      	nop
 800d948:	377c      	adds	r7, #124	; 0x7c
 800d94a:	46bd      	mov	sp, r7
 800d94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d950:	ffff8000 	.word	0xffff8000

0800d954 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 800d954:	b590      	push	{r4, r7, lr}
 800d956:	b0ab      	sub	sp, #172	; 0xac
 800d958:	af02      	add	r7, sp, #8
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteInt8) {
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	7a1b      	ldrb	r3, [r3, #8]
 800d964:	2b09      	cmp	r3, #9
 800d966:	d153      	bne.n	800da10 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xbc>
    if (output->type == kTfLiteInt16) {
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	7a1b      	ldrb	r3, [r3, #8]
 800d96c:	2b07      	cmp	r3, #7
 800d96e:	d127      	bne.n	800d9c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x6c>
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 800d970:	f107 0310 	add.w	r3, r7, #16
 800d974:	68f9      	ldr	r1, [r7, #12]
 800d976:	4618      	mov	r0, r3
 800d978:	f7fe fc7b 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f7fd fec5 	bl	800b70c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d982:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
 800d984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d988:	68b9      	ldr	r1, [r7, #8]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fc71 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d990:	68b8      	ldr	r0, [r7, #8]
 800d992:	f7fd ffa2 	bl	800b8da <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800d996:	4602      	mov	r2, r0
 800d998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d99c:	f107 0110 	add.w	r1, r7, #16
 800d9a0:	9200      	str	r2, [sp, #0]
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 f93b 	bl	800dc20 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800d9aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7f9 fc9f 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800d9b4:	f107 0310 	add.w	r3, r7, #16
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7f9 fc9a 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 800d9be:	e04e      	b.n	800da5e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
          op_data, tflite::micro::GetTensorShape(input),
 800d9c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d9c4:	68f9      	ldr	r1, [r7, #12]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fe fc53 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f7fd fe9d 	bl	800b70c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d9d2:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 800d9d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d9d8:	68b9      	ldr	r1, [r7, #8]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fe fc49 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d9e0:	68b8      	ldr	r0, [r7, #8]
 800d9e2:	f7fd fea2 	bl	800b72a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d9ec:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d9f0:	9200      	str	r2, [sp, #0]
 800d9f2:	4622      	mov	r2, r4
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fa31 	bl	800de5c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 800d9fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7f9 fc77 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800da04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800da08:	4618      	mov	r0, r3
 800da0a:	f7f9 fc72 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800da0e:	e026      	b.n	800da5e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
        op_data, tflite::micro::GetTensorShape(input),
 800da10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da14:	68f9      	ldr	r1, [r7, #12]
 800da16:	4618      	mov	r0, r3
 800da18:	f7fe fc2b 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7fd ff4d 	bl	800b8bc <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800da22:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 800da24:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800da28:	68b9      	ldr	r1, [r7, #8]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fe fc21 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 800da30:	68b8      	ldr	r0, [r7, #8]
 800da32:	f7fd ff52 	bl	800b8da <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800da36:	4602      	mov	r2, r0
 800da38:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800da3c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800da40:	9200      	str	r2, [sp, #0]
 800da42:	4622      	mov	r2, r4
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7ff fe43 	bl	800d6d0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 800da4a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800da4e:	4618      	mov	r0, r3
 800da50:	f7f9 fc4f 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 800da54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800da58:	4618      	mov	r0, r3
 800da5a:	f7f9 fc4a 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800da5e:	bf00      	nop
 800da60:	37a4      	adds	r7, #164	; 0xa4
 800da62:	46bd      	mov	sp, r7
 800da64:	bd90      	pop	{r4, r7, pc}
	...

0800da68 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800da68:	b5b0      	push	{r4, r5, r7, lr}
 800da6a:	b0a0      	sub	sp, #128	; 0x80
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 800da72:	2200      	movs	r2, #0
 800da74:	6839      	ldr	r1, [r7, #0]
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f7fd fdf8 	bl	800b66c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800da7c:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 800da7e:	2200      	movs	r2, #0
 800da80:	6839      	ldr	r1, [r7, #0]
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7fd fe02 	bl	800b68c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800da88:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 800da92:	f001 fed6 	bl	800f842 <abort>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	691b      	ldr	r3, [r3, #16]
 800da9a:	f107 0408 	add.w	r4, r7, #8
 800da9e:	461d      	mov	r5, r3
 800daa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daac:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dab0:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 800dab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dab6:	7a1b      	ldrb	r3, [r3, #8]
 800dab8:	2b09      	cmp	r3, #9
 800daba:	d030      	beq.n	800db1e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 800dabc:	2b09      	cmp	r3, #9
 800dabe:	dc37      	bgt.n	800db30 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d002      	beq.n	800daca <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
 800dac4:	2b07      	cmp	r3, #7
 800dac6:	d02a      	beq.n	800db1e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 800dac8:	e032      	b.n	800db30 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 800daca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dace:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fe fbce 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800dad6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800dad8:	f7fd fdf8 	bl	800b6cc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800dadc:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 800dade:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dae2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fe fbc4 	bl	800c272 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800daea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800daec:	f7fd fdfd 	bl	800b6ea <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800daf0:	4602      	mov	r2, r0
 800daf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800daf6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800dafa:	f107 0008 	add.w	r0, r7, #8
 800dafe:	9200      	str	r2, [sp, #0]
 800db00:	4622      	mov	r2, r4
 800db02:	f7ff fce8 	bl	800d4d6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 800db06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7f9 fbf1 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 800db10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800db14:	4618      	mov	r0, r3
 800db16:	f7f9 fbec 	bl	80072f2 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e016      	b.n	800db4c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    case kTfLiteInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, op_data);
 800db1e:	f107 0308 	add.w	r3, r7, #8
 800db22:	461a      	mov	r2, r3
 800db24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800db26:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800db28:	f7ff ff14 	bl	800d954 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800db2c:	2300      	movs	r3, #0
 800db2e:	e00d      	b.n	800db4c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	695c      	ldr	r4, [r3, #20]
 800db34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db36:	7a1b      	ldrb	r3, [r3, #8]
 800db38:	4618      	mov	r0, r3
 800db3a:	f7f6 fde7 	bl	800470c <TfLiteTypeGetName>
 800db3e:	4602      	mov	r2, r0
 800db40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db42:	7a1b      	ldrb	r3, [r3, #8]
 800db44:	4903      	ldr	r1, [pc, #12]	; (800db54 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800db4a:	2301      	movs	r3, #1
  }
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3778      	adds	r7, #120	; 0x78
 800db50:	46bd      	mov	sp, r7
 800db52:	bdb0      	pop	{r4, r5, r7, pc}
 800db54:	08016948 	.word	0x08016948

0800db58 <_ZN6tflite16Register_SOFTMAXEv>:
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 800db58:	b4b0      	push	{r4, r5, r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4a07      	ldr	r2, [pc, #28]	; (800db80 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 800db64:	461c      	mov	r4, r3
 800db66:	4615      	mov	r5, r2
 800db68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800db70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	bcb0      	pop	{r4, r5, r7}
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop
 800db80:	08016964 	.word	0x08016964

0800db84 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_>:
inline LutOutT lut_lookup_with_interpolation(int16_t value,
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	4603      	mov	r3, r0
 800db8c:	6039      	str	r1, [r7, #0]
 800db8e:	80fb      	strh	r3, [r7, #6]
  const uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 800db90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db94:	11db      	asrs	r3, r3, #7
 800db96:	b29b      	uxth	r3, r3
 800db98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800db9c:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 800db9e:	8afb      	ldrh	r3, [r7, #22]
 800dba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dba4:	d306      	bcc.n	800dbb4 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x30>
 800dba6:	4b1b      	ldr	r3, [pc, #108]	; (800dc14 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x90>)
 800dba8:	4a1b      	ldr	r2, [pc, #108]	; (800dc18 <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x94>)
 800dbaa:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800dbae:	481b      	ldr	r0, [pc, #108]	; (800dc1c <_ZN6tflite29lut_lookup_with_interpolationIsEET_sPKS1_+0x98>)
 800dbb0:	f001 fe4e 	bl	800f850 <__assert_func>
  const int16_t offset = value & 0x7f;
 800dbb4:	88fb      	ldrh	r3, [r7, #6]
 800dbb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbba:	82bb      	strh	r3, [r7, #20]
  const LutOutT base = lut[index];
 800dbbc:	8afb      	ldrh	r3, [r7, #22]
 800dbbe:	005b      	lsls	r3, r3, #1
 800dbc0:	683a      	ldr	r2, [r7, #0]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	827b      	strh	r3, [r7, #18]
  const LutOutT slope = lut[index + 1] - lut[index];
 800dbc8:	8afb      	ldrh	r3, [r7, #22]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	683a      	ldr	r2, [r7, #0]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbd6:	b29a      	uxth	r2, r3
 800dbd8:	8afb      	ldrh	r3, [r7, #22]
 800dbda:	005b      	lsls	r3, r3, #1
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	440b      	add	r3, r1
 800dbe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	823b      	strh	r3, [r7, #16]
  const int delta = (slope * offset + 64) >> 7;
 800dbec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dbf0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800dbf4:	fb02 f303 	mul.w	r3, r2, r3
 800dbf8:	3340      	adds	r3, #64	; 0x40
 800dbfa:	11db      	asrs	r3, r3, #7
 800dbfc:	60fb      	str	r3, [r7, #12]
  return static_cast<LutOutT>(base + delta);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	8a7b      	ldrh	r3, [r7, #18]
 800dc04:	4413      	add	r3, r2
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	b21b      	sxth	r3, r3
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	08016a64 	.word	0x08016a64
 800dc18:	08016a90 	.word	0x08016a90
 800dc1c:	08016b08 	.word	0x08016b08

0800dc20 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800dc20:	b590      	push	{r4, r7, lr}
 800dc22:	b09f      	sub	sp, #124	; 0x7c
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
 800dc2c:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	699b      	ldr	r3, [r3, #24]
 800dc3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800dc40:	68b8      	ldr	r0, [r7, #8]
 800dc42:	f7f9 fb61 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800dc46:	4603      	mov	r3, r0
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800dc4c:	683a      	ldr	r2, [r7, #0]
 800dc4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc50:	68b8      	ldr	r0, [r7, #8]
 800dc52:	f7fe fb30 	bl	800c2b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800dc56:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800dc58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc5e:	68b8      	ldr	r0, [r7, #8]
 800dc60:	f7fd fe75 	bl	800b94e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800dc64:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800dc66:	2300      	movs	r3, #0
 800dc68:	677b      	str	r3, [r7, #116]	; 0x74
 800dc6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dc6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	f280 80f0 	bge.w	800de54 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800dc74:	2380      	movs	r3, #128	; 0x80
 800dc76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	673b      	str	r3, [r7, #112]	; 0x70
 800dc7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc82:	429a      	cmp	r2, r3
 800dc84:	da17      	bge.n	800dcb6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800dc86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc8a:	fb02 f203 	mul.w	r2, r2, r3
 800dc8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc90:	4413      	add	r3, r2
 800dc92:	461a      	mov	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	441a      	add	r2, r3
 800dc98:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff f805 	bl	800ccae <_ZSt3maxIaERKT_S2_S2_>
 800dca4:	4603      	mov	r3, r0
 800dca6:	f993 3000 	ldrsb.w	r3, [r3]
 800dcaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800dcae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	673b      	str	r3, [r7, #112]	; 0x70
 800dcb4:	e7e3      	b.n	800dc7e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800dcb6:	f000 f9ef 	bl	800e098 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dcc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dcc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	da30      	bge.n	800dd2c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800dcca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dcce:	fb02 f203 	mul.w	r2, r2, r3
 800dcd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcd4:	4413      	add	r3, r2
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f993 3000 	ldrsb.w	r3, [r3]
 800dce0:	461a      	mov	r2, r3
 800dce2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800dcea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dcec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	db18      	blt.n	800dd24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800dcf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcf4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dcf6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dcf8:	f7ff fb9e 	bl	800d438 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800dcfc:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800dcfe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dd00:	f7fe fbc8 	bl	800c494 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800dd04:	4603      	mov	r3, r0
 800dd06:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800dd08:	69f8      	ldr	r0, [r7, #28]
 800dd0a:	f7fe fbd5 	bl	800c4b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fe fd19 	bl	800c748 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800dd16:	4603      	mov	r3, r0
 800dd18:	4619      	mov	r1, r3
 800dd1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd1c:	f7fe fd2e 	bl	800c77c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800dd20:	4603      	mov	r3, r0
 800dd22:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800dd24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd26:	3301      	adds	r3, #1
 800dd28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd2a:	e7ca      	b.n	800dcc2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800dd2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe ff94 	bl	800cc5e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800dd36:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dd3e:	210c      	movs	r1, #12
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff fb9d 	bl	800d480 <_ZN6tflite13GetReciprocalEliPi>
 800dd46:	4603      	mov	r3, r0
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fe fb31 	bl	800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800dd52:	2300      	movs	r3, #0
 800dd54:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	da76      	bge.n	800de4c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800dd5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd62:	fb02 f203 	mul.w	r2, r2, r3
 800dd66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd68:	4413      	add	r3, r2
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4413      	add	r3, r2
 800dd70:	f993 3000 	ldrsb.w	r3, [r3]
 800dd74:	461a      	mov	r2, r3
 800dd76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800dd7a:	1ad3      	subs	r3, r2, r3
 800dd7c:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800dd7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd82:	429a      	cmp	r2, r3
 800dd84:	db50      	blt.n	800de28 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800dd86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd88:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dd8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dd8c:	f7ff fb54 	bl	800d438 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800dd90:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800dd92:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dd94:	f7fe fb7e 	bl	800c494 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800dd9c:	69b8      	ldr	r0, [r7, #24]
 800dd9e:	f7fe fb8b 	bl	800c4b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800dda2:	4603      	mov	r3, r0
 800dda4:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800dda6:	6979      	ldr	r1, [r7, #20]
 800dda8:	6a38      	ldr	r0, [r7, #32]
 800ddaa:	f7fe ff03 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	633b      	str	r3, [r7, #48]	; 0x30
 800ddb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7f8 fce6 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ddbc:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800ddbe:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800ddc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddc2:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7f8 fc58 	bl	800667c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800ddcc:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800ddce:	f7f8 fb6d 	bl	80064ac <_ZNSt14numeric_limitsIsE3minEv>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	461a      	mov	r2, r3
            unsat_output +
 800ddd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd8:	4413      	add	r3, r2
        const int32_t shifted_output =
 800ddda:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800dddc:	f7f8 fb70 	bl	80064c0 <_ZNSt14numeric_limitsIsE3maxEv>
 800dde0:	4603      	mov	r3, r0
 800dde2:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800dde4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800dde8:	f107 0310 	add.w	r3, r7, #16
 800ddec:	4611      	mov	r1, r2
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7f8 fc1c 	bl	800662c <_ZSt3minIlERKT_S2_S2_>
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	f7f8 fb59 	bl	80064ac <_ZNSt14numeric_limitsIsE3minEv>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800de02:	4619      	mov	r1, r3
 800de04:	4620      	mov	r0, r4
 800de06:	f7f8 fc25 	bl	8006654 <_ZSt3maxIlERKT_S2_S2_>
 800de0a:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800de0c:	6819      	ldr	r1, [r3, #0]
 800de0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de12:	fb02 f203 	mul.w	r2, r2, r3
 800de16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de18:	4413      	add	r3, r2
 800de1a:	005b      	lsls	r3, r3, #1
 800de1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800de20:	4413      	add	r3, r2
 800de22:	b20a      	sxth	r2, r1
 800de24:	801a      	strh	r2, [r3, #0]
 800de26:	e00d      	b.n	800de44 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800de28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de2c:	fb02 f203 	mul.w	r2, r2, r3
 800de30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de32:	4413      	add	r3, r2
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800de3a:	18d4      	adds	r4, r2, r3
 800de3c:	f7f8 fb36 	bl	80064ac <_ZNSt14numeric_limitsIsE3minEv>
 800de40:	4603      	mov	r3, r0
 800de42:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800de44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de46:	3301      	adds	r3, #1
 800de48:	66bb      	str	r3, [r7, #104]	; 0x68
 800de4a:	e784      	b.n	800dd56 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800de4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de4e:	3301      	adds	r3, #1
 800de50:	677b      	str	r3, [r7, #116]	; 0x74
 800de52:	e70a      	b.n	800dc6a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800de54:	bf00      	nop
 800de56:	377c      	adds	r7, #124	; 0x7c
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd90      	pop	{r4, r7, pc}

0800de5c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800de5c:	b590      	push	{r4, r7, lr}
 800de5e:	b09f      	sub	sp, #124	; 0x7c
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	607a      	str	r2, [r7, #4]
 800de68:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	689b      	ldr	r3, [r3, #8]
 800de6e:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800de7c:	68b8      	ldr	r0, [r7, #8]
 800de7e:	f7f9 fa43 	bl	8007308 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800de82:	4603      	mov	r3, r0
 800de84:	3b01      	subs	r3, #1
 800de86:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800de88:	683a      	ldr	r2, [r7, #0]
 800de8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de8c:	68b8      	ldr	r0, [r7, #8]
 800de8e:	f7fe fa12 	bl	800c2b6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800de92:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800de94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de9a:	68b8      	ldr	r0, [r7, #8]
 800de9c:	f7fd fd57 	bl	800b94e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800dea0:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800dea2:	2300      	movs	r3, #0
 800dea4:	677b      	str	r3, [r7, #116]	; 0x74
 800dea6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deaa:	429a      	cmp	r2, r3
 800deac:	f280 80f0 	bge.w	800e090 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800deb0:	2380      	movs	r3, #128	; 0x80
 800deb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800deb6:	2300      	movs	r3, #0
 800deb8:	673b      	str	r3, [r7, #112]	; 0x70
 800deba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800debc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800debe:	429a      	cmp	r2, r3
 800dec0:	da17      	bge.n	800def2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800dec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dec4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dec6:	fb02 f203 	mul.w	r2, r2, r3
 800deca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800decc:	4413      	add	r3, r2
 800dece:	461a      	mov	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	441a      	add	r2, r3
 800ded4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800ded8:	4611      	mov	r1, r2
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fe fee7 	bl	800ccae <_ZSt3maxIaERKT_S2_S2_>
 800dee0:	4603      	mov	r3, r0
 800dee2:	f993 3000 	ldrsb.w	r3, [r3]
 800dee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800deea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800deec:	3301      	adds	r3, #1
 800deee:	673b      	str	r3, [r7, #112]	; 0x70
 800def0:	e7e3      	b.n	800deba <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800def2:	f000 f8d1 	bl	800e098 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800def6:	4603      	mov	r3, r0
 800def8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800defa:	2300      	movs	r3, #0
 800defc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800defe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df02:	429a      	cmp	r2, r3
 800df04:	da30      	bge.n	800df68 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800df06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df0a:	fb02 f203 	mul.w	r2, r2, r3
 800df0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df10:	4413      	add	r3, r2
 800df12:	461a      	mov	r2, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4413      	add	r3, r2
 800df18:	f993 3000 	ldrsb.w	r3, [r3]
 800df1c:	461a      	mov	r2, r3
 800df1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800df22:	1ad3      	subs	r3, r2, r3
 800df24:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800df26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df2a:	429a      	cmp	r2, r3
 800df2c:	db18      	blt.n	800df60 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800df2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df30:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800df32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df34:	f7ff fa80 	bl	800d438 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800df38:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800df3a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800df3c:	f7fe faaa 	bl	800c494 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800df40:	4603      	mov	r3, r0
 800df42:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800df44:	69f8      	ldr	r0, [r7, #28]
 800df46:	f7fe fab7 	bl	800c4b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800df4a:	4603      	mov	r3, r0
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fbfb 	bl	800c748 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800df52:	4603      	mov	r3, r0
 800df54:	4619      	mov	r1, r3
 800df56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df58:	f7fe fc10 	bl	800c77c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800df5c:	4603      	mov	r3, r0
 800df5e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800df60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df62:	3301      	adds	r3, #1
 800df64:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df66:	e7ca      	b.n	800defe <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800df68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fe fe76 	bl	800cc5e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800df72:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800df7a:	210c      	movs	r1, #12
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7ff fa7f 	bl	800d480 <_ZN6tflite13GetReciprocalEliPi>
 800df82:	4603      	mov	r3, r0
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe fa13 	bl	800c3b0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800df8a:	4603      	mov	r3, r0
 800df8c:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800df8e:	2300      	movs	r3, #0
 800df90:	66bb      	str	r3, [r7, #104]	; 0x68
 800df92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df96:	429a      	cmp	r2, r3
 800df98:	da76      	bge.n	800e088 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800df9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df9e:	fb02 f203 	mul.w	r2, r2, r3
 800dfa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dfa4:	4413      	add	r3, r2
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4413      	add	r3, r2
 800dfac:	f993 3000 	ldrsb.w	r3, [r3]
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800dfba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	db50      	blt.n	800e064 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 800dfc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfc4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dfc6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dfc8:	f7ff fa36 	bl	800d438 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800dfcc:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 800dfce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dfd0:	f7fe fa60 	bl	800c494 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800dfd8:	69b8      	ldr	r0, [r7, #24]
 800dfda:	f7fe fa6d 	bl	800c4b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800dfe2:	6979      	ldr	r1, [r7, #20]
 800dfe4:	6a38      	ldr	r0, [r7, #32]
 800dfe6:	f7fe fde5 	bl	800cbb4 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800dfea:	4603      	mov	r3, r0
 800dfec:	633b      	str	r3, [r7, #48]	; 0x30
 800dfee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7f8 fbc8 	bl	8006788 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800dff8:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800dffa:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800dffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dffe:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 800e000:	4611      	mov	r1, r2
 800e002:	4618      	mov	r0, r3
 800e004:	f7f8 fb3a 	bl	800667c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800e008:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 800e00a:	f7f8 fcfc 	bl	8006a06 <_ZNSt14numeric_limitsIaE3minEv>
 800e00e:	4603      	mov	r3, r0
 800e010:	461a      	mov	r2, r3
            unsat_output +
 800e012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e014:	4413      	add	r3, r2
        const int32_t shifted_output =
 800e016:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 800e018:	f7f8 fcfe 	bl	8006a18 <_ZNSt14numeric_limitsIaE3maxEv>
 800e01c:	4603      	mov	r3, r0
 800e01e:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 800e020:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e024:	f107 0310 	add.w	r3, r7, #16
 800e028:	4611      	mov	r1, r2
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7f8 fafe 	bl	800662c <_ZSt3minIlERKT_S2_S2_>
 800e030:	4604      	mov	r4, r0
 800e032:	f7f8 fce8 	bl	8006a06 <_ZNSt14numeric_limitsIaE3minEv>
 800e036:	4603      	mov	r3, r0
 800e038:	63bb      	str	r3, [r7, #56]	; 0x38
 800e03a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e03e:	4619      	mov	r1, r3
 800e040:	4620      	mov	r0, r4
 800e042:	f7f8 fb07 	bl	8006654 <_ZSt3maxIlERKT_S2_S2_>
 800e046:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800e048:	6819      	ldr	r1, [r3, #0]
 800e04a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e04c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e04e:	fb02 f203 	mul.w	r2, r2, r3
 800e052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e054:	4413      	add	r3, r2
 800e056:	461a      	mov	r2, r3
 800e058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e05c:	4413      	add	r3, r2
 800e05e:	b24a      	sxtb	r2, r1
 800e060:	701a      	strb	r2, [r3, #0]
 800e062:	e00d      	b.n	800e080 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800e064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e068:	fb02 f203 	mul.w	r2, r2, r3
 800e06c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e06e:	4413      	add	r3, r2
 800e070:	461a      	mov	r2, r3
 800e072:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e076:	189c      	adds	r4, r3, r2
 800e078:	f7f8 fcc5 	bl	8006a06 <_ZNSt14numeric_limitsIaE3minEv>
 800e07c:	4603      	mov	r3, r0
 800e07e:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800e080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e082:	3301      	adds	r3, #1
 800e084:	66bb      	str	r3, [r7, #104]	; 0x68
 800e086:	e784      	b.n	800df92 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800e088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e08a:	3301      	adds	r3, #1
 800e08c:	677b      	str	r3, [r7, #116]	; 0x74
 800e08e:	e70a      	b.n	800dea6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800e090:	bf00      	nop
 800e092:	377c      	adds	r7, #124	; 0x7c
 800e094:	46bd      	mov	sp, r7
 800e096:	bd90      	pop	{r4, r7, pc}

0800e098 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 800e098:	b580      	push	{r7, lr}
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	2000      	movs	r0, #0
 800e09e:	f000 f803 	bl	800e0a8 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800e0a8:	b590      	push	{r4, r7, lr}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800e0b0:	f107 030c 	add.w	r3, r7, #12
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fe fdd2 	bl	800cc5e <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7f8 fb8f 	bl	80067e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	6023      	str	r3, [r4, #0]
    return retval;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
  }
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3714      	adds	r7, #20
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd90      	pop	{r4, r7, pc}

0800e0d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 800e0d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0d4:	b090      	sub	sp, #64	; 0x40
 800e0d6:	af06      	add	r7, sp, #24
 800e0d8:	60f8      	str	r0, [r7, #12]
 800e0da:	60b9      	str	r1, [r7, #8]
 800e0dc:	607a      	str	r2, [r7, #4]
 800e0de:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	2b09      	cmp	r3, #9
 800e0e6:	d004      	beq.n	800e0f2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	2b07      	cmp	r3, #7
 800e0ee:	f040 81b6 	bne.w	800e45e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b07      	cmp	r3, #7
 800e0f8:	d156      	bne.n	800e1a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	691b      	ldr	r3, [r3, #16]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d011      	beq.n	800e126 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	695c      	ldr	r4, [r3, #20]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	691b      	ldr	r3, [r3, #16]
 800e10a:	2200      	movs	r2, #0
 800e10c:	9203      	str	r2, [sp, #12]
 800e10e:	9302      	str	r3, [sp, #8]
 800e110:	4ba1      	ldr	r3, [pc, #644]	; (800e398 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 800e112:	9301      	str	r3, [sp, #4]
 800e114:	4ba1      	ldr	r3, [pc, #644]	; (800e39c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	2325      	movs	r3, #37	; 0x25
 800e11a:	4aa1      	ldr	r2, [pc, #644]	; (800e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800e11c:	49a1      	ldr	r1, [pc, #644]	; (800e3a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	47a0      	blx	r4
 800e122:	2301      	movs	r3, #1
 800e124:	e1e0      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	edd3 7a03 	vldr	s15, [r3, #12]
 800e12c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800e3a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800e130:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e138:	dd07      	ble.n	800e14a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	edd3 7a03 	vldr	s15, [r3, #12]
 800e140:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800e3a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800e144:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e148:	e006      	b.n	800e158 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	edd3 7a03 	vldr	s15, [r3, #12]
 800e150:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800e3a8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 800e154:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e158:	edc7 7a08 	vstr	s15, [r7, #32]
 800e15c:	edd7 7a08 	vldr	s15, [r7, #32]
 800e160:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800e3ac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 800e164:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16c:	f340 80dd 	ble.w	800e32a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	695c      	ldr	r4, [r3, #20]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	4618      	mov	r0, r3
 800e17a:	f7f2 fa0f 	bl	800059c <__aeabi_f2d>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	f04f 0000 	mov.w	r0, #0
 800e186:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e18a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e18e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e192:	4b87      	ldr	r3, [pc, #540]	; (800e3b0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	4b87      	ldr	r3, [pc, #540]	; (800e3b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	2326      	movs	r3, #38	; 0x26
 800e19c:	4a80      	ldr	r2, [pc, #512]	; (800e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800e19e:	4986      	ldr	r1, [pc, #536]	; (800e3b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	47a0      	blx	r4
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e19f      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	2b09      	cmp	r3, #9
 800e1ae:	d018      	beq.n	800e1e2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	695c      	ldr	r4, [r3, #20]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7f6 faa7 	bl	800470c <TfLiteTypeGetName>
 800e1be:	4605      	mov	r5, r0
 800e1c0:	2009      	movs	r0, #9
 800e1c2:	f7f6 faa3 	bl	800470c <TfLiteTypeGetName>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	9303      	str	r3, [sp, #12]
 800e1ca:	9502      	str	r5, [sp, #8]
 800e1cc:	4b7b      	ldr	r3, [pc, #492]	; (800e3bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	4b7b      	ldr	r3, [pc, #492]	; (800e3c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	2329      	movs	r3, #41	; 0x29
 800e1d6:	4a72      	ldr	r2, [pc, #456]	; (800e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800e1d8:	497a      	ldr	r1, [pc, #488]	; (800e3c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	47a0      	blx	r4
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e182      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	2b07      	cmp	r3, #7
 800e1e8:	d155      	bne.n	800e296 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800e1f2:	d011      	beq.n	800e218 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	695c      	ldr	r4, [r3, #20]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	4a72      	ldr	r2, [pc, #456]	; (800e3c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 800e1fe:	9203      	str	r2, [sp, #12]
 800e200:	9302      	str	r3, [sp, #8]
 800e202:	4b72      	ldr	r3, [pc, #456]	; (800e3cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	4b65      	ldr	r3, [pc, #404]	; (800e39c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	232b      	movs	r3, #43	; 0x2b
 800e20c:	4a64      	ldr	r2, [pc, #400]	; (800e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800e20e:	4965      	ldr	r1, [pc, #404]	; (800e3a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	47a0      	blx	r4
 800e214:	2301      	movs	r3, #1
 800e216:	e167      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	edd3 7a03 	vldr	s15, [r3, #12]
 800e21e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800e3d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800e222:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e22a:	dd07      	ble.n	800e23c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	edd3 7a03 	vldr	s15, [r3, #12]
 800e232:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e3d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800e236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e23a:	e006      	b.n	800e24a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	edd3 7a03 	vldr	s15, [r3, #12]
 800e242:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800e3d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 800e246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e24a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800e24e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e252:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800e3d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 800e256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	dd64      	ble.n	800e32a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	695c      	ldr	r4, [r3, #20]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	4618      	mov	r0, r3
 800e26a:	f7f2 f997 	bl	800059c <__aeabi_f2d>
 800e26e:	4602      	mov	r2, r0
 800e270:	460b      	mov	r3, r1
 800e272:	f04f 0000 	mov.w	r0, #0
 800e276:	4958      	ldr	r1, [pc, #352]	; (800e3d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 800e278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e27c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e280:	4b56      	ldr	r3, [pc, #344]	; (800e3dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 800e282:	9301      	str	r3, [sp, #4]
 800e284:	4b4b      	ldr	r3, [pc, #300]	; (800e3b4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	232c      	movs	r3, #44	; 0x2c
 800e28a:	4a45      	ldr	r2, [pc, #276]	; (800e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800e28c:	494a      	ldr	r1, [pc, #296]	; (800e3b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	47a0      	blx	r4
 800e292:	2301      	movs	r3, #1
 800e294:	e128      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	2b09      	cmp	r3, #9
 800e29c:	d018      	beq.n	800e2d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	695c      	ldr	r4, [r3, #20]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7f6 fa30 	bl	800470c <TfLiteTypeGetName>
 800e2ac:	4605      	mov	r5, r0
 800e2ae:	2009      	movs	r0, #9
 800e2b0:	f7f6 fa2c 	bl	800470c <TfLiteTypeGetName>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	9303      	str	r3, [sp, #12]
 800e2b8:	9502      	str	r5, [sp, #8]
 800e2ba:	4b40      	ldr	r3, [pc, #256]	; (800e3bc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 800e2bc:	9301      	str	r3, [sp, #4]
 800e2be:	4b48      	ldr	r3, [pc, #288]	; (800e3e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	232f      	movs	r3, #47	; 0x2f
 800e2c4:	4a36      	ldr	r2, [pc, #216]	; (800e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800e2c6:	493f      	ldr	r1, [pc, #252]	; (800e3c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	47a0      	blx	r4
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e10b      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	691b      	ldr	r3, [r3, #16]
 800e2d4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800e2d8:	d012      	beq.n	800e300 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	695c      	ldr	r4, [r3, #20]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	691b      	ldr	r3, [r3, #16]
 800e2e2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800e2e6:	9203      	str	r2, [sp, #12]
 800e2e8:	9302      	str	r3, [sp, #8]
 800e2ea:	4b3e      	ldr	r3, [pc, #248]	; (800e3e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 800e2ec:	9301      	str	r3, [sp, #4]
 800e2ee:	4b2b      	ldr	r3, [pc, #172]	; (800e39c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	2330      	movs	r3, #48	; 0x30
 800e2f4:	4a2a      	ldr	r2, [pc, #168]	; (800e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800e2f6:	492b      	ldr	r1, [pc, #172]	; (800e3a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	47a0      	blx	r4
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e0f3      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	edd3 7a03 	vldr	s15, [r3, #12]
 800e306:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e3e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 800e30a:	eef4 7a47 	vcmp.f32	s15, s14
 800e30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e312:	d00a      	beq.n	800e32a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	695c      	ldr	r4, [r3, #20]
 800e318:	4b34      	ldr	r3, [pc, #208]	; (800e3ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	2331      	movs	r3, #49	; 0x31
 800e31e:	4a20      	ldr	r2, [pc, #128]	; (800e3a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 800e320:	4933      	ldr	r1, [pc, #204]	; (800e3f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	47a0      	blx	r4
 800e326:	2301      	movs	r3, #1
 800e328:	e0de      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	2b07      	cmp	r3, #7
 800e330:	d160      	bne.n	800e3f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	4618      	mov	r0, r3
 800e338:	f7f2 f930 	bl	800059c <__aeabi_f2d>
 800e33c:	4604      	mov	r4, r0
 800e33e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4618      	mov	r0, r3
 800e346:	f7f2 f929 	bl	800059c <__aeabi_f2d>
 800e34a:	4602      	mov	r2, r0
 800e34c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 800e34e:	4620      	mov	r0, r4
 800e350:	4629      	mov	r1, r5
 800e352:	f7f2 f97b 	bl	800064c <__aeabi_dmul>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	4610      	mov	r0, r2
 800e35c:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 800e35e:	a30c      	add	r3, pc, #48	; (adr r3, 800e390 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 800e360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e364:	f7f2 fa9c 	bl	80008a0 <__aeabi_ddiv>
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 800e370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e372:	3308      	adds	r3, #8
 800e374:	f107 0214 	add.w	r2, r7, #20
 800e378:	4611      	mov	r1, r2
 800e37a:	4618      	mov	r0, r3
 800e37c:	ed97 0b06 	vldr	d0, [r7, #24]
 800e380:	f7f7 feb0 	bl	80060e4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 800e384:	697a      	ldr	r2, [r7, #20]
 800e386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e388:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 800e38a:	e0ac      	b.n	800e4e6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 800e38c:	f3af 8000 	nop.w
 800e390:	00140014 	.word	0x00140014
 800e394:	3f240014 	.word	0x3f240014
 800e398:	08016bc8 	.word	0x08016bc8
 800e39c:	08016bcc 	.word	0x08016bcc
 800e3a0:	08016b68 	.word	0x08016b68
 800e3a4:	08016bac 	.word	0x08016bac
 800e3a8:	38000000 	.word	0x38000000
 800e3ac:	3303126f 	.word	0x3303126f
 800e3b0:	08016c08 	.word	0x08016c08
 800e3b4:	08016c14 	.word	0x08016c14
 800e3b8:	08016be8 	.word	0x08016be8
 800e3bc:	08016c48 	.word	0x08016c48
 800e3c0:	08016c54 	.word	0x08016c54
 800e3c4:	08016c2c 	.word	0x08016c2c
 800e3c8:	ffff8000 	.word	0xffff8000
 800e3cc:	08016c60 	.word	0x08016c60
 800e3d0:	37800000 	.word	0x37800000
 800e3d4:	3283126f 	.word	0x3283126f
 800e3d8:	3ef00000 	.word	0x3ef00000
 800e3dc:	08016c68 	.word	0x08016c68
 800e3e0:	08016c74 	.word	0x08016c74
 800e3e4:	08016c84 	.word	0x08016c84
 800e3e8:	3b800000 	.word	0x3b800000
 800e3ec:	08016ca4 	.word	0x08016ca4
 800e3f0:	08016c8c 	.word	0x08016c8c
          static_cast<double>(params->beta),
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7f2 f8cf 	bl	800059c <__aeabi_f2d>
 800e3fe:	4680      	mov	r8, r0
 800e400:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 800e406:	4618      	mov	r0, r3
 800e408:	f7f2 f8c8 	bl	800059c <__aeabi_f2d>
 800e40c:	4682      	mov	sl, r0
 800e40e:	468b      	mov	fp, r1
 800e410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e412:	3308      	adds	r3, #8
 800e414:	f107 0210 	add.w	r2, r7, #16
 800e418:	4619      	mov	r1, r3
 800e41a:	2005      	movs	r0, #5
 800e41c:	ec4b ab11 	vmov	d1, sl, fp
 800e420:	ec49 8b10 	vmov	d0, r8, r9
 800e424:	f7f7 ff28 	bl	8006278 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 800e428:	693a      	ldr	r2, [r7, #16]
 800e42a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e42c:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 800e42e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e430:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800e432:	221f      	movs	r2, #31
 800e434:	4619      	mov	r1, r3
 800e436:	2005      	movs	r0, #5
 800e438:	f7f7 ff66 	bl	8006308 <_ZN6tflite20CalculateInputRadiusEiii>
 800e43c:	4603      	mov	r3, r0
 800e43e:	4618      	mov	r0, r3
 800e440:	f7f2 f89a 	bl	8000578 <__aeabi_i2d>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	4614      	mov	r4, r2
 800e44a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 800e44e:	4620      	mov	r0, r4
 800e450:	4629      	mov	r1, r5
 800e452:	f7f2 fbab 	bl	8000bac <__aeabi_d2iz>
 800e456:	4602      	mov	r2, r0
 800e458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e45a:	619a      	str	r2, [r3, #24]
    }
 800e45c:	e043      	b.n	800e4e6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	2b01      	cmp	r3, #1
 800e464:	d018      	beq.n	800e498 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	695c      	ldr	r4, [r3, #20]
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	4618      	mov	r0, r3
 800e470:	f7f6 f94c 	bl	800470c <TfLiteTypeGetName>
 800e474:	4605      	mov	r5, r0
 800e476:	2001      	movs	r0, #1
 800e478:	f7f6 f948 	bl	800470c <TfLiteTypeGetName>
 800e47c:	4603      	mov	r3, r0
 800e47e:	9303      	str	r3, [sp, #12]
 800e480:	9502      	str	r5, [sp, #8]
 800e482:	4b1c      	ldr	r3, [pc, #112]	; (800e4f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	4b1c      	ldr	r3, [pc, #112]	; (800e4f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	234e      	movs	r3, #78	; 0x4e
 800e48c:	4a1b      	ldr	r2, [pc, #108]	; (800e4fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 800e48e:	491c      	ldr	r1, [pc, #112]	; (800e500 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	47a0      	blx	r4
 800e494:	2301      	movs	r3, #1
 800e496:	e027      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d018      	beq.n	800e4d2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	695c      	ldr	r4, [r3, #20]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7f6 f92f 	bl	800470c <TfLiteTypeGetName>
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	f7f6 f92b 	bl	800470c <TfLiteTypeGetName>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	9303      	str	r3, [sp, #12]
 800e4ba:	9502      	str	r5, [sp, #8]
 800e4bc:	4b0d      	ldr	r3, [pc, #52]	; (800e4f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 800e4be:	9301      	str	r3, [sp, #4]
 800e4c0:	4b10      	ldr	r3, [pc, #64]	; (800e504 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	234f      	movs	r3, #79	; 0x4f
 800e4c6:	4a0d      	ldr	r2, [pc, #52]	; (800e4fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 800e4c8:	490d      	ldr	r1, [pc, #52]	; (800e500 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	47a0      	blx	r4
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e00a      	b.n	800e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7f2 f860 	bl	800059c <__aeabi_f2d>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e4e2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3728      	adds	r7, #40	; 0x28
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4f2:	bf00      	nop
 800e4f4:	08016cc8 	.word	0x08016cc8
 800e4f8:	08016c54 	.word	0x08016c54
 800e4fc:	08016b68 	.word	0x08016b68
 800e500:	08016c2c 	.word	0x08016c2c
 800e504:	08016c74 	.word	0x08016c74

0800e508 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d101      	bne.n	800e520 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 800e51c:	f001 f991 	bl	800f842 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e524:	2138      	movs	r1, #56	; 0x38
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	4798      	blx	r3
 800e52a:	4603      	mov	r3, r0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3710      	adds	r7, #16
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut<float, int16_t, int16_t>(
        [](float value) { return std::exp(value); }, -10.0f, 0.0f, -1.0f, 1.0f,
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	ed87 0a00 	vstr	s0, [r7]
 800e540:	ed97 0a00 	vldr	s0, [r7]
 800e544:	f7f7 ffce 	bl	80064e4 <_ZSt3expf>
 800e548:	eef0 7a40 	vmov.f32	s15, s0
 800e54c:	eeb0 0a67 	vmov.f32	s0, s15
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 800e556:	b580      	push	{r7, lr}
 800e558:	b082      	sub	sp, #8
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	ed87 0a01 	vstr	s0, [r7, #4]
 800e560:	ed97 0a01 	vldr	s0, [r7, #4]
 800e564:	2000      	movs	r0, #0
 800e566:	f7ff ffe5 	bl	800e534 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 800e56a:	eef0 7a40 	vmov.f32	s15, s0
 800e56e:	eeb0 0a67 	vmov.f32	s0, s15
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	4b03      	ldr	r3, [pc, #12]	; (800e590 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 800e582:	4618      	mov	r0, r3
 800e584:	370c      	adds	r7, #12
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop
 800e590:	0800e557 	.word	0x0800e557

0800e594 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
        op_data->exp_lut);
    gen_lut<float, int16_t, int16_t>(
        [](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f, -1.0f,
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	ed87 0a00 	vstr	s0, [r7]
 800e5a0:	edd7 7a00 	vldr	s15, [r7]
 800e5a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e5b4:	eef0 7a66 	vmov.f32	s15, s13
 800e5b8:	eeb0 0a67 	vmov.f32	s0, s15
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr

0800e5c6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	ed87 0a01 	vstr	s0, [r7, #4]
 800e5d0:	ed97 0a01 	vldr	s0, [r7, #4]
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	f7ff ffdd 	bl	800e594 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 800e5da:	eef0 7a40 	vmov.f32	s15, s0
 800e5de:	eeb0 0a67 	vmov.f32	s0, s15
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	4b03      	ldr	r3, [pc, #12]	; (800e600 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	0800e5c7 	.word	0x0800e5c7

0800e604 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800e604:	b590      	push	{r4, r7, lr}
 800e606:	b08f      	sub	sp, #60	; 0x3c
 800e608:	af04      	add	r7, sp, #16
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800e60e:	6838      	ldr	r0, [r7, #0]
 800e610:	f7fd f974 	bl	800b8fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e614:	4603      	mov	r3, r0
 800e616:	2b01      	cmp	r3, #1
 800e618:	bf14      	ite	ne
 800e61a:	2301      	movne	r3, #1
 800e61c:	2300      	moveq	r3, #0
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	2b00      	cmp	r3, #0
 800e622:	d013      	beq.n	800e64c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	695c      	ldr	r4, [r3, #20]
 800e628:	6838      	ldr	r0, [r7, #0]
 800e62a:	f7fd f967 	bl	800b8fc <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e62e:	4603      	mov	r3, r0
 800e630:	2201      	movs	r2, #1
 800e632:	9203      	str	r2, [sp, #12]
 800e634:	9302      	str	r3, [sp, #8]
 800e636:	4b7c      	ldr	r3, [pc, #496]	; (800e828 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800e638:	9301      	str	r3, [sp, #4]
 800e63a:	4b7c      	ldr	r3, [pc, #496]	; (800e82c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	235d      	movs	r3, #93	; 0x5d
 800e640:	4a7b      	ldr	r2, [pc, #492]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e642:	497c      	ldr	r1, [pc, #496]	; (800e834 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	47a0      	blx	r4
 800e648:	2301      	movs	r3, #1
 800e64a:	e14e      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800e64c:	6838      	ldr	r0, [r7, #0]
 800e64e:	f7fd f962 	bl	800b916 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e652:	4603      	mov	r3, r0
 800e654:	2b01      	cmp	r3, #1
 800e656:	bf14      	ite	ne
 800e658:	2301      	movne	r3, #1
 800e65a:	2300      	moveq	r3, #0
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d013      	beq.n	800e68a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	695c      	ldr	r4, [r3, #20]
 800e666:	6838      	ldr	r0, [r7, #0]
 800e668:	f7fd f955 	bl	800b916 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2201      	movs	r2, #1
 800e670:	9203      	str	r2, [sp, #12]
 800e672:	9302      	str	r3, [sp, #8]
 800e674:	4b6c      	ldr	r3, [pc, #432]	; (800e828 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800e676:	9301      	str	r3, [sp, #4]
 800e678:	4b6f      	ldr	r3, [pc, #444]	; (800e838 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	235e      	movs	r3, #94	; 0x5e
 800e67e:	4a6c      	ldr	r2, [pc, #432]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e680:	496c      	ldr	r1, [pc, #432]	; (800e834 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	47a0      	blx	r4
 800e686:	2301      	movs	r3, #1
 800e688:	e12f      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 800e68a:	2200      	movs	r2, #0
 800e68c:	6839      	ldr	r1, [r7, #0]
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7f8 fa43 	bl	8006b1a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e694:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10a      	bne.n	800e6b2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	695c      	ldr	r4, [r3, #20]
 800e6a0:	4b66      	ldr	r3, [pc, #408]	; (800e83c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	2360      	movs	r3, #96	; 0x60
 800e6a6:	4a62      	ldr	r2, [pc, #392]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e6a8:	4965      	ldr	r1, [pc, #404]	; (800e840 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	47a0      	blx	r4
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e11b      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800e6b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6b4:	f7f8 f9c8 	bl	8006a48 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	bfd4      	ite	le
 800e6be:	2301      	movle	r3, #1
 800e6c0:	2300      	movgt	r3, #0
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00a      	beq.n	800e6de <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	695c      	ldr	r4, [r3, #20]
 800e6cc:	4b5d      	ldr	r3, [pc, #372]	; (800e844 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800e6ce:	9300      	str	r3, [sp, #0]
 800e6d0:	2361      	movs	r3, #97	; 0x61
 800e6d2:	4a57      	ldr	r2, [pc, #348]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e6d4:	495a      	ldr	r1, [pc, #360]	; (800e840 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	47a0      	blx	r4
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e105      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 800e6de:	2200      	movs	r2, #0
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7f8 fa29 	bl	8006b3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800e6e8:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 800e6ea:	6a3b      	ldr	r3, [r7, #32]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d10a      	bne.n	800e706 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	695c      	ldr	r4, [r3, #20]
 800e6f4:	4b54      	ldr	r3, [pc, #336]	; (800e848 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	2363      	movs	r3, #99	; 0x63
 800e6fa:	4a4d      	ldr	r2, [pc, #308]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e6fc:	4950      	ldr	r1, [pc, #320]	; (800e840 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	47a0      	blx	r4
 800e702:	2301      	movs	r3, #1
 800e704:	e0f1      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d10a      	bne.n	800e724 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	695c      	ldr	r4, [r3, #20]
 800e712:	4b4e      	ldr	r3, [pc, #312]	; (800e84c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	2365      	movs	r3, #101	; 0x65
 800e718:	4a45      	ldr	r2, [pc, #276]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e71a:	4949      	ldr	r1, [pc, #292]	; (800e840 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	47a0      	blx	r4
 800e720:	2301      	movs	r3, #1
 800e722:	e0e2      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	691b      	ldr	r3, [r3, #16]
 800e728:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 800e72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	2b07      	cmp	r3, #7
 800e730:	d12f      	bne.n	800e792 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e736:	f240 4102 	movw	r1, #1026	; 0x402
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	4798      	blx	r3
 800e73e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d10a      	bne.n	800e75c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	695c      	ldr	r4, [r3, #20]
 800e74a:	4b41      	ldr	r3, [pc, #260]	; (800e850 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 800e74c:	9300      	str	r3, [sp, #0]
 800e74e:	236b      	movs	r3, #107	; 0x6b
 800e750:	4a37      	ldr	r2, [pc, #220]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e752:	493b      	ldr	r1, [pc, #236]	; (800e840 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	47a0      	blx	r4
 800e758:	2301      	movs	r3, #1
 800e75a:	e0c6      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	69ba      	ldr	r2, [r7, #24]
 800e760:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e766:	f240 4102 	movw	r1, #1026	; 0x402
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	4798      	blx	r3
 800e76e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d10a      	bne.n	800e78c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	695c      	ldr	r4, [r3, #20]
 800e77a:	4b36      	ldr	r3, [pc, #216]	; (800e854 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	236f      	movs	r3, #111	; 0x6f
 800e780:	4a2b      	ldr	r2, [pc, #172]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e782:	492f      	ldr	r1, [pc, #188]	; (800e840 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	47a0      	blx	r4
 800e788:	2301      	movs	r3, #1
 800e78a:	e0ae      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
    op_data->one_over_one_plus_x_lut =
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	2b07      	cmp	r3, #7
 800e798:	d112      	bne.n	800e7c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	2b09      	cmp	r3, #9
 800e7a0:	d028      	beq.n	800e7f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	2b07      	cmp	r3, #7
 800e7a8:	d024      	beq.n	800e7f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	695c      	ldr	r4, [r3, #20]
 800e7ae:	4b2a      	ldr	r3, [pc, #168]	; (800e858 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	2375      	movs	r3, #117	; 0x75
 800e7b4:	4a1e      	ldr	r2, [pc, #120]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e7b6:	4922      	ldr	r1, [pc, #136]	; (800e840 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	47a0      	blx	r4
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e094      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	781a      	ldrb	r2, [r3, #0]
 800e7c4:	6a3b      	ldr	r3, [r7, #32]
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d013      	beq.n	800e7f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	695c      	ldr	r4, [r3, #20]
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	6a3b      	ldr	r3, [r7, #32]
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	9303      	str	r3, [sp, #12]
 800e7dc:	9202      	str	r2, [sp, #8]
 800e7de:	4b1f      	ldr	r3, [pc, #124]	; (800e85c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800e7e0:	9301      	str	r3, [sp, #4]
 800e7e2:	4b1f      	ldr	r3, [pc, #124]	; (800e860 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	2378      	movs	r3, #120	; 0x78
 800e7e8:	4a11      	ldr	r2, [pc, #68]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e7ea:	4912      	ldr	r1, [pc, #72]	; (800e834 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	47a0      	blx	r4
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	e07a      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
  if (input->type == kTfLiteInt16) {
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	2b07      	cmp	r3, #7
 800e7fa:	d169      	bne.n	800e8d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
 800e7fe:	691b      	ldr	r3, [r3, #16]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d035      	beq.n	800e870 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	695c      	ldr	r4, [r3, #20]
 800e808:	6a3b      	ldr	r3, [r7, #32]
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	2200      	movs	r2, #0
 800e80e:	9203      	str	r2, [sp, #12]
 800e810:	9302      	str	r3, [sp, #8]
 800e812:	4b14      	ldr	r3, [pc, #80]	; (800e864 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	4b14      	ldr	r3, [pc, #80]	; (800e868 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	237d      	movs	r3, #125	; 0x7d
 800e81c:	4a04      	ldr	r2, [pc, #16]	; (800e830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800e81e:	4905      	ldr	r1, [pc, #20]	; (800e834 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	47a0      	blx	r4
 800e824:	2301      	movs	r3, #1
 800e826:	e060      	b.n	800e8ea <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e6>
 800e828:	08016cd8 	.word	0x08016cd8
 800e82c:	08016cdc 	.word	0x08016cdc
 800e830:	08016b68 	.word	0x08016b68
 800e834:	08016bac 	.word	0x08016bac
 800e838:	08016cec 	.word	0x08016cec
 800e83c:	08016d00 	.word	0x08016d00
 800e840:	08016c8c 	.word	0x08016c8c
 800e844:	08016d14 	.word	0x08016d14
 800e848:	08016d30 	.word	0x08016d30
 800e84c:	08016d44 	.word	0x08016d44
 800e850:	08016d60 	.word	0x08016d60
 800e854:	08016d78 	.word	0x08016d78
 800e858:	08016d9c 	.word	0x08016d9c
 800e85c:	08016c74 	.word	0x08016c74
 800e860:	08016c54 	.word	0x08016c54
 800e864:	08016bc8 	.word	0x08016bc8
 800e868:	08016bcc 	.word	0x08016bcc
 800e86c:	00000000 	.word	0x00000000
    gen_lut<float, int16_t, int16_t>(
 800e870:	f107 0308 	add.w	r3, r7, #8
 800e874:	4618      	mov	r0, r3
 800e876:	f7ff fe7f 	bl	800e578 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 800e87a:	4602      	mov	r2, r0
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e880:	4619      	mov	r1, r3
 800e882:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e886:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800e88a:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 800e86c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 800e88e:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800e892:	4610      	mov	r0, r2
 800e894:	f000 f82e 	bl	800e8f4 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_>
    gen_lut<float, int16_t, int16_t>(
 800e898:	f107 030c 	add.w	r3, r7, #12
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7ff fea3 	bl	800e5e8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e8ae:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800e8b2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e8b6:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 800e86c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	f000 f81a 	bl	800e8f4 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_>
        1.0f, op_data->one_over_one_plus_x_lut);
    op_data->zero_point = output->params.zero_point;
 800e8c0:	6a3b      	ldr	r3, [r7, #32]
 800e8c2:	691a      	ldr	r2, [r3, #16]
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	68da      	ldr	r2, [r3, #12]
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	695b      	ldr	r3, [r3, #20]
 800e8d4:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	9300      	str	r3, [sp, #0]
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	6a3a      	ldr	r2, [r7, #32]
 800e8de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f7ff fbf5 	bl	800e0d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	bf00      	nop
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	372c      	adds	r7, #44	; 0x2c
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd90      	pop	{r4, r7, pc}
 800e8f2:	bf00      	nop

0800e8f4 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_>:
inline void gen_lut(FloatT (*func)(FloatT), FloatT input_min, FloatT input_max,
 800e8f4:	b590      	push	{r4, r7, lr}
 800e8f6:	ed2d 8b02 	vpush	{d8}
 800e8fa:	b099      	sub	sp, #100	; 0x64
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6178      	str	r0, [r7, #20]
 800e900:	ed87 0a04 	vstr	s0, [r7, #16]
 800e904:	edc7 0a03 	vstr	s1, [r7, #12]
 800e908:	ed87 1a02 	vstr	s2, [r7, #8]
 800e90c:	edc7 1a01 	vstr	s3, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  const int nb_steps = std::is_same<LutInT, int8_t>::value ? 256 : 512;
 800e912:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e916:	65bb      	str	r3, [r7, #88]	; 0x58
  const FloatT step = (input_max - input_min) / nb_steps;
 800e918:	ed97 7a03 	vldr	s14, [r7, #12]
 800e91c:	edd7 7a04 	vldr	s15, [r7, #16]
 800e920:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e924:	eddf 6a8b 	vldr	s13, [pc, #556]	; 800eb54 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x260>
 800e928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e92c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  const FloatT half_step = step / 2;
 800e930:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800e934:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e93c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      static_cast<FloatT>(std::numeric_limits<LutOutT>::max() -
 800e940:	f7f7 fdbe 	bl	80064c0 <_ZNSt14numeric_limitsIsE3maxEv>
 800e944:	4603      	mov	r3, r0
 800e946:	461c      	mov	r4, r3
                          std::numeric_limits<LutOutT>::min() + 1) /
 800e948:	f7f7 fdb0 	bl	80064ac <_ZNSt14numeric_limitsIsE3minEv>
 800e94c:	4603      	mov	r3, r0
      static_cast<FloatT>(std::numeric_limits<LutOutT>::max() -
 800e94e:	1ae3      	subs	r3, r4, r3
                          std::numeric_limits<LutOutT>::min() + 1) /
 800e950:	3301      	adds	r3, #1
 800e952:	ee07 3a90 	vmov	s15, r3
 800e956:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      (output_max - output_min);
 800e95a:	ed97 7a01 	vldr	s14, [r7, #4]
 800e95e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e962:	ee37 7a67 	vsub.f32	s14, s14, s15
  const FloatT output_scaling_inv =
 800e966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e96a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  const FloatT table_min =
 800e96e:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 800e972:	61fb      	str	r3, [r7, #28]
  const FloatT table_max =
 800e974:	4b78      	ldr	r3, [pc, #480]	; (800eb58 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x264>)
 800e976:	61bb      	str	r3, [r7, #24]
  for (int i = 0; i < nb_steps; i++) {
 800e978:	2300      	movs	r3, #0
 800e97a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e97e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e982:	f280 80b0 	bge.w	800eae6 <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x1f2>
    const FloatT val = func(input_min + i * step);
 800e986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e988:	ee07 3a90 	vmov	s15, r3
 800e98c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e990:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e994:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e998:	edd7 7a04 	vldr	s15, [r7, #16]
 800e99c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	eeb0 0a67 	vmov.f32	s0, s15
 800e9a6:	4798      	blx	r3
 800e9a8:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
    const FloatT val_midpoint = func(input_min + i * step + half_step);
 800e9ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9ae:	ee07 3a90 	vmov	s15, r3
 800e9b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e9b6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e9ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9be:	edd7 7a04 	vldr	s15, [r7, #16]
 800e9c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e9c6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800e9ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e9d4:	4798      	blx	r3
 800e9d6:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
    const FloatT val_next = func(input_min + (i + 1) * step);
 800e9da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9dc:	3301      	adds	r3, #1
 800e9de:	ee07 3a90 	vmov	s15, r3
 800e9e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e9e6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800e9ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9ee:	edd7 7a04 	vldr	s15, [r7, #16]
 800e9f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	eeb0 0a67 	vmov.f32	s0, s15
 800e9fc:	4798      	blx	r3
 800e9fe:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    const FloatT sample_val = TfLiteRound(val * output_scaling_inv);
 800ea02:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ea06:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800ea0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ea12:	f7f7 fd26 	bl	8006462 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800ea16:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound((val_next * output_scaling_inv +
 800ea1a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ea1e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800ea22:	ee27 8a27 	vmul.f32	s16, s14, s15
                     TfLiteRound(val * output_scaling_inv)) /
 800ea26:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ea2a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800ea2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea32:	eeb0 0a67 	vmov.f32	s0, s15
 800ea36:	f7f7 fd14 	bl	8006462 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800ea3a:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((val_next * output_scaling_inv +
 800ea3e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800ea42:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ea46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ea4a:	eeb0 0a47 	vmov.f32	s0, s14
 800ea4e:	f7f7 fd08 	bl	8006462 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800ea52:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    const FloatT midpoint_val = TfLiteRound(val_midpoint * output_scaling_inv);
 800ea56:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800ea5a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800ea5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea62:	eeb0 0a67 	vmov.f32	s0, s15
 800ea66:	f7f7 fcfc 	bl	8006462 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800ea6a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    const FloatT midpoint_err = midpoint_interp_val - midpoint_val;
 800ea6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ea72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ea76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea7a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    const FloatT bias = TfLiteRound(midpoint_err / 2);
 800ea7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ea82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ea86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ea8a:	eeb0 0a47 	vmov.f32	s0, s14
 800ea8e:	f7f7 fce8 	bl	8006462 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800ea92:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
        std::max<FloatT>(sample_val - bias, table_min), table_max));
 800ea96:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800ea9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ea9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eaa2:	edc7 7a08 	vstr	s15, [r7, #32]
    lut[i] = static_cast<LutOutT>(std::min<FloatT>(
 800eaa6:	f107 021c 	add.w	r2, r7, #28
 800eaaa:	f107 0320 	add.w	r3, r7, #32
 800eaae:	4611      	mov	r1, r2
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7f7 fca9 	bl	8006408 <_ZSt3maxIfERKT_S2_S2_>
 800eab6:	4602      	mov	r2, r0
 800eab8:	f107 0318 	add.w	r3, r7, #24
 800eabc:	4619      	mov	r1, r3
 800eabe:	4610      	mov	r0, r2
 800eac0:	f7f7 fc89 	bl	80063d6 <_ZSt3minIfERKT_S2_S2_>
 800eac4:	4603      	mov	r3, r0
 800eac6:	edd3 7a00 	vldr	s15, [r3]
 800eaca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eacc:	005b      	lsls	r3, r3, #1
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	4413      	add	r3, r2
 800ead2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ead6:	ee17 2a90 	vmov	r2, s15
 800eada:	b212      	sxth	r2, r2
 800eadc:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < nb_steps; i++) {
 800eade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eae0:	3301      	adds	r3, #1
 800eae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eae4:	e74a      	b.n	800e97c <_ZN6tflite7gen_lutIfssEEvPFT_S1_ES1_S1_S1_S1_PT1_+0x88>
  const bool with_extra_interpolation_value =
 800eae6:	2301      	movs	r3, #1
 800eae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        std::max<FloatT>(TfLiteRound(func(input_max) * output_scaling_inv),
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	ed97 0a03 	vldr	s0, [r7, #12]
 800eaf2:	4798      	blx	r3
 800eaf4:	eeb0 7a40 	vmov.f32	s14, s0
 800eaf8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800eafc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb00:	eeb0 0a67 	vmov.f32	s0, s15
 800eb04:	f7f7 fcad 	bl	8006462 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800eb08:	eef0 7a40 	vmov.f32	s15, s0
 800eb0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    lut[nb_steps] = static_cast<LutOutT>(std::min<FloatT>(
 800eb10:	f107 021c 	add.w	r2, r7, #28
 800eb14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb18:	4611      	mov	r1, r2
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7f7 fc74 	bl	8006408 <_ZSt3maxIfERKT_S2_S2_>
 800eb20:	4602      	mov	r2, r0
 800eb22:	f107 0318 	add.w	r3, r7, #24
 800eb26:	4619      	mov	r1, r3
 800eb28:	4610      	mov	r0, r2
 800eb2a:	f7f7 fc54 	bl	80063d6 <_ZSt3minIfERKT_S2_S2_>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	edd3 7a00 	vldr	s15, [r3]
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb3e:	ee17 2a90 	vmov	r2, s15
 800eb42:	b212      	sxth	r2, r2
 800eb44:	801a      	strh	r2, [r3, #0]
}
 800eb46:	bf00      	nop
 800eb48:	3764      	adds	r7, #100	; 0x64
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	ecbd 8b02 	vpop	{d8}
 800eb50:	bd90      	pop	{r4, r7, pc}
 800eb52:	bf00      	nop
 800eb54:	44000000 	.word	0x44000000
 800eb58:	46fffe00 	.word	0x46fffe00

0800eb5c <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	4a04      	ldr	r2, [pc, #16]	; (800eb78 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	601a      	str	r2, [r3, #0]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr
 800eb78:	080172c8 	.word	0x080172c8

0800eb7c <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	4a04      	ldr	r2, [pc, #16]	; (800eb98 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	080172c8 	.word	0x080172c8

0800eb9c <_ZN6tflite13MemoryPlannerD0Ev>:
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff ffe9 	bl	800eb7c <_ZN6tflite13MemoryPlannerD1Ev>
 800ebaa:	2104      	movs	r1, #4
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 fc04 	bl	800f3ba <_ZdlPvj>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 800ebc2:	2328      	movs	r3, #40	; 0x28
 800ebc4:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 800ebc6:	2328      	movs	r3, #40	; 0x28
  }
 800ebc8:	4618      	mov	r0, r3
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 800ebd4:	b480      	push	{r7}
 800ebd6:	b089      	sub	sp, #36	; 0x24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	61bb      	str	r3, [r7, #24]
 800ebe8:	69ba      	ldr	r2, [r7, #24]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	da4c      	bge.n	800ec8a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 800ebf0:	69ba      	ldr	r2, [r7, #24]
 800ebf2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ebf6:	4413      	add	r3, r2
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	68f9      	ldr	r1, [r7, #12]
 800ec06:	440b      	add	r3, r1
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	da39      	bge.n	800ec82 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 800ec0e:	69ba      	ldr	r2, [r7, #24]
 800ec10:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ec14:	4413      	add	r3, r2
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	441a      	add	r2, r3
 800ec28:	69b9      	ldr	r1, [r7, #24]
 800ec2a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ec2e:	440b      	add	r3, r1
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	68f9      	ldr	r1, [r7, #12]
 800ec34:	440b      	add	r3, r1
 800ec36:	6812      	ldr	r2, [r2, #0]
 800ec38:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	4413      	add	r3, r2
 800ec42:	697a      	ldr	r2, [r7, #20]
 800ec44:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 800ec46:	69ba      	ldr	r2, [r7, #24]
 800ec48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ec4c:	4413      	add	r3, r2
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	4413      	add	r3, r2
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	68ba      	ldr	r2, [r7, #8]
 800ec5e:	441a      	add	r2, r3
 800ec60:	69b9      	ldr	r1, [r7, #24]
 800ec62:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ec66:	440b      	add	r3, r1
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	68b9      	ldr	r1, [r7, #8]
 800ec6c:	440b      	add	r3, r1
 800ec6e:	6812      	ldr	r2, [r2, #0]
 800ec70:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	4413      	add	r3, r2
 800ec7a:	693a      	ldr	r2, [r7, #16]
 800ec7c:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	3301      	adds	r3, #1
 800ec86:	61bb      	str	r3, [r7, #24]
 800ec88:	e7ae      	b.n	800ebe8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 800ec8a:	7ffb      	ldrb	r3, [r7, #31]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d000      	beq.n	800ec92 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 800ec90:	e7a6      	b.n	800ebe0 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 800ec92:	bf00      	nop
 800ec94:	3724      	adds	r7, #36	; 0x24
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr
	...

0800eca0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800eca0:	b590      	push	{r4, r7, lr}
 800eca2:	b087      	sub	sp, #28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7ff ff54 	bl	800eb5c <_ZN6tflite13MemoryPlannerC1Ev>
 800ecb4:	4a22      	ldr	r2, [pc, #136]	; (800ed40 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	601a      	str	r2, [r3, #0]
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	609a      	str	r2, [r3, #8]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800ecc8:	687c      	ldr	r4, [r7, #4]
 800ecca:	f7ff ff77 	bl	800ebbc <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	fbb4 f3f3 	udiv	r3, r4, r3
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	697a      	ldr	r2, [r7, #20]
 800ece2:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	011b      	lsls	r3, r3, #4
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	4413      	add	r3, r2
 800ecee:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	697a      	ldr	r2, [r7, #20]
 800ecf4:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	697a      	ldr	r2, [r7, #20]
 800ecfe:	4413      	add	r3, r2
 800ed00:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	697a      	ldr	r2, [r7, #20]
 800ed06:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	697a      	ldr	r2, [r7, #20]
 800ed10:	4413      	add	r3, r2
 800ed12:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	4613      	mov	r3, r2
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	4413      	add	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	461a      	mov	r2, r3
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	697a      	ldr	r2, [r7, #20]
 800ed34:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	371c      	adds	r7, #28
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd90      	pop	{r4, r7, pc}
 800ed40:	080172a8 	.word	0x080172a8

0800ed44 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	4a05      	ldr	r2, [pc, #20]	; (800ed64 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	601a      	str	r2, [r3, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7ff ff11 	bl	800eb7c <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	080172a8 	.word	0x080172a8

0800ed68 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
}
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f7ff ffe7 	bl	800ed44 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800ed76:	212c      	movs	r1, #44	; 0x2c
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 fb1e 	bl	800f3ba <_ZdlPvj>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	4618      	mov	r0, r3
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	607a      	str	r2, [r7, #4]
 800ed94:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	689a      	ldr	r2, [r3, #8]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	db08      	blt.n	800edb4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	461a      	mov	r2, r3
 800eda8:	4913      	ldr	r1, [pc, #76]	; (800edf8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 800edaa:	68b8      	ldr	r0, [r7, #8]
 800edac:	f7f5 fd2a 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 800edb0:	2301      	movs	r3, #1
 800edb2:	e01d      	b.n	800edf0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	68da      	ldr	r2, [r3, #12]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	689b      	ldr	r3, [r3, #8]
 800edbc:	011b      	lsls	r3, r3, #4
 800edbe:	4413      	add	r3, r2
 800edc0:	617b      	str	r3, [r7, #20]
  current->size = size;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	6a3a      	ldr	r2, [r7, #32]
 800edd2:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800edda:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	1c5a      	adds	r2, r3, #1
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2201      	movs	r2, #1
 800edea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	08016dd8 	.word	0x08016dd8

0800edfc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 800edfc:	b590      	push	{r4, r7, lr}
 800edfe:	b089      	sub	sp, #36	; 0x24
 800ee00:	af02      	add	r7, sp, #8
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	607a      	str	r2, [r7, #4]
 800ee08:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	68da      	ldr	r2, [r3, #12]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	011b      	lsls	r3, r3, #4
 800ee14:	4413      	add	r3, r2
 800ee16:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3308      	adds	r3, #8
 800ee1e:	681c      	ldr	r4, [r3, #0]
 800ee20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee22:	9300      	str	r3, [sp, #0]
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	68b9      	ldr	r1, [r7, #8]
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	47a0      	blx	r4
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	bf14      	ite	ne
 800ee34:	2301      	movne	r3, #1
 800ee36:	2300      	moveq	r3, #0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d001      	beq.n	800ee42 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e003      	b.n	800ee4a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee46:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 800ee48:	2300      	movs	r3, #0
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	371c      	adds	r7, #28
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd90      	pop	{r4, r7, pc}

0800ee52 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800ee52:	b480      	push	{r7}
 800ee54:	b087      	sub	sp, #28
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	60f8      	str	r0, [r7, #12]
 800ee5a:	60b9      	str	r1, [r7, #8]
 800ee5c:	607a      	str	r2, [r7, #4]
 800ee5e:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	68da      	ldr	r2, [r3, #12]
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 800ee6a:	4413      	add	r3, r2
 800ee6c:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	683a      	ldr	r2, [r7, #0]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	da01      	bge.n	800ee7c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	e007      	b.n	800ee8c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	dd01      	ble.n	800ee8a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 800ee86:	2300      	movs	r3, #0
 800ee88:	e000      	b.n	800ee8c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 800ee8a:	2301      	movs	r3, #1
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	371c      	adds	r7, #28
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
 800eea4:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 800eea6:	2300      	movs	r3, #0
 800eea8:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10b      	bne.n	800eec8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	699a      	ldr	r2, [r3, #24]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	460b      	mov	r3, r1
 800eebc:	005b      	lsls	r3, r3, #1
 800eebe:	440b      	add	r3, r1
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	4413      	add	r3, r2
 800eec4:	613b      	str	r3, [r7, #16]
 800eec6:	e011      	b.n	800eeec <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eed0:	d101      	bne.n	800eed6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800eed2:	2300      	movs	r3, #0
 800eed4:	e029      	b.n	800ef2a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	699a      	ldr	r2, [r3, #24]
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	4619      	mov	r1, r3
 800eee0:	460b      	mov	r3, r1
 800eee2:	005b      	lsls	r3, r3, #1
 800eee4:	440b      	add	r3, r1
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	4413      	add	r3, r2
 800eeea:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	6939      	ldr	r1, [r7, #16]
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f7ff ffad 	bl	800ee52 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d002      	beq.n	800ef04 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	617b      	str	r3, [r7, #20]
      break;
 800ef02:	e011      	b.n	800ef28 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef0c:	d00b      	beq.n	800ef26 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	699a      	ldr	r2, [r3, #24]
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	4619      	mov	r1, r3
 800ef18:	460b      	mov	r3, r1
 800ef1a:	005b      	lsls	r3, r3, #1
 800ef1c:	440b      	add	r3, r1
 800ef1e:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800ef20:	4413      	add	r3, r2
 800ef22:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800ef24:	e7e2      	b.n	800eeec <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 800ef26:	bf00      	nop
  } while (true);
  return result;
 800ef28:	697b      	ldr	r3, [r7, #20]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3718      	adds	r7, #24
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b098      	sub	sp, #96	; 0x60
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef40:	f083 0301 	eor.w	r3, r3, #1
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	f040 815f 	bne.w	800f20a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f000 815a 	beq.w	800f20a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 800ef64:	2300      	movs	r3, #0
 800ef66:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800ef68:	2300      	movs	r3, #0
 800ef6a:	657b      	str	r3, [r7, #84]	; 0x54
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef72:	429a      	cmp	r2, r3
 800ef74:	da4d      	bge.n	800f012 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	68da      	ldr	r2, [r3, #12]
 800ef7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef7c:	011b      	lsls	r3, r3, #4
 800ef7e:	4413      	add	r3, r2
 800ef80:	685b      	ldr	r3, [r3, #4]
 800ef82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef86:	d11e      	bne.n	800efc6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 800ef88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	68da      	ldr	r2, [r3, #12]
 800ef92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef94:	011b      	lsls	r3, r3, #4
 800ef96:	441a      	add	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6919      	ldr	r1, [r3, #16]
 800ef9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	440b      	add	r3, r1
 800efa2:	6812      	ldr	r2, [r2, #0]
 800efa4:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	695a      	ldr	r2, [r3, #20]
 800efaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	4413      	add	r3, r2
 800efb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efb2:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	4413      	add	r3, r2
 800efbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	e021      	b.n	800f00a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	68da      	ldr	r2, [r3, #12]
 800efca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efcc:	011b      	lsls	r3, r3, #4
 800efce:	441a      	add	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6919      	ldr	r1, [r3, #16]
 800efd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	440b      	add	r3, r1
 800efda:	6812      	ldr	r2, [r2, #0]
 800efdc:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	695a      	ldr	r2, [r3, #20]
 800efe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	4413      	add	r3, r2
 800efe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efea:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	68da      	ldr	r2, [r3, #12]
 800eff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eff2:	011b      	lsls	r3, r3, #4
 800eff4:	441a      	add	r2, r3
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800effa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	440b      	add	r3, r1
 800f000:	6852      	ldr	r2, [r2, #4]
 800f002:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800f004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f006:	3301      	adds	r3, #1
 800f008:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800f00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f00c:	3301      	adds	r3, #1
 800f00e:	657b      	str	r3, [r7, #84]	; 0x54
 800f010:	e7ac      	b.n	800ef6c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	691a      	ldr	r2, [r3, #16]
 800f016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	695a      	ldr	r2, [r3, #20]
 800f020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f022:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800f024:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800f02a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	461a      	mov	r2, r3
 800f030:	f7ff fdd0 	bl	800ebd4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2201      	movs	r2, #1
 800f03e:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	699a      	ldr	r2, [r3, #24]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6a1b      	ldr	r3, [r3, #32]
 800f048:	4619      	mov	r1, r3
 800f04a:	460b      	mov	r3, r1
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	440b      	add	r3, r1
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800f056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f05c:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	695b      	ldr	r3, [r3, #20]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 800f066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f06a:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	68da      	ldr	r2, [r3, #12]
 800f070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f072:	011b      	lsls	r3, r3, #4
 800f074:	4413      	add	r3, r2
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f07c:	d106      	bne.n	800f08c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	4413      	add	r3, r2
 800f088:	2200      	movs	r2, #0
 800f08a:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	4413      	add	r3, r2
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f09a:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 800f09c:	2301      	movs	r3, #1
 800f09e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	f280 80b0 	bge.w	800f20c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	695a      	ldr	r2, [r3, #20]
 800f0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	68da      	ldr	r2, [r3, #12]
 800f0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c0:	011b      	lsls	r3, r3, #4
 800f0c2:	4413      	add	r3, r2
 800f0c4:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800f0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800f0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0e4:	d12d      	bne.n	800f142 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 800f0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7ff fed1 	bl	800ee98 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800f0f6:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 800f0f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d012      	beq.n	800f124 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	68da      	ldr	r2, [r3, #12]
 800f102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800f108:	4413      	add	r3, r2
 800f10a:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 800f10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800f114:	4413      	add	r3, r2
 800f116:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800f118:	6a3a      	ldr	r2, [r7, #32]
 800f11a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f11c:	429a      	cmp	r2, r3
 800f11e:	dd01      	ble.n	800f124 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 800f120:	6a3b      	ldr	r3, [r7, #32]
 800f122:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 800f124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00f      	beq.n	800f14a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 800f134:	69fa      	ldr	r2, [r7, #28]
 800f136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f138:	429a      	cmp	r2, r3
 800f13a:	da08      	bge.n	800f14e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	647b      	str	r3, [r7, #68]	; 0x44
      }
 800f140:	e7d3      	b.n	800f0ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 800f142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	64bb      	str	r3, [r7, #72]	; 0x48
 800f148:	e002      	b.n	800f150 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800f14a:	bf00      	nop
 800f14c:	e000      	b.n	800f150 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800f14e:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	4413      	add	r3, r2
 800f15a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f15c:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	699a      	ldr	r2, [r3, #24]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	69db      	ldr	r3, [r3, #28]
 800f166:	4619      	mov	r1, r3
 800f168:	460b      	mov	r3, r1
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	440b      	add	r3, r1
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	4413      	add	r3, r2
 800f172:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f178:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f17e:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	69db      	ldr	r3, [r3, #28]
 800f184:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	69db      	ldr	r3, [r3, #28]
 800f18a:	1c5a      	adds	r2, r3, #1
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 800f190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f196:	429a      	cmp	r2, r3
 800f198:	da09      	bge.n	800f1ae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 800f19a:	69bb      	ldr	r3, [r7, #24]
 800f19c:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a1a      	ldr	r2, [r3, #32]
 800f1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1a4:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	697a      	ldr	r2, [r7, #20]
 800f1aa:	621a      	str	r2, [r3, #32]
 800f1ac:	e029      	b.n	800f202 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 800f1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1b0:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 800f1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1be:	d107      	bne.n	800f1d0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 800f1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1c2:	697a      	ldr	r2, [r7, #20]
 800f1c4:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1cc:	609a      	str	r2, [r3, #8]
          break;
 800f1ce:	e018      	b.n	800f202 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6999      	ldr	r1, [r3, #24]
 800f1d4:	693a      	ldr	r2, [r7, #16]
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	005b      	lsls	r3, r3, #1
 800f1da:	4413      	add	r3, r2
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	440b      	add	r3, r1
 800f1e0:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	da07      	bge.n	800f1fc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 800f1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ee:	689a      	ldr	r2, [r3, #8]
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 800f1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1f6:	697a      	ldr	r2, [r7, #20]
 800f1f8:	609a      	str	r2, [r3, #8]
          break;
 800f1fa:	e002      	b.n	800f202 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	643b      	str	r3, [r7, #64]	; 0x40
      }
 800f200:	e7d7      	b.n	800f1b2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 800f202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f204:	3301      	adds	r3, #1
 800f206:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f208:	e74a      	b.n	800f0a0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 800f20a:	bf00      	nop
    }
  }
}
 800f20c:	3760      	adds	r7, #96	; 0x60
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800f212:	b580      	push	{r7, lr}
 800f214:	b086      	sub	sp, #24
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f7ff fe89 	bl	800ef32 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d101      	bne.n	800f22c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 800f228:	2300      	movs	r3, #0
 800f22a:	e035      	b.n	800f298 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	699a      	ldr	r2, [r3, #24]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6a1b      	ldr	r3, [r3, #32]
 800f234:	4619      	mov	r1, r3
 800f236:	460b      	mov	r3, r1
 800f238:	005b      	lsls	r3, r3, #1
 800f23a:	440b      	add	r3, r1
 800f23c:	009b      	lsls	r3, r3, #2
 800f23e:	4413      	add	r3, r2
 800f240:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 800f242:	2300      	movs	r3, #0
 800f244:	613b      	str	r3, [r7, #16]
  while (entry) {
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d024      	beq.n	800f296 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	68da      	ldr	r2, [r3, #12]
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 800f256:	4413      	add	r3, r2
 800f258:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4413      	add	r3, r2
 800f264:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d901      	bls.n	800f272 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	689b      	ldr	r3, [r3, #8]
 800f276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f27a:	d00b      	beq.n	800f294 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	699a      	ldr	r2, [r3, #24]
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	4619      	mov	r1, r3
 800f286:	460b      	mov	r3, r1
 800f288:	005b      	lsls	r3, r3, #1
 800f28a:	440b      	add	r3, r1
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	4413      	add	r3, r2
 800f290:	617b      	str	r3, [r7, #20]
  while (entry) {
 800f292:	e7d8      	b.n	800f246 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 800f294:	bf00      	nop
  }
  return max_size;
 800f296:	693b      	ldr	r3, [r7, #16]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3718      	adds	r7, #24
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr

0800f2b8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	607a      	str	r2, [r7, #4]
 800f2c4:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f7ff fe33 	bl	800ef32 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	db04      	blt.n	800f2dc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	db08      	blt.n	800f2ee <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	4909      	ldr	r1, [pc, #36]	; (800f308 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 800f2e4:	68b8      	ldr	r0, [r7, #8]
 800f2e6:	f7f5 fa8d 	bl	8004804 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e008      	b.n	800f300 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	4413      	add	r3, r2
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800f2fe:	2300      	movs	r3, #0
}
 800f300:	4618      	mov	r0, r3
 800f302:	3710      	adds	r7, #16
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	08016e4c 	.word	0x08016e4c

0800f30c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	2104      	movs	r1, #4
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7f5 febf 	bl	800509e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800f320:	4603      	mov	r3, r0
  }
 800f322:	4618      	mov	r0, r3
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b082      	sub	sp, #8
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	210a      	movs	r1, #10
 800f338:	4618      	mov	r0, r3
 800f33a:	f7f5 fe82 	bl	8005042 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800f33e:	4603      	mov	r3, r0
 800f340:	b2db      	uxtb	r3, r3
  }
 800f342:	4618      	mov	r0, r3
 800f344:	3708      	adds	r7, #8
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b084      	sub	sp, #16
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 800f358:	f000 fa73 	bl	800f842 <abort>

  return std::max(
      op_code->builtin_code(),
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f7ff ffe4 	bl	800f32a <_ZNK6tflite12OperatorCode12builtin_codeEv>
 800f362:	4603      	mov	r3, r0
 800f364:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f7ff ffd0 	bl	800f30c <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 800f36c:	4603      	mov	r3, r0
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	73fb      	strb	r3, [r7, #15]
 800f372:	f107 020f 	add.w	r2, r7, #15
 800f376:	f107 030e 	add.w	r3, r7, #14
 800f37a:	4611      	mov	r1, r2
 800f37c:	4618      	mov	r0, r3
 800f37e:	f000 f806 	bl	800f38e <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 800f382:	4603      	mov	r3, r0
 800f384:	781b      	ldrb	r3, [r3, #0]
}
 800f386:	4618      	mov	r0, r3
 800f388:	3710      	adds	r7, #16
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}

0800f38e <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 800f38e:	b480      	push	{r7}
 800f390:	b083      	sub	sp, #12
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
 800f396:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	781a      	ldrb	r2, [r3, #0]
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d201      	bcs.n	800f3a8 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	e000      	b.n	800f3aa <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 800f3a8:	687b      	ldr	r3, [r7, #4]
    }
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	370c      	adds	r7, #12
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr

0800f3b6 <_ZdlPv>:
 800f3b6:	f000 bab3 	b.w	800f920 <free>

0800f3ba <_ZdlPvj>:
 800f3ba:	f7ff bffc 	b.w	800f3b6 <_ZdlPv>

0800f3be <__cxa_guard_acquire>:
 800f3be:	6803      	ldr	r3, [r0, #0]
 800f3c0:	07db      	lsls	r3, r3, #31
 800f3c2:	d406      	bmi.n	800f3d2 <__cxa_guard_acquire+0x14>
 800f3c4:	7843      	ldrb	r3, [r0, #1]
 800f3c6:	b103      	cbz	r3, 800f3ca <__cxa_guard_acquire+0xc>
 800f3c8:	deff      	udf	#255	; 0xff
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	7043      	strb	r3, [r0, #1]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	4770      	bx	lr
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	4770      	bx	lr

0800f3d6 <__cxa_guard_release>:
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	6003      	str	r3, [r0, #0]
 800f3da:	4770      	bx	lr

0800f3dc <__cxa_pure_virtual>:
 800f3dc:	b508      	push	{r3, lr}
 800f3de:	f000 f80d 	bl	800f3fc <_ZSt9terminatev>

0800f3e2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f3e2:	b508      	push	{r3, lr}
 800f3e4:	4780      	blx	r0
 800f3e6:	f000 fa2c 	bl	800f842 <abort>
	...

0800f3ec <_ZSt13get_terminatev>:
 800f3ec:	4b02      	ldr	r3, [pc, #8]	; (800f3f8 <_ZSt13get_terminatev+0xc>)
 800f3ee:	6818      	ldr	r0, [r3, #0]
 800f3f0:	f3bf 8f5b 	dmb	ish
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	200321d0 	.word	0x200321d0

0800f3fc <_ZSt9terminatev>:
 800f3fc:	b508      	push	{r3, lr}
 800f3fe:	f7ff fff5 	bl	800f3ec <_ZSt13get_terminatev>
 800f402:	f7ff ffee 	bl	800f3e2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800f408 <floor>:
 800f408:	ec51 0b10 	vmov	r0, r1, d0
 800f40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f410:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f414:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f418:	2e13      	cmp	r6, #19
 800f41a:	ee10 5a10 	vmov	r5, s0
 800f41e:	ee10 8a10 	vmov	r8, s0
 800f422:	460c      	mov	r4, r1
 800f424:	dc32      	bgt.n	800f48c <floor+0x84>
 800f426:	2e00      	cmp	r6, #0
 800f428:	da14      	bge.n	800f454 <floor+0x4c>
 800f42a:	a333      	add	r3, pc, #204	; (adr r3, 800f4f8 <floor+0xf0>)
 800f42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f430:	f7f0 ff56 	bl	80002e0 <__adddf3>
 800f434:	2200      	movs	r2, #0
 800f436:	2300      	movs	r3, #0
 800f438:	f7f1 fb98 	bl	8000b6c <__aeabi_dcmpgt>
 800f43c:	b138      	cbz	r0, 800f44e <floor+0x46>
 800f43e:	2c00      	cmp	r4, #0
 800f440:	da57      	bge.n	800f4f2 <floor+0xea>
 800f442:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f446:	431d      	orrs	r5, r3
 800f448:	d001      	beq.n	800f44e <floor+0x46>
 800f44a:	4c2d      	ldr	r4, [pc, #180]	; (800f500 <floor+0xf8>)
 800f44c:	2500      	movs	r5, #0
 800f44e:	4621      	mov	r1, r4
 800f450:	4628      	mov	r0, r5
 800f452:	e025      	b.n	800f4a0 <floor+0x98>
 800f454:	4f2b      	ldr	r7, [pc, #172]	; (800f504 <floor+0xfc>)
 800f456:	4137      	asrs	r7, r6
 800f458:	ea01 0307 	and.w	r3, r1, r7
 800f45c:	4303      	orrs	r3, r0
 800f45e:	d01f      	beq.n	800f4a0 <floor+0x98>
 800f460:	a325      	add	r3, pc, #148	; (adr r3, 800f4f8 <floor+0xf0>)
 800f462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f466:	f7f0 ff3b 	bl	80002e0 <__adddf3>
 800f46a:	2200      	movs	r2, #0
 800f46c:	2300      	movs	r3, #0
 800f46e:	f7f1 fb7d 	bl	8000b6c <__aeabi_dcmpgt>
 800f472:	2800      	cmp	r0, #0
 800f474:	d0eb      	beq.n	800f44e <floor+0x46>
 800f476:	2c00      	cmp	r4, #0
 800f478:	bfbe      	ittt	lt
 800f47a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f47e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f482:	19a4      	addlt	r4, r4, r6
 800f484:	ea24 0407 	bic.w	r4, r4, r7
 800f488:	2500      	movs	r5, #0
 800f48a:	e7e0      	b.n	800f44e <floor+0x46>
 800f48c:	2e33      	cmp	r6, #51	; 0x33
 800f48e:	dd0b      	ble.n	800f4a8 <floor+0xa0>
 800f490:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f494:	d104      	bne.n	800f4a0 <floor+0x98>
 800f496:	ee10 2a10 	vmov	r2, s0
 800f49a:	460b      	mov	r3, r1
 800f49c:	f7f0 ff20 	bl	80002e0 <__adddf3>
 800f4a0:	ec41 0b10 	vmov	d0, r0, r1
 800f4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f4ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4b0:	fa23 f707 	lsr.w	r7, r3, r7
 800f4b4:	4207      	tst	r7, r0
 800f4b6:	d0f3      	beq.n	800f4a0 <floor+0x98>
 800f4b8:	a30f      	add	r3, pc, #60	; (adr r3, 800f4f8 <floor+0xf0>)
 800f4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4be:	f7f0 ff0f 	bl	80002e0 <__adddf3>
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	f7f1 fb51 	bl	8000b6c <__aeabi_dcmpgt>
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	d0bf      	beq.n	800f44e <floor+0x46>
 800f4ce:	2c00      	cmp	r4, #0
 800f4d0:	da02      	bge.n	800f4d8 <floor+0xd0>
 800f4d2:	2e14      	cmp	r6, #20
 800f4d4:	d103      	bne.n	800f4de <floor+0xd6>
 800f4d6:	3401      	adds	r4, #1
 800f4d8:	ea25 0507 	bic.w	r5, r5, r7
 800f4dc:	e7b7      	b.n	800f44e <floor+0x46>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f4e4:	fa03 f606 	lsl.w	r6, r3, r6
 800f4e8:	4435      	add	r5, r6
 800f4ea:	4545      	cmp	r5, r8
 800f4ec:	bf38      	it	cc
 800f4ee:	18e4      	addcc	r4, r4, r3
 800f4f0:	e7f2      	b.n	800f4d8 <floor+0xd0>
 800f4f2:	2500      	movs	r5, #0
 800f4f4:	462c      	mov	r4, r5
 800f4f6:	e7aa      	b.n	800f44e <floor+0x46>
 800f4f8:	8800759c 	.word	0x8800759c
 800f4fc:	7e37e43c 	.word	0x7e37e43c
 800f500:	bff00000 	.word	0xbff00000
 800f504:	000fffff 	.word	0x000fffff

0800f508 <frexp>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	2100      	movs	r1, #0
 800f50c:	ec55 4b10 	vmov	r4, r5, d0
 800f510:	6001      	str	r1, [r0, #0]
 800f512:	4916      	ldr	r1, [pc, #88]	; (800f56c <frexp+0x64>)
 800f514:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800f518:	428a      	cmp	r2, r1
 800f51a:	4606      	mov	r6, r0
 800f51c:	462b      	mov	r3, r5
 800f51e:	dc22      	bgt.n	800f566 <frexp+0x5e>
 800f520:	ee10 1a10 	vmov	r1, s0
 800f524:	4311      	orrs	r1, r2
 800f526:	d01e      	beq.n	800f566 <frexp+0x5e>
 800f528:	4911      	ldr	r1, [pc, #68]	; (800f570 <frexp+0x68>)
 800f52a:	4029      	ands	r1, r5
 800f52c:	b969      	cbnz	r1, 800f54a <frexp+0x42>
 800f52e:	4b11      	ldr	r3, [pc, #68]	; (800f574 <frexp+0x6c>)
 800f530:	2200      	movs	r2, #0
 800f532:	ee10 0a10 	vmov	r0, s0
 800f536:	4629      	mov	r1, r5
 800f538:	f7f1 f888 	bl	800064c <__aeabi_dmul>
 800f53c:	460b      	mov	r3, r1
 800f53e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f542:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800f546:	4604      	mov	r4, r0
 800f548:	6031      	str	r1, [r6, #0]
 800f54a:	6831      	ldr	r1, [r6, #0]
 800f54c:	1512      	asrs	r2, r2, #20
 800f54e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f552:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800f556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f55a:	440a      	add	r2, r1
 800f55c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800f560:	6032      	str	r2, [r6, #0]
 800f562:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800f566:	ec45 4b10 	vmov	d0, r4, r5
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
 800f56c:	7fefffff 	.word	0x7fefffff
 800f570:	7ff00000 	.word	0x7ff00000
 800f574:	43500000 	.word	0x43500000

0800f578 <round>:
 800f578:	ec51 0b10 	vmov	r0, r1, d0
 800f57c:	b570      	push	{r4, r5, r6, lr}
 800f57e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800f582:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800f586:	2c13      	cmp	r4, #19
 800f588:	ee10 2a10 	vmov	r2, s0
 800f58c:	460b      	mov	r3, r1
 800f58e:	dc19      	bgt.n	800f5c4 <round+0x4c>
 800f590:	2c00      	cmp	r4, #0
 800f592:	da09      	bge.n	800f5a8 <round+0x30>
 800f594:	3401      	adds	r4, #1
 800f596:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800f59a:	d103      	bne.n	800f5a4 <round+0x2c>
 800f59c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f5a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	e028      	b.n	800f5fa <round+0x82>
 800f5a8:	4d15      	ldr	r5, [pc, #84]	; (800f600 <round+0x88>)
 800f5aa:	4125      	asrs	r5, r4
 800f5ac:	ea01 0605 	and.w	r6, r1, r5
 800f5b0:	4332      	orrs	r2, r6
 800f5b2:	d00e      	beq.n	800f5d2 <round+0x5a>
 800f5b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f5b8:	fa42 f404 	asr.w	r4, r2, r4
 800f5bc:	4423      	add	r3, r4
 800f5be:	ea23 0305 	bic.w	r3, r3, r5
 800f5c2:	e7ef      	b.n	800f5a4 <round+0x2c>
 800f5c4:	2c33      	cmp	r4, #51	; 0x33
 800f5c6:	dd07      	ble.n	800f5d8 <round+0x60>
 800f5c8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f5cc:	d101      	bne.n	800f5d2 <round+0x5a>
 800f5ce:	f7f0 fe87 	bl	80002e0 <__adddf3>
 800f5d2:	ec41 0b10 	vmov	d0, r0, r1
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
 800f5d8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800f5dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f5e0:	40f5      	lsrs	r5, r6
 800f5e2:	4228      	tst	r0, r5
 800f5e4:	d0f5      	beq.n	800f5d2 <round+0x5a>
 800f5e6:	2101      	movs	r1, #1
 800f5e8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800f5ec:	fa01 f404 	lsl.w	r4, r1, r4
 800f5f0:	1912      	adds	r2, r2, r4
 800f5f2:	bf28      	it	cs
 800f5f4:	185b      	addcs	r3, r3, r1
 800f5f6:	ea22 0105 	bic.w	r1, r2, r5
 800f5fa:	4608      	mov	r0, r1
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	e7e8      	b.n	800f5d2 <round+0x5a>
 800f600:	000fffff 	.word	0x000fffff

0800f604 <expf>:
 800f604:	b508      	push	{r3, lr}
 800f606:	ed2d 8b02 	vpush	{d8}
 800f60a:	eef0 8a40 	vmov.f32	s17, s0
 800f60e:	f000 f837 	bl	800f680 <__ieee754_expf>
 800f612:	4b16      	ldr	r3, [pc, #88]	; (800f66c <expf+0x68>)
 800f614:	f993 3000 	ldrsb.w	r3, [r3]
 800f618:	3301      	adds	r3, #1
 800f61a:	eeb0 8a40 	vmov.f32	s16, s0
 800f61e:	d011      	beq.n	800f644 <expf+0x40>
 800f620:	eeb0 0a68 	vmov.f32	s0, s17
 800f624:	f000 f900 	bl	800f828 <finitef>
 800f628:	b160      	cbz	r0, 800f644 <expf+0x40>
 800f62a:	eddf 7a11 	vldr	s15, [pc, #68]	; 800f670 <expf+0x6c>
 800f62e:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f636:	dd0a      	ble.n	800f64e <expf+0x4a>
 800f638:	f000 f92e 	bl	800f898 <__errno>
 800f63c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800f674 <expf+0x70>
 800f640:	2322      	movs	r3, #34	; 0x22
 800f642:	6003      	str	r3, [r0, #0]
 800f644:	eeb0 0a48 	vmov.f32	s0, s16
 800f648:	ecbd 8b02 	vpop	{d8}
 800f64c:	bd08      	pop	{r3, pc}
 800f64e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f678 <expf+0x74>
 800f652:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65a:	d5f3      	bpl.n	800f644 <expf+0x40>
 800f65c:	f000 f91c 	bl	800f898 <__errno>
 800f660:	2322      	movs	r3, #34	; 0x22
 800f662:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800f67c <expf+0x78>
 800f666:	6003      	str	r3, [r0, #0]
 800f668:	e7ec      	b.n	800f644 <expf+0x40>
 800f66a:	bf00      	nop
 800f66c:	200321d4 	.word	0x200321d4
 800f670:	42b17180 	.word	0x42b17180
 800f674:	7f800000 	.word	0x7f800000
 800f678:	c2cff1b5 	.word	0xc2cff1b5
 800f67c:	00000000 	.word	0x00000000

0800f680 <__ieee754_expf>:
 800f680:	ee10 2a10 	vmov	r2, s0
 800f684:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f688:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f68c:	d902      	bls.n	800f694 <__ieee754_expf+0x14>
 800f68e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f692:	4770      	bx	lr
 800f694:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800f698:	d106      	bne.n	800f6a8 <__ieee754_expf+0x28>
 800f69a:	eddf 7a51 	vldr	s15, [pc, #324]	; 800f7e0 <__ieee754_expf+0x160>
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	bf18      	it	ne
 800f6a2:	eeb0 0a67 	vmovne.f32	s0, s15
 800f6a6:	4770      	bx	lr
 800f6a8:	484e      	ldr	r0, [pc, #312]	; (800f7e4 <__ieee754_expf+0x164>)
 800f6aa:	4282      	cmp	r2, r0
 800f6ac:	dd04      	ble.n	800f6b8 <__ieee754_expf+0x38>
 800f6ae:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800f7e8 <__ieee754_expf+0x168>
 800f6b2:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f6b6:	4770      	bx	lr
 800f6b8:	2a00      	cmp	r2, #0
 800f6ba:	da03      	bge.n	800f6c4 <__ieee754_expf+0x44>
 800f6bc:	4a4b      	ldr	r2, [pc, #300]	; (800f7ec <__ieee754_expf+0x16c>)
 800f6be:	4291      	cmp	r1, r2
 800f6c0:	f200 808a 	bhi.w	800f7d8 <__ieee754_expf+0x158>
 800f6c4:	4a4a      	ldr	r2, [pc, #296]	; (800f7f0 <__ieee754_expf+0x170>)
 800f6c6:	4291      	cmp	r1, r2
 800f6c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f6cc:	d954      	bls.n	800f778 <__ieee754_expf+0xf8>
 800f6ce:	4a49      	ldr	r2, [pc, #292]	; (800f7f4 <__ieee754_expf+0x174>)
 800f6d0:	4291      	cmp	r1, r2
 800f6d2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f6d6:	d836      	bhi.n	800f746 <__ieee754_expf+0xc6>
 800f6d8:	4947      	ldr	r1, [pc, #284]	; (800f7f8 <__ieee754_expf+0x178>)
 800f6da:	4411      	add	r1, r2
 800f6dc:	ed91 7a00 	vldr	s14, [r1]
 800f6e0:	4946      	ldr	r1, [pc, #280]	; (800f7fc <__ieee754_expf+0x17c>)
 800f6e2:	440a      	add	r2, r1
 800f6e4:	edd2 7a00 	vldr	s15, [r2]
 800f6e8:	ee30 7a47 	vsub.f32	s14, s0, s14
 800f6ec:	f1c3 0201 	rsb	r2, r3, #1
 800f6f0:	1ad2      	subs	r2, r2, r3
 800f6f2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800f6f6:	ee60 6a00 	vmul.f32	s13, s0, s0
 800f6fa:	eddf 5a41 	vldr	s11, [pc, #260]	; 800f800 <__ieee754_expf+0x180>
 800f6fe:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800f804 <__ieee754_expf+0x184>
 800f702:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800f706:	eddf 5a40 	vldr	s11, [pc, #256]	; 800f808 <__ieee754_expf+0x188>
 800f70a:	eee5 5a26 	vfma.f32	s11, s10, s13
 800f70e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800f80c <__ieee754_expf+0x18c>
 800f712:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800f716:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f810 <__ieee754_expf+0x190>
 800f71a:	eee5 5a26 	vfma.f32	s11, s10, s13
 800f71e:	eeb0 5a40 	vmov.f32	s10, s0
 800f722:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800f726:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f72a:	eef0 6a45 	vmov.f32	s13, s10
 800f72e:	ee20 5a05 	vmul.f32	s10, s0, s10
 800f732:	bb92      	cbnz	r2, 800f79a <__ieee754_expf+0x11a>
 800f734:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800f738:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800f73c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f740:	ee36 0a40 	vsub.f32	s0, s12, s0
 800f744:	4770      	bx	lr
 800f746:	4b33      	ldr	r3, [pc, #204]	; (800f814 <__ieee754_expf+0x194>)
 800f748:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f818 <__ieee754_expf+0x198>
 800f74c:	4413      	add	r3, r2
 800f74e:	edd3 7a00 	vldr	s15, [r3]
 800f752:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f756:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f81c <__ieee754_expf+0x19c>
 800f75a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f75e:	ee17 2a90 	vmov	r2, s15
 800f762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f766:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f76a:	eeb0 7a40 	vmov.f32	s14, s0
 800f76e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f820 <__ieee754_expf+0x1a0>
 800f772:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f776:	e7bc      	b.n	800f6f2 <__ieee754_expf+0x72>
 800f778:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800f77c:	d20b      	bcs.n	800f796 <__ieee754_expf+0x116>
 800f77e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800f7e8 <__ieee754_expf+0x168>
 800f782:	ee70 6a26 	vadd.f32	s13, s0, s13
 800f786:	eef4 6ac6 	vcmpe.f32	s13, s12
 800f78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78e:	dd02      	ble.n	800f796 <__ieee754_expf+0x116>
 800f790:	ee30 0a06 	vadd.f32	s0, s0, s12
 800f794:	4770      	bx	lr
 800f796:	2200      	movs	r2, #0
 800f798:	e7ad      	b.n	800f6f6 <__ieee754_expf+0x76>
 800f79a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800f79e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800f7a2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800f7a6:	bfb8      	it	lt
 800f7a8:	3264      	addlt	r2, #100	; 0x64
 800f7aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f7ae:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f7b2:	ee76 7a40 	vsub.f32	s15, s12, s0
 800f7b6:	ee17 3a90 	vmov	r3, s15
 800f7ba:	bfab      	itete	ge
 800f7bc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800f7c0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800f7c4:	ee00 3a10 	vmovge	s0, r3
 800f7c8:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800f824 <__ieee754_expf+0x1a4>
 800f7cc:	bfbc      	itt	lt
 800f7ce:	ee00 3a10 	vmovlt	s0, r3
 800f7d2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f7d6:	4770      	bx	lr
 800f7d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f7e0 <__ieee754_expf+0x160>
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	00000000 	.word	0x00000000
 800f7e4:	42b17217 	.word	0x42b17217
 800f7e8:	7149f2ca 	.word	0x7149f2ca
 800f7ec:	42cff1b5 	.word	0x42cff1b5
 800f7f0:	3eb17218 	.word	0x3eb17218
 800f7f4:	3f851591 	.word	0x3f851591
 800f7f8:	080172e8 	.word	0x080172e8
 800f7fc:	080172f0 	.word	0x080172f0
 800f800:	3331bb4c 	.word	0x3331bb4c
 800f804:	b5ddea0e 	.word	0xb5ddea0e
 800f808:	388ab355 	.word	0x388ab355
 800f80c:	bb360b61 	.word	0xbb360b61
 800f810:	3e2aaaab 	.word	0x3e2aaaab
 800f814:	080172e0 	.word	0x080172e0
 800f818:	3fb8aa3b 	.word	0x3fb8aa3b
 800f81c:	3f317180 	.word	0x3f317180
 800f820:	3717f7d1 	.word	0x3717f7d1
 800f824:	0d800000 	.word	0x0d800000

0800f828 <finitef>:
 800f828:	b082      	sub	sp, #8
 800f82a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f82e:	9801      	ldr	r0, [sp, #4]
 800f830:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f834:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f838:	bfac      	ite	ge
 800f83a:	2000      	movge	r0, #0
 800f83c:	2001      	movlt	r0, #1
 800f83e:	b002      	add	sp, #8
 800f840:	4770      	bx	lr

0800f842 <abort>:
 800f842:	b508      	push	{r3, lr}
 800f844:	2006      	movs	r0, #6
 800f846:	f000 ff49 	bl	80106dc <raise>
 800f84a:	2001      	movs	r0, #1
 800f84c:	f7f2 fc0e 	bl	800206c <_exit>

0800f850 <__assert_func>:
 800f850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f852:	4614      	mov	r4, r2
 800f854:	461a      	mov	r2, r3
 800f856:	4b09      	ldr	r3, [pc, #36]	; (800f87c <__assert_func+0x2c>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4605      	mov	r5, r0
 800f85c:	68d8      	ldr	r0, [r3, #12]
 800f85e:	b14c      	cbz	r4, 800f874 <__assert_func+0x24>
 800f860:	4b07      	ldr	r3, [pc, #28]	; (800f880 <__assert_func+0x30>)
 800f862:	9100      	str	r1, [sp, #0]
 800f864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f868:	4906      	ldr	r1, [pc, #24]	; (800f884 <__assert_func+0x34>)
 800f86a:	462b      	mov	r3, r5
 800f86c:	f000 f81a 	bl	800f8a4 <fiprintf>
 800f870:	f7ff ffe7 	bl	800f842 <abort>
 800f874:	4b04      	ldr	r3, [pc, #16]	; (800f888 <__assert_func+0x38>)
 800f876:	461c      	mov	r4, r3
 800f878:	e7f3      	b.n	800f862 <__assert_func+0x12>
 800f87a:	bf00      	nop
 800f87c:	200321d8 	.word	0x200321d8
 800f880:	080172f8 	.word	0x080172f8
 800f884:	08017305 	.word	0x08017305
 800f888:	08017333 	.word	0x08017333

0800f88c <atexit>:
 800f88c:	2300      	movs	r3, #0
 800f88e:	4601      	mov	r1, r0
 800f890:	461a      	mov	r2, r3
 800f892:	4618      	mov	r0, r3
 800f894:	f001 b830 	b.w	80108f8 <__register_exitproc>

0800f898 <__errno>:
 800f898:	4b01      	ldr	r3, [pc, #4]	; (800f8a0 <__errno+0x8>)
 800f89a:	6818      	ldr	r0, [r3, #0]
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	200321d8 	.word	0x200321d8

0800f8a4 <fiprintf>:
 800f8a4:	b40e      	push	{r1, r2, r3}
 800f8a6:	b503      	push	{r0, r1, lr}
 800f8a8:	4601      	mov	r1, r0
 800f8aa:	ab03      	add	r3, sp, #12
 800f8ac:	4805      	ldr	r0, [pc, #20]	; (800f8c4 <fiprintf+0x20>)
 800f8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b2:	6800      	ldr	r0, [r0, #0]
 800f8b4:	9301      	str	r3, [sp, #4]
 800f8b6:	f000 f93f 	bl	800fb38 <_vfiprintf_r>
 800f8ba:	b002      	add	sp, #8
 800f8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8c0:	b003      	add	sp, #12
 800f8c2:	4770      	bx	lr
 800f8c4:	200321d8 	.word	0x200321d8

0800f8c8 <__libc_init_array>:
 800f8c8:	b570      	push	{r4, r5, r6, lr}
 800f8ca:	4d0d      	ldr	r5, [pc, #52]	; (800f900 <__libc_init_array+0x38>)
 800f8cc:	4c0d      	ldr	r4, [pc, #52]	; (800f904 <__libc_init_array+0x3c>)
 800f8ce:	1b64      	subs	r4, r4, r5
 800f8d0:	10a4      	asrs	r4, r4, #2
 800f8d2:	2600      	movs	r6, #0
 800f8d4:	42a6      	cmp	r6, r4
 800f8d6:	d109      	bne.n	800f8ec <__libc_init_array+0x24>
 800f8d8:	4d0b      	ldr	r5, [pc, #44]	; (800f908 <__libc_init_array+0x40>)
 800f8da:	4c0c      	ldr	r4, [pc, #48]	; (800f90c <__libc_init_array+0x44>)
 800f8dc:	f002 fefa 	bl	80126d4 <_init>
 800f8e0:	1b64      	subs	r4, r4, r5
 800f8e2:	10a4      	asrs	r4, r4, #2
 800f8e4:	2600      	movs	r6, #0
 800f8e6:	42a6      	cmp	r6, r4
 800f8e8:	d105      	bne.n	800f8f6 <__libc_init_array+0x2e>
 800f8ea:	bd70      	pop	{r4, r5, r6, pc}
 800f8ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8f0:	4798      	blx	r3
 800f8f2:	3601      	adds	r6, #1
 800f8f4:	e7ee      	b.n	800f8d4 <__libc_init_array+0xc>
 800f8f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8fa:	4798      	blx	r3
 800f8fc:	3601      	adds	r6, #1
 800f8fe:	e7f2      	b.n	800f8e6 <__libc_init_array+0x1e>
 800f900:	080176e8 	.word	0x080176e8
 800f904:	080176e8 	.word	0x080176e8
 800f908:	080176e8 	.word	0x080176e8
 800f90c:	080176ec 	.word	0x080176ec

0800f910 <malloc>:
 800f910:	4b02      	ldr	r3, [pc, #8]	; (800f91c <malloc+0xc>)
 800f912:	4601      	mov	r1, r0
 800f914:	6818      	ldr	r0, [r3, #0]
 800f916:	f000 b88b 	b.w	800fa30 <_malloc_r>
 800f91a:	bf00      	nop
 800f91c:	200321d8 	.word	0x200321d8

0800f920 <free>:
 800f920:	4b02      	ldr	r3, [pc, #8]	; (800f92c <free+0xc>)
 800f922:	4601      	mov	r1, r0
 800f924:	6818      	ldr	r0, [r3, #0]
 800f926:	f000 b833 	b.w	800f990 <_free_r>
 800f92a:	bf00      	nop
 800f92c:	200321d8 	.word	0x200321d8

0800f930 <memcpy>:
 800f930:	440a      	add	r2, r1
 800f932:	4291      	cmp	r1, r2
 800f934:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f938:	d100      	bne.n	800f93c <memcpy+0xc>
 800f93a:	4770      	bx	lr
 800f93c:	b510      	push	{r4, lr}
 800f93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f942:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f946:	4291      	cmp	r1, r2
 800f948:	d1f9      	bne.n	800f93e <memcpy+0xe>
 800f94a:	bd10      	pop	{r4, pc}

0800f94c <memmove>:
 800f94c:	4288      	cmp	r0, r1
 800f94e:	b510      	push	{r4, lr}
 800f950:	eb01 0402 	add.w	r4, r1, r2
 800f954:	d902      	bls.n	800f95c <memmove+0x10>
 800f956:	4284      	cmp	r4, r0
 800f958:	4623      	mov	r3, r4
 800f95a:	d807      	bhi.n	800f96c <memmove+0x20>
 800f95c:	1e43      	subs	r3, r0, #1
 800f95e:	42a1      	cmp	r1, r4
 800f960:	d008      	beq.n	800f974 <memmove+0x28>
 800f962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f96a:	e7f8      	b.n	800f95e <memmove+0x12>
 800f96c:	4402      	add	r2, r0
 800f96e:	4601      	mov	r1, r0
 800f970:	428a      	cmp	r2, r1
 800f972:	d100      	bne.n	800f976 <memmove+0x2a>
 800f974:	bd10      	pop	{r4, pc}
 800f976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f97a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f97e:	e7f7      	b.n	800f970 <memmove+0x24>

0800f980 <memset>:
 800f980:	4402      	add	r2, r0
 800f982:	4603      	mov	r3, r0
 800f984:	4293      	cmp	r3, r2
 800f986:	d100      	bne.n	800f98a <memset+0xa>
 800f988:	4770      	bx	lr
 800f98a:	f803 1b01 	strb.w	r1, [r3], #1
 800f98e:	e7f9      	b.n	800f984 <memset+0x4>

0800f990 <_free_r>:
 800f990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f992:	2900      	cmp	r1, #0
 800f994:	d048      	beq.n	800fa28 <_free_r+0x98>
 800f996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f99a:	9001      	str	r0, [sp, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f1a1 0404 	sub.w	r4, r1, #4
 800f9a2:	bfb8      	it	lt
 800f9a4:	18e4      	addlt	r4, r4, r3
 800f9a6:	f002 f8a7 	bl	8011af8 <__malloc_lock>
 800f9aa:	4a20      	ldr	r2, [pc, #128]	; (800fa2c <_free_r+0x9c>)
 800f9ac:	9801      	ldr	r0, [sp, #4]
 800f9ae:	6813      	ldr	r3, [r2, #0]
 800f9b0:	4615      	mov	r5, r2
 800f9b2:	b933      	cbnz	r3, 800f9c2 <_free_r+0x32>
 800f9b4:	6063      	str	r3, [r4, #4]
 800f9b6:	6014      	str	r4, [r2, #0]
 800f9b8:	b003      	add	sp, #12
 800f9ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9be:	f002 b8a1 	b.w	8011b04 <__malloc_unlock>
 800f9c2:	42a3      	cmp	r3, r4
 800f9c4:	d90b      	bls.n	800f9de <_free_r+0x4e>
 800f9c6:	6821      	ldr	r1, [r4, #0]
 800f9c8:	1862      	adds	r2, r4, r1
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	bf04      	itt	eq
 800f9ce:	681a      	ldreq	r2, [r3, #0]
 800f9d0:	685b      	ldreq	r3, [r3, #4]
 800f9d2:	6063      	str	r3, [r4, #4]
 800f9d4:	bf04      	itt	eq
 800f9d6:	1852      	addeq	r2, r2, r1
 800f9d8:	6022      	streq	r2, [r4, #0]
 800f9da:	602c      	str	r4, [r5, #0]
 800f9dc:	e7ec      	b.n	800f9b8 <_free_r+0x28>
 800f9de:	461a      	mov	r2, r3
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	b10b      	cbz	r3, 800f9e8 <_free_r+0x58>
 800f9e4:	42a3      	cmp	r3, r4
 800f9e6:	d9fa      	bls.n	800f9de <_free_r+0x4e>
 800f9e8:	6811      	ldr	r1, [r2, #0]
 800f9ea:	1855      	adds	r5, r2, r1
 800f9ec:	42a5      	cmp	r5, r4
 800f9ee:	d10b      	bne.n	800fa08 <_free_r+0x78>
 800f9f0:	6824      	ldr	r4, [r4, #0]
 800f9f2:	4421      	add	r1, r4
 800f9f4:	1854      	adds	r4, r2, r1
 800f9f6:	42a3      	cmp	r3, r4
 800f9f8:	6011      	str	r1, [r2, #0]
 800f9fa:	d1dd      	bne.n	800f9b8 <_free_r+0x28>
 800f9fc:	681c      	ldr	r4, [r3, #0]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	6053      	str	r3, [r2, #4]
 800fa02:	4421      	add	r1, r4
 800fa04:	6011      	str	r1, [r2, #0]
 800fa06:	e7d7      	b.n	800f9b8 <_free_r+0x28>
 800fa08:	d902      	bls.n	800fa10 <_free_r+0x80>
 800fa0a:	230c      	movs	r3, #12
 800fa0c:	6003      	str	r3, [r0, #0]
 800fa0e:	e7d3      	b.n	800f9b8 <_free_r+0x28>
 800fa10:	6825      	ldr	r5, [r4, #0]
 800fa12:	1961      	adds	r1, r4, r5
 800fa14:	428b      	cmp	r3, r1
 800fa16:	bf04      	itt	eq
 800fa18:	6819      	ldreq	r1, [r3, #0]
 800fa1a:	685b      	ldreq	r3, [r3, #4]
 800fa1c:	6063      	str	r3, [r4, #4]
 800fa1e:	bf04      	itt	eq
 800fa20:	1949      	addeq	r1, r1, r5
 800fa22:	6021      	streq	r1, [r4, #0]
 800fa24:	6054      	str	r4, [r2, #4]
 800fa26:	e7c7      	b.n	800f9b8 <_free_r+0x28>
 800fa28:	b003      	add	sp, #12
 800fa2a:	bd30      	pop	{r4, r5, pc}
 800fa2c:	2003edd8 	.word	0x2003edd8

0800fa30 <_malloc_r>:
 800fa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa32:	1ccd      	adds	r5, r1, #3
 800fa34:	f025 0503 	bic.w	r5, r5, #3
 800fa38:	3508      	adds	r5, #8
 800fa3a:	2d0c      	cmp	r5, #12
 800fa3c:	bf38      	it	cc
 800fa3e:	250c      	movcc	r5, #12
 800fa40:	2d00      	cmp	r5, #0
 800fa42:	4606      	mov	r6, r0
 800fa44:	db01      	blt.n	800fa4a <_malloc_r+0x1a>
 800fa46:	42a9      	cmp	r1, r5
 800fa48:	d903      	bls.n	800fa52 <_malloc_r+0x22>
 800fa4a:	230c      	movs	r3, #12
 800fa4c:	6033      	str	r3, [r6, #0]
 800fa4e:	2000      	movs	r0, #0
 800fa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa52:	f002 f851 	bl	8011af8 <__malloc_lock>
 800fa56:	4921      	ldr	r1, [pc, #132]	; (800fadc <_malloc_r+0xac>)
 800fa58:	680a      	ldr	r2, [r1, #0]
 800fa5a:	4614      	mov	r4, r2
 800fa5c:	b99c      	cbnz	r4, 800fa86 <_malloc_r+0x56>
 800fa5e:	4f20      	ldr	r7, [pc, #128]	; (800fae0 <_malloc_r+0xb0>)
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	b923      	cbnz	r3, 800fa6e <_malloc_r+0x3e>
 800fa64:	4621      	mov	r1, r4
 800fa66:	4630      	mov	r0, r6
 800fa68:	f000 fe00 	bl	801066c <_sbrk_r>
 800fa6c:	6038      	str	r0, [r7, #0]
 800fa6e:	4629      	mov	r1, r5
 800fa70:	4630      	mov	r0, r6
 800fa72:	f000 fdfb 	bl	801066c <_sbrk_r>
 800fa76:	1c43      	adds	r3, r0, #1
 800fa78:	d123      	bne.n	800fac2 <_malloc_r+0x92>
 800fa7a:	230c      	movs	r3, #12
 800fa7c:	6033      	str	r3, [r6, #0]
 800fa7e:	4630      	mov	r0, r6
 800fa80:	f002 f840 	bl	8011b04 <__malloc_unlock>
 800fa84:	e7e3      	b.n	800fa4e <_malloc_r+0x1e>
 800fa86:	6823      	ldr	r3, [r4, #0]
 800fa88:	1b5b      	subs	r3, r3, r5
 800fa8a:	d417      	bmi.n	800fabc <_malloc_r+0x8c>
 800fa8c:	2b0b      	cmp	r3, #11
 800fa8e:	d903      	bls.n	800fa98 <_malloc_r+0x68>
 800fa90:	6023      	str	r3, [r4, #0]
 800fa92:	441c      	add	r4, r3
 800fa94:	6025      	str	r5, [r4, #0]
 800fa96:	e004      	b.n	800faa2 <_malloc_r+0x72>
 800fa98:	6863      	ldr	r3, [r4, #4]
 800fa9a:	42a2      	cmp	r2, r4
 800fa9c:	bf0c      	ite	eq
 800fa9e:	600b      	streq	r3, [r1, #0]
 800faa0:	6053      	strne	r3, [r2, #4]
 800faa2:	4630      	mov	r0, r6
 800faa4:	f002 f82e 	bl	8011b04 <__malloc_unlock>
 800faa8:	f104 000b 	add.w	r0, r4, #11
 800faac:	1d23      	adds	r3, r4, #4
 800faae:	f020 0007 	bic.w	r0, r0, #7
 800fab2:	1ac2      	subs	r2, r0, r3
 800fab4:	d0cc      	beq.n	800fa50 <_malloc_r+0x20>
 800fab6:	1a1b      	subs	r3, r3, r0
 800fab8:	50a3      	str	r3, [r4, r2]
 800faba:	e7c9      	b.n	800fa50 <_malloc_r+0x20>
 800fabc:	4622      	mov	r2, r4
 800fabe:	6864      	ldr	r4, [r4, #4]
 800fac0:	e7cc      	b.n	800fa5c <_malloc_r+0x2c>
 800fac2:	1cc4      	adds	r4, r0, #3
 800fac4:	f024 0403 	bic.w	r4, r4, #3
 800fac8:	42a0      	cmp	r0, r4
 800faca:	d0e3      	beq.n	800fa94 <_malloc_r+0x64>
 800facc:	1a21      	subs	r1, r4, r0
 800face:	4630      	mov	r0, r6
 800fad0:	f000 fdcc 	bl	801066c <_sbrk_r>
 800fad4:	3001      	adds	r0, #1
 800fad6:	d1dd      	bne.n	800fa94 <_malloc_r+0x64>
 800fad8:	e7cf      	b.n	800fa7a <_malloc_r+0x4a>
 800fada:	bf00      	nop
 800fadc:	2003edd8 	.word	0x2003edd8
 800fae0:	2003eddc 	.word	0x2003eddc

0800fae4 <__sfputc_r>:
 800fae4:	6893      	ldr	r3, [r2, #8]
 800fae6:	3b01      	subs	r3, #1
 800fae8:	2b00      	cmp	r3, #0
 800faea:	b410      	push	{r4}
 800faec:	6093      	str	r3, [r2, #8]
 800faee:	da08      	bge.n	800fb02 <__sfputc_r+0x1e>
 800faf0:	6994      	ldr	r4, [r2, #24]
 800faf2:	42a3      	cmp	r3, r4
 800faf4:	db01      	blt.n	800fafa <__sfputc_r+0x16>
 800faf6:	290a      	cmp	r1, #10
 800faf8:	d103      	bne.n	800fb02 <__sfputc_r+0x1e>
 800fafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fafe:	f000 be3b 	b.w	8010778 <__swbuf_r>
 800fb02:	6813      	ldr	r3, [r2, #0]
 800fb04:	1c58      	adds	r0, r3, #1
 800fb06:	6010      	str	r0, [r2, #0]
 800fb08:	7019      	strb	r1, [r3, #0]
 800fb0a:	4608      	mov	r0, r1
 800fb0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <__sfputs_r>:
 800fb12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb14:	4606      	mov	r6, r0
 800fb16:	460f      	mov	r7, r1
 800fb18:	4614      	mov	r4, r2
 800fb1a:	18d5      	adds	r5, r2, r3
 800fb1c:	42ac      	cmp	r4, r5
 800fb1e:	d101      	bne.n	800fb24 <__sfputs_r+0x12>
 800fb20:	2000      	movs	r0, #0
 800fb22:	e007      	b.n	800fb34 <__sfputs_r+0x22>
 800fb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb28:	463a      	mov	r2, r7
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	f7ff ffda 	bl	800fae4 <__sfputc_r>
 800fb30:	1c43      	adds	r3, r0, #1
 800fb32:	d1f3      	bne.n	800fb1c <__sfputs_r+0xa>
 800fb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb38 <_vfiprintf_r>:
 800fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3c:	460d      	mov	r5, r1
 800fb3e:	b09d      	sub	sp, #116	; 0x74
 800fb40:	4614      	mov	r4, r2
 800fb42:	4698      	mov	r8, r3
 800fb44:	4606      	mov	r6, r0
 800fb46:	b118      	cbz	r0, 800fb50 <_vfiprintf_r+0x18>
 800fb48:	6983      	ldr	r3, [r0, #24]
 800fb4a:	b90b      	cbnz	r3, 800fb50 <_vfiprintf_r+0x18>
 800fb4c:	f001 feca 	bl	80118e4 <__sinit>
 800fb50:	4b89      	ldr	r3, [pc, #548]	; (800fd78 <_vfiprintf_r+0x240>)
 800fb52:	429d      	cmp	r5, r3
 800fb54:	d11b      	bne.n	800fb8e <_vfiprintf_r+0x56>
 800fb56:	6875      	ldr	r5, [r6, #4]
 800fb58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb5a:	07d9      	lsls	r1, r3, #31
 800fb5c:	d405      	bmi.n	800fb6a <_vfiprintf_r+0x32>
 800fb5e:	89ab      	ldrh	r3, [r5, #12]
 800fb60:	059a      	lsls	r2, r3, #22
 800fb62:	d402      	bmi.n	800fb6a <_vfiprintf_r+0x32>
 800fb64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb66:	f001 ff60 	bl	8011a2a <__retarget_lock_acquire_recursive>
 800fb6a:	89ab      	ldrh	r3, [r5, #12]
 800fb6c:	071b      	lsls	r3, r3, #28
 800fb6e:	d501      	bpl.n	800fb74 <_vfiprintf_r+0x3c>
 800fb70:	692b      	ldr	r3, [r5, #16]
 800fb72:	b9eb      	cbnz	r3, 800fbb0 <_vfiprintf_r+0x78>
 800fb74:	4629      	mov	r1, r5
 800fb76:	4630      	mov	r0, r6
 800fb78:	f000 fe50 	bl	801081c <__swsetup_r>
 800fb7c:	b1c0      	cbz	r0, 800fbb0 <_vfiprintf_r+0x78>
 800fb7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb80:	07dc      	lsls	r4, r3, #31
 800fb82:	d50e      	bpl.n	800fba2 <_vfiprintf_r+0x6a>
 800fb84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb88:	b01d      	add	sp, #116	; 0x74
 800fb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8e:	4b7b      	ldr	r3, [pc, #492]	; (800fd7c <_vfiprintf_r+0x244>)
 800fb90:	429d      	cmp	r5, r3
 800fb92:	d101      	bne.n	800fb98 <_vfiprintf_r+0x60>
 800fb94:	68b5      	ldr	r5, [r6, #8]
 800fb96:	e7df      	b.n	800fb58 <_vfiprintf_r+0x20>
 800fb98:	4b79      	ldr	r3, [pc, #484]	; (800fd80 <_vfiprintf_r+0x248>)
 800fb9a:	429d      	cmp	r5, r3
 800fb9c:	bf08      	it	eq
 800fb9e:	68f5      	ldreq	r5, [r6, #12]
 800fba0:	e7da      	b.n	800fb58 <_vfiprintf_r+0x20>
 800fba2:	89ab      	ldrh	r3, [r5, #12]
 800fba4:	0598      	lsls	r0, r3, #22
 800fba6:	d4ed      	bmi.n	800fb84 <_vfiprintf_r+0x4c>
 800fba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbaa:	f001 ff40 	bl	8011a2e <__retarget_lock_release_recursive>
 800fbae:	e7e9      	b.n	800fb84 <_vfiprintf_r+0x4c>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9309      	str	r3, [sp, #36]	; 0x24
 800fbb4:	2320      	movs	r3, #32
 800fbb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbba:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbbe:	2330      	movs	r3, #48	; 0x30
 800fbc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fd84 <_vfiprintf_r+0x24c>
 800fbc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbc8:	f04f 0901 	mov.w	r9, #1
 800fbcc:	4623      	mov	r3, r4
 800fbce:	469a      	mov	sl, r3
 800fbd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbd4:	b10a      	cbz	r2, 800fbda <_vfiprintf_r+0xa2>
 800fbd6:	2a25      	cmp	r2, #37	; 0x25
 800fbd8:	d1f9      	bne.n	800fbce <_vfiprintf_r+0x96>
 800fbda:	ebba 0b04 	subs.w	fp, sl, r4
 800fbde:	d00b      	beq.n	800fbf8 <_vfiprintf_r+0xc0>
 800fbe0:	465b      	mov	r3, fp
 800fbe2:	4622      	mov	r2, r4
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f7ff ff93 	bl	800fb12 <__sfputs_r>
 800fbec:	3001      	adds	r0, #1
 800fbee:	f000 80aa 	beq.w	800fd46 <_vfiprintf_r+0x20e>
 800fbf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbf4:	445a      	add	r2, fp
 800fbf6:	9209      	str	r2, [sp, #36]	; 0x24
 800fbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 80a2 	beq.w	800fd46 <_vfiprintf_r+0x20e>
 800fc02:	2300      	movs	r3, #0
 800fc04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc0c:	f10a 0a01 	add.w	sl, sl, #1
 800fc10:	9304      	str	r3, [sp, #16]
 800fc12:	9307      	str	r3, [sp, #28]
 800fc14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc18:	931a      	str	r3, [sp, #104]	; 0x68
 800fc1a:	4654      	mov	r4, sl
 800fc1c:	2205      	movs	r2, #5
 800fc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc22:	4858      	ldr	r0, [pc, #352]	; (800fd84 <_vfiprintf_r+0x24c>)
 800fc24:	f7f0 faf4 	bl	8000210 <memchr>
 800fc28:	9a04      	ldr	r2, [sp, #16]
 800fc2a:	b9d8      	cbnz	r0, 800fc64 <_vfiprintf_r+0x12c>
 800fc2c:	06d1      	lsls	r1, r2, #27
 800fc2e:	bf44      	itt	mi
 800fc30:	2320      	movmi	r3, #32
 800fc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc36:	0713      	lsls	r3, r2, #28
 800fc38:	bf44      	itt	mi
 800fc3a:	232b      	movmi	r3, #43	; 0x2b
 800fc3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc40:	f89a 3000 	ldrb.w	r3, [sl]
 800fc44:	2b2a      	cmp	r3, #42	; 0x2a
 800fc46:	d015      	beq.n	800fc74 <_vfiprintf_r+0x13c>
 800fc48:	9a07      	ldr	r2, [sp, #28]
 800fc4a:	4654      	mov	r4, sl
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	f04f 0c0a 	mov.w	ip, #10
 800fc52:	4621      	mov	r1, r4
 800fc54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc58:	3b30      	subs	r3, #48	; 0x30
 800fc5a:	2b09      	cmp	r3, #9
 800fc5c:	d94e      	bls.n	800fcfc <_vfiprintf_r+0x1c4>
 800fc5e:	b1b0      	cbz	r0, 800fc8e <_vfiprintf_r+0x156>
 800fc60:	9207      	str	r2, [sp, #28]
 800fc62:	e014      	b.n	800fc8e <_vfiprintf_r+0x156>
 800fc64:	eba0 0308 	sub.w	r3, r0, r8
 800fc68:	fa09 f303 	lsl.w	r3, r9, r3
 800fc6c:	4313      	orrs	r3, r2
 800fc6e:	9304      	str	r3, [sp, #16]
 800fc70:	46a2      	mov	sl, r4
 800fc72:	e7d2      	b.n	800fc1a <_vfiprintf_r+0xe2>
 800fc74:	9b03      	ldr	r3, [sp, #12]
 800fc76:	1d19      	adds	r1, r3, #4
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	9103      	str	r1, [sp, #12]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	bfbb      	ittet	lt
 800fc80:	425b      	neglt	r3, r3
 800fc82:	f042 0202 	orrlt.w	r2, r2, #2
 800fc86:	9307      	strge	r3, [sp, #28]
 800fc88:	9307      	strlt	r3, [sp, #28]
 800fc8a:	bfb8      	it	lt
 800fc8c:	9204      	strlt	r2, [sp, #16]
 800fc8e:	7823      	ldrb	r3, [r4, #0]
 800fc90:	2b2e      	cmp	r3, #46	; 0x2e
 800fc92:	d10c      	bne.n	800fcae <_vfiprintf_r+0x176>
 800fc94:	7863      	ldrb	r3, [r4, #1]
 800fc96:	2b2a      	cmp	r3, #42	; 0x2a
 800fc98:	d135      	bne.n	800fd06 <_vfiprintf_r+0x1ce>
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	1d1a      	adds	r2, r3, #4
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	9203      	str	r2, [sp, #12]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	bfb8      	it	lt
 800fca6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fcaa:	3402      	adds	r4, #2
 800fcac:	9305      	str	r3, [sp, #20]
 800fcae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fd94 <_vfiprintf_r+0x25c>
 800fcb2:	7821      	ldrb	r1, [r4, #0]
 800fcb4:	2203      	movs	r2, #3
 800fcb6:	4650      	mov	r0, sl
 800fcb8:	f7f0 faaa 	bl	8000210 <memchr>
 800fcbc:	b140      	cbz	r0, 800fcd0 <_vfiprintf_r+0x198>
 800fcbe:	2340      	movs	r3, #64	; 0x40
 800fcc0:	eba0 000a 	sub.w	r0, r0, sl
 800fcc4:	fa03 f000 	lsl.w	r0, r3, r0
 800fcc8:	9b04      	ldr	r3, [sp, #16]
 800fcca:	4303      	orrs	r3, r0
 800fccc:	3401      	adds	r4, #1
 800fcce:	9304      	str	r3, [sp, #16]
 800fcd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcd4:	482c      	ldr	r0, [pc, #176]	; (800fd88 <_vfiprintf_r+0x250>)
 800fcd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcda:	2206      	movs	r2, #6
 800fcdc:	f7f0 fa98 	bl	8000210 <memchr>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d03f      	beq.n	800fd64 <_vfiprintf_r+0x22c>
 800fce4:	4b29      	ldr	r3, [pc, #164]	; (800fd8c <_vfiprintf_r+0x254>)
 800fce6:	bb1b      	cbnz	r3, 800fd30 <_vfiprintf_r+0x1f8>
 800fce8:	9b03      	ldr	r3, [sp, #12]
 800fcea:	3307      	adds	r3, #7
 800fcec:	f023 0307 	bic.w	r3, r3, #7
 800fcf0:	3308      	adds	r3, #8
 800fcf2:	9303      	str	r3, [sp, #12]
 800fcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcf6:	443b      	add	r3, r7
 800fcf8:	9309      	str	r3, [sp, #36]	; 0x24
 800fcfa:	e767      	b.n	800fbcc <_vfiprintf_r+0x94>
 800fcfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd00:	460c      	mov	r4, r1
 800fd02:	2001      	movs	r0, #1
 800fd04:	e7a5      	b.n	800fc52 <_vfiprintf_r+0x11a>
 800fd06:	2300      	movs	r3, #0
 800fd08:	3401      	adds	r4, #1
 800fd0a:	9305      	str	r3, [sp, #20]
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	f04f 0c0a 	mov.w	ip, #10
 800fd12:	4620      	mov	r0, r4
 800fd14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd18:	3a30      	subs	r2, #48	; 0x30
 800fd1a:	2a09      	cmp	r2, #9
 800fd1c:	d903      	bls.n	800fd26 <_vfiprintf_r+0x1ee>
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d0c5      	beq.n	800fcae <_vfiprintf_r+0x176>
 800fd22:	9105      	str	r1, [sp, #20]
 800fd24:	e7c3      	b.n	800fcae <_vfiprintf_r+0x176>
 800fd26:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	e7f0      	b.n	800fd12 <_vfiprintf_r+0x1da>
 800fd30:	ab03      	add	r3, sp, #12
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	462a      	mov	r2, r5
 800fd36:	4b16      	ldr	r3, [pc, #88]	; (800fd90 <_vfiprintf_r+0x258>)
 800fd38:	a904      	add	r1, sp, #16
 800fd3a:	4630      	mov	r0, r6
 800fd3c:	f000 f8cc 	bl	800fed8 <_printf_float>
 800fd40:	4607      	mov	r7, r0
 800fd42:	1c78      	adds	r0, r7, #1
 800fd44:	d1d6      	bne.n	800fcf4 <_vfiprintf_r+0x1bc>
 800fd46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd48:	07d9      	lsls	r1, r3, #31
 800fd4a:	d405      	bmi.n	800fd58 <_vfiprintf_r+0x220>
 800fd4c:	89ab      	ldrh	r3, [r5, #12]
 800fd4e:	059a      	lsls	r2, r3, #22
 800fd50:	d402      	bmi.n	800fd58 <_vfiprintf_r+0x220>
 800fd52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd54:	f001 fe6b 	bl	8011a2e <__retarget_lock_release_recursive>
 800fd58:	89ab      	ldrh	r3, [r5, #12]
 800fd5a:	065b      	lsls	r3, r3, #25
 800fd5c:	f53f af12 	bmi.w	800fb84 <_vfiprintf_r+0x4c>
 800fd60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd62:	e711      	b.n	800fb88 <_vfiprintf_r+0x50>
 800fd64:	ab03      	add	r3, sp, #12
 800fd66:	9300      	str	r3, [sp, #0]
 800fd68:	462a      	mov	r2, r5
 800fd6a:	4b09      	ldr	r3, [pc, #36]	; (800fd90 <_vfiprintf_r+0x258>)
 800fd6c:	a904      	add	r1, sp, #16
 800fd6e:	4630      	mov	r0, r6
 800fd70:	f000 fb56 	bl	8010420 <_printf_i>
 800fd74:	e7e4      	b.n	800fd40 <_vfiprintf_r+0x208>
 800fd76:	bf00      	nop
 800fd78:	08017534 	.word	0x08017534
 800fd7c:	08017554 	.word	0x08017554
 800fd80:	08017514 	.word	0x08017514
 800fd84:	08017338 	.word	0x08017338
 800fd88:	08017342 	.word	0x08017342
 800fd8c:	0800fed9 	.word	0x0800fed9
 800fd90:	0800fb13 	.word	0x0800fb13
 800fd94:	0801733e 	.word	0x0801733e

0800fd98 <__cvt>:
 800fd98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd9c:	ec55 4b10 	vmov	r4, r5, d0
 800fda0:	2d00      	cmp	r5, #0
 800fda2:	460e      	mov	r6, r1
 800fda4:	4619      	mov	r1, r3
 800fda6:	462b      	mov	r3, r5
 800fda8:	bfbb      	ittet	lt
 800fdaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fdae:	461d      	movlt	r5, r3
 800fdb0:	2300      	movge	r3, #0
 800fdb2:	232d      	movlt	r3, #45	; 0x2d
 800fdb4:	700b      	strb	r3, [r1, #0]
 800fdb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fdbc:	4691      	mov	r9, r2
 800fdbe:	f023 0820 	bic.w	r8, r3, #32
 800fdc2:	bfbc      	itt	lt
 800fdc4:	4622      	movlt	r2, r4
 800fdc6:	4614      	movlt	r4, r2
 800fdc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fdcc:	d005      	beq.n	800fdda <__cvt+0x42>
 800fdce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fdd2:	d100      	bne.n	800fdd6 <__cvt+0x3e>
 800fdd4:	3601      	adds	r6, #1
 800fdd6:	2102      	movs	r1, #2
 800fdd8:	e000      	b.n	800fddc <__cvt+0x44>
 800fdda:	2103      	movs	r1, #3
 800fddc:	ab03      	add	r3, sp, #12
 800fdde:	9301      	str	r3, [sp, #4]
 800fde0:	ab02      	add	r3, sp, #8
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	ec45 4b10 	vmov	d0, r4, r5
 800fde8:	4653      	mov	r3, sl
 800fdea:	4632      	mov	r2, r6
 800fdec:	f000 fe74 	bl	8010ad8 <_dtoa_r>
 800fdf0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fdf4:	4607      	mov	r7, r0
 800fdf6:	d102      	bne.n	800fdfe <__cvt+0x66>
 800fdf8:	f019 0f01 	tst.w	r9, #1
 800fdfc:	d022      	beq.n	800fe44 <__cvt+0xac>
 800fdfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe02:	eb07 0906 	add.w	r9, r7, r6
 800fe06:	d110      	bne.n	800fe2a <__cvt+0x92>
 800fe08:	783b      	ldrb	r3, [r7, #0]
 800fe0a:	2b30      	cmp	r3, #48	; 0x30
 800fe0c:	d10a      	bne.n	800fe24 <__cvt+0x8c>
 800fe0e:	2200      	movs	r2, #0
 800fe10:	2300      	movs	r3, #0
 800fe12:	4620      	mov	r0, r4
 800fe14:	4629      	mov	r1, r5
 800fe16:	f7f0 fe81 	bl	8000b1c <__aeabi_dcmpeq>
 800fe1a:	b918      	cbnz	r0, 800fe24 <__cvt+0x8c>
 800fe1c:	f1c6 0601 	rsb	r6, r6, #1
 800fe20:	f8ca 6000 	str.w	r6, [sl]
 800fe24:	f8da 3000 	ldr.w	r3, [sl]
 800fe28:	4499      	add	r9, r3
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	4620      	mov	r0, r4
 800fe30:	4629      	mov	r1, r5
 800fe32:	f7f0 fe73 	bl	8000b1c <__aeabi_dcmpeq>
 800fe36:	b108      	cbz	r0, 800fe3c <__cvt+0xa4>
 800fe38:	f8cd 900c 	str.w	r9, [sp, #12]
 800fe3c:	2230      	movs	r2, #48	; 0x30
 800fe3e:	9b03      	ldr	r3, [sp, #12]
 800fe40:	454b      	cmp	r3, r9
 800fe42:	d307      	bcc.n	800fe54 <__cvt+0xbc>
 800fe44:	9b03      	ldr	r3, [sp, #12]
 800fe46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe48:	1bdb      	subs	r3, r3, r7
 800fe4a:	4638      	mov	r0, r7
 800fe4c:	6013      	str	r3, [r2, #0]
 800fe4e:	b004      	add	sp, #16
 800fe50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe54:	1c59      	adds	r1, r3, #1
 800fe56:	9103      	str	r1, [sp, #12]
 800fe58:	701a      	strb	r2, [r3, #0]
 800fe5a:	e7f0      	b.n	800fe3e <__cvt+0xa6>

0800fe5c <__exponent>:
 800fe5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2900      	cmp	r1, #0
 800fe62:	bfb8      	it	lt
 800fe64:	4249      	neglt	r1, r1
 800fe66:	f803 2b02 	strb.w	r2, [r3], #2
 800fe6a:	bfb4      	ite	lt
 800fe6c:	222d      	movlt	r2, #45	; 0x2d
 800fe6e:	222b      	movge	r2, #43	; 0x2b
 800fe70:	2909      	cmp	r1, #9
 800fe72:	7042      	strb	r2, [r0, #1]
 800fe74:	dd2a      	ble.n	800fecc <__exponent+0x70>
 800fe76:	f10d 0407 	add.w	r4, sp, #7
 800fe7a:	46a4      	mov	ip, r4
 800fe7c:	270a      	movs	r7, #10
 800fe7e:	46a6      	mov	lr, r4
 800fe80:	460a      	mov	r2, r1
 800fe82:	fb91 f6f7 	sdiv	r6, r1, r7
 800fe86:	fb07 1516 	mls	r5, r7, r6, r1
 800fe8a:	3530      	adds	r5, #48	; 0x30
 800fe8c:	2a63      	cmp	r2, #99	; 0x63
 800fe8e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800fe92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fe96:	4631      	mov	r1, r6
 800fe98:	dcf1      	bgt.n	800fe7e <__exponent+0x22>
 800fe9a:	3130      	adds	r1, #48	; 0x30
 800fe9c:	f1ae 0502 	sub.w	r5, lr, #2
 800fea0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fea4:	1c44      	adds	r4, r0, #1
 800fea6:	4629      	mov	r1, r5
 800fea8:	4561      	cmp	r1, ip
 800feaa:	d30a      	bcc.n	800fec2 <__exponent+0x66>
 800feac:	f10d 0209 	add.w	r2, sp, #9
 800feb0:	eba2 020e 	sub.w	r2, r2, lr
 800feb4:	4565      	cmp	r5, ip
 800feb6:	bf88      	it	hi
 800feb8:	2200      	movhi	r2, #0
 800feba:	4413      	add	r3, r2
 800febc:	1a18      	subs	r0, r3, r0
 800febe:	b003      	add	sp, #12
 800fec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fec6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800feca:	e7ed      	b.n	800fea8 <__exponent+0x4c>
 800fecc:	2330      	movs	r3, #48	; 0x30
 800fece:	3130      	adds	r1, #48	; 0x30
 800fed0:	7083      	strb	r3, [r0, #2]
 800fed2:	70c1      	strb	r1, [r0, #3]
 800fed4:	1d03      	adds	r3, r0, #4
 800fed6:	e7f1      	b.n	800febc <__exponent+0x60>

0800fed8 <_printf_float>:
 800fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fedc:	ed2d 8b02 	vpush	{d8}
 800fee0:	b08d      	sub	sp, #52	; 0x34
 800fee2:	460c      	mov	r4, r1
 800fee4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fee8:	4616      	mov	r6, r2
 800feea:	461f      	mov	r7, r3
 800feec:	4605      	mov	r5, r0
 800feee:	f001 fd97 	bl	8011a20 <_localeconv_r>
 800fef2:	f8d0 a000 	ldr.w	sl, [r0]
 800fef6:	4650      	mov	r0, sl
 800fef8:	f7f0 f9e4 	bl	80002c4 <strlen>
 800fefc:	2300      	movs	r3, #0
 800fefe:	930a      	str	r3, [sp, #40]	; 0x28
 800ff00:	6823      	ldr	r3, [r4, #0]
 800ff02:	9305      	str	r3, [sp, #20]
 800ff04:	f8d8 3000 	ldr.w	r3, [r8]
 800ff08:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ff0c:	3307      	adds	r3, #7
 800ff0e:	f023 0307 	bic.w	r3, r3, #7
 800ff12:	f103 0208 	add.w	r2, r3, #8
 800ff16:	f8c8 2000 	str.w	r2, [r8]
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ff22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ff26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ff2a:	9307      	str	r3, [sp, #28]
 800ff2c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ff30:	ee08 0a10 	vmov	s16, r0
 800ff34:	4b9f      	ldr	r3, [pc, #636]	; (80101b4 <_printf_float+0x2dc>)
 800ff36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff3e:	f7f0 fe1f 	bl	8000b80 <__aeabi_dcmpun>
 800ff42:	bb88      	cbnz	r0, 800ffa8 <_printf_float+0xd0>
 800ff44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff48:	4b9a      	ldr	r3, [pc, #616]	; (80101b4 <_printf_float+0x2dc>)
 800ff4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff4e:	f7f0 fdf9 	bl	8000b44 <__aeabi_dcmple>
 800ff52:	bb48      	cbnz	r0, 800ffa8 <_printf_float+0xd0>
 800ff54:	2200      	movs	r2, #0
 800ff56:	2300      	movs	r3, #0
 800ff58:	4640      	mov	r0, r8
 800ff5a:	4649      	mov	r1, r9
 800ff5c:	f7f0 fde8 	bl	8000b30 <__aeabi_dcmplt>
 800ff60:	b110      	cbz	r0, 800ff68 <_printf_float+0x90>
 800ff62:	232d      	movs	r3, #45	; 0x2d
 800ff64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff68:	4b93      	ldr	r3, [pc, #588]	; (80101b8 <_printf_float+0x2e0>)
 800ff6a:	4894      	ldr	r0, [pc, #592]	; (80101bc <_printf_float+0x2e4>)
 800ff6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ff70:	bf94      	ite	ls
 800ff72:	4698      	movls	r8, r3
 800ff74:	4680      	movhi	r8, r0
 800ff76:	2303      	movs	r3, #3
 800ff78:	6123      	str	r3, [r4, #16]
 800ff7a:	9b05      	ldr	r3, [sp, #20]
 800ff7c:	f023 0204 	bic.w	r2, r3, #4
 800ff80:	6022      	str	r2, [r4, #0]
 800ff82:	f04f 0900 	mov.w	r9, #0
 800ff86:	9700      	str	r7, [sp, #0]
 800ff88:	4633      	mov	r3, r6
 800ff8a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ff8c:	4621      	mov	r1, r4
 800ff8e:	4628      	mov	r0, r5
 800ff90:	f000 f9d8 	bl	8010344 <_printf_common>
 800ff94:	3001      	adds	r0, #1
 800ff96:	f040 8090 	bne.w	80100ba <_printf_float+0x1e2>
 800ff9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff9e:	b00d      	add	sp, #52	; 0x34
 800ffa0:	ecbd 8b02 	vpop	{d8}
 800ffa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa8:	4642      	mov	r2, r8
 800ffaa:	464b      	mov	r3, r9
 800ffac:	4640      	mov	r0, r8
 800ffae:	4649      	mov	r1, r9
 800ffb0:	f7f0 fde6 	bl	8000b80 <__aeabi_dcmpun>
 800ffb4:	b140      	cbz	r0, 800ffc8 <_printf_float+0xf0>
 800ffb6:	464b      	mov	r3, r9
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	bfbc      	itt	lt
 800ffbc:	232d      	movlt	r3, #45	; 0x2d
 800ffbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ffc2:	487f      	ldr	r0, [pc, #508]	; (80101c0 <_printf_float+0x2e8>)
 800ffc4:	4b7f      	ldr	r3, [pc, #508]	; (80101c4 <_printf_float+0x2ec>)
 800ffc6:	e7d1      	b.n	800ff6c <_printf_float+0x94>
 800ffc8:	6863      	ldr	r3, [r4, #4]
 800ffca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ffce:	9206      	str	r2, [sp, #24]
 800ffd0:	1c5a      	adds	r2, r3, #1
 800ffd2:	d13f      	bne.n	8010054 <_printf_float+0x17c>
 800ffd4:	2306      	movs	r3, #6
 800ffd6:	6063      	str	r3, [r4, #4]
 800ffd8:	9b05      	ldr	r3, [sp, #20]
 800ffda:	6861      	ldr	r1, [r4, #4]
 800ffdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	9303      	str	r3, [sp, #12]
 800ffe4:	ab0a      	add	r3, sp, #40	; 0x28
 800ffe6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ffea:	ab09      	add	r3, sp, #36	; 0x24
 800ffec:	ec49 8b10 	vmov	d0, r8, r9
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	6022      	str	r2, [r4, #0]
 800fff4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fff8:	4628      	mov	r0, r5
 800fffa:	f7ff fecd 	bl	800fd98 <__cvt>
 800fffe:	9b06      	ldr	r3, [sp, #24]
 8010000:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010002:	2b47      	cmp	r3, #71	; 0x47
 8010004:	4680      	mov	r8, r0
 8010006:	d108      	bne.n	801001a <_printf_float+0x142>
 8010008:	1cc8      	adds	r0, r1, #3
 801000a:	db02      	blt.n	8010012 <_printf_float+0x13a>
 801000c:	6863      	ldr	r3, [r4, #4]
 801000e:	4299      	cmp	r1, r3
 8010010:	dd41      	ble.n	8010096 <_printf_float+0x1be>
 8010012:	f1ab 0b02 	sub.w	fp, fp, #2
 8010016:	fa5f fb8b 	uxtb.w	fp, fp
 801001a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801001e:	d820      	bhi.n	8010062 <_printf_float+0x18a>
 8010020:	3901      	subs	r1, #1
 8010022:	465a      	mov	r2, fp
 8010024:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010028:	9109      	str	r1, [sp, #36]	; 0x24
 801002a:	f7ff ff17 	bl	800fe5c <__exponent>
 801002e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010030:	1813      	adds	r3, r2, r0
 8010032:	2a01      	cmp	r2, #1
 8010034:	4681      	mov	r9, r0
 8010036:	6123      	str	r3, [r4, #16]
 8010038:	dc02      	bgt.n	8010040 <_printf_float+0x168>
 801003a:	6822      	ldr	r2, [r4, #0]
 801003c:	07d2      	lsls	r2, r2, #31
 801003e:	d501      	bpl.n	8010044 <_printf_float+0x16c>
 8010040:	3301      	adds	r3, #1
 8010042:	6123      	str	r3, [r4, #16]
 8010044:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010048:	2b00      	cmp	r3, #0
 801004a:	d09c      	beq.n	800ff86 <_printf_float+0xae>
 801004c:	232d      	movs	r3, #45	; 0x2d
 801004e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010052:	e798      	b.n	800ff86 <_printf_float+0xae>
 8010054:	9a06      	ldr	r2, [sp, #24]
 8010056:	2a47      	cmp	r2, #71	; 0x47
 8010058:	d1be      	bne.n	800ffd8 <_printf_float+0x100>
 801005a:	2b00      	cmp	r3, #0
 801005c:	d1bc      	bne.n	800ffd8 <_printf_float+0x100>
 801005e:	2301      	movs	r3, #1
 8010060:	e7b9      	b.n	800ffd6 <_printf_float+0xfe>
 8010062:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010066:	d118      	bne.n	801009a <_printf_float+0x1c2>
 8010068:	2900      	cmp	r1, #0
 801006a:	6863      	ldr	r3, [r4, #4]
 801006c:	dd0b      	ble.n	8010086 <_printf_float+0x1ae>
 801006e:	6121      	str	r1, [r4, #16]
 8010070:	b913      	cbnz	r3, 8010078 <_printf_float+0x1a0>
 8010072:	6822      	ldr	r2, [r4, #0]
 8010074:	07d0      	lsls	r0, r2, #31
 8010076:	d502      	bpl.n	801007e <_printf_float+0x1a6>
 8010078:	3301      	adds	r3, #1
 801007a:	440b      	add	r3, r1
 801007c:	6123      	str	r3, [r4, #16]
 801007e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010080:	f04f 0900 	mov.w	r9, #0
 8010084:	e7de      	b.n	8010044 <_printf_float+0x16c>
 8010086:	b913      	cbnz	r3, 801008e <_printf_float+0x1b6>
 8010088:	6822      	ldr	r2, [r4, #0]
 801008a:	07d2      	lsls	r2, r2, #31
 801008c:	d501      	bpl.n	8010092 <_printf_float+0x1ba>
 801008e:	3302      	adds	r3, #2
 8010090:	e7f4      	b.n	801007c <_printf_float+0x1a4>
 8010092:	2301      	movs	r3, #1
 8010094:	e7f2      	b.n	801007c <_printf_float+0x1a4>
 8010096:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801009a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801009c:	4299      	cmp	r1, r3
 801009e:	db05      	blt.n	80100ac <_printf_float+0x1d4>
 80100a0:	6823      	ldr	r3, [r4, #0]
 80100a2:	6121      	str	r1, [r4, #16]
 80100a4:	07d8      	lsls	r0, r3, #31
 80100a6:	d5ea      	bpl.n	801007e <_printf_float+0x1a6>
 80100a8:	1c4b      	adds	r3, r1, #1
 80100aa:	e7e7      	b.n	801007c <_printf_float+0x1a4>
 80100ac:	2900      	cmp	r1, #0
 80100ae:	bfd4      	ite	le
 80100b0:	f1c1 0202 	rsble	r2, r1, #2
 80100b4:	2201      	movgt	r2, #1
 80100b6:	4413      	add	r3, r2
 80100b8:	e7e0      	b.n	801007c <_printf_float+0x1a4>
 80100ba:	6823      	ldr	r3, [r4, #0]
 80100bc:	055a      	lsls	r2, r3, #21
 80100be:	d407      	bmi.n	80100d0 <_printf_float+0x1f8>
 80100c0:	6923      	ldr	r3, [r4, #16]
 80100c2:	4642      	mov	r2, r8
 80100c4:	4631      	mov	r1, r6
 80100c6:	4628      	mov	r0, r5
 80100c8:	47b8      	blx	r7
 80100ca:	3001      	adds	r0, #1
 80100cc:	d12c      	bne.n	8010128 <_printf_float+0x250>
 80100ce:	e764      	b.n	800ff9a <_printf_float+0xc2>
 80100d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80100d4:	f240 80e0 	bls.w	8010298 <_printf_float+0x3c0>
 80100d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80100dc:	2200      	movs	r2, #0
 80100de:	2300      	movs	r3, #0
 80100e0:	f7f0 fd1c 	bl	8000b1c <__aeabi_dcmpeq>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d034      	beq.n	8010152 <_printf_float+0x27a>
 80100e8:	4a37      	ldr	r2, [pc, #220]	; (80101c8 <_printf_float+0x2f0>)
 80100ea:	2301      	movs	r3, #1
 80100ec:	4631      	mov	r1, r6
 80100ee:	4628      	mov	r0, r5
 80100f0:	47b8      	blx	r7
 80100f2:	3001      	adds	r0, #1
 80100f4:	f43f af51 	beq.w	800ff9a <_printf_float+0xc2>
 80100f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100fc:	429a      	cmp	r2, r3
 80100fe:	db02      	blt.n	8010106 <_printf_float+0x22e>
 8010100:	6823      	ldr	r3, [r4, #0]
 8010102:	07d8      	lsls	r0, r3, #31
 8010104:	d510      	bpl.n	8010128 <_printf_float+0x250>
 8010106:	ee18 3a10 	vmov	r3, s16
 801010a:	4652      	mov	r2, sl
 801010c:	4631      	mov	r1, r6
 801010e:	4628      	mov	r0, r5
 8010110:	47b8      	blx	r7
 8010112:	3001      	adds	r0, #1
 8010114:	f43f af41 	beq.w	800ff9a <_printf_float+0xc2>
 8010118:	f04f 0800 	mov.w	r8, #0
 801011c:	f104 091a 	add.w	r9, r4, #26
 8010120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010122:	3b01      	subs	r3, #1
 8010124:	4543      	cmp	r3, r8
 8010126:	dc09      	bgt.n	801013c <_printf_float+0x264>
 8010128:	6823      	ldr	r3, [r4, #0]
 801012a:	079b      	lsls	r3, r3, #30
 801012c:	f100 8105 	bmi.w	801033a <_printf_float+0x462>
 8010130:	68e0      	ldr	r0, [r4, #12]
 8010132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010134:	4298      	cmp	r0, r3
 8010136:	bfb8      	it	lt
 8010138:	4618      	movlt	r0, r3
 801013a:	e730      	b.n	800ff9e <_printf_float+0xc6>
 801013c:	2301      	movs	r3, #1
 801013e:	464a      	mov	r2, r9
 8010140:	4631      	mov	r1, r6
 8010142:	4628      	mov	r0, r5
 8010144:	47b8      	blx	r7
 8010146:	3001      	adds	r0, #1
 8010148:	f43f af27 	beq.w	800ff9a <_printf_float+0xc2>
 801014c:	f108 0801 	add.w	r8, r8, #1
 8010150:	e7e6      	b.n	8010120 <_printf_float+0x248>
 8010152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010154:	2b00      	cmp	r3, #0
 8010156:	dc39      	bgt.n	80101cc <_printf_float+0x2f4>
 8010158:	4a1b      	ldr	r2, [pc, #108]	; (80101c8 <_printf_float+0x2f0>)
 801015a:	2301      	movs	r3, #1
 801015c:	4631      	mov	r1, r6
 801015e:	4628      	mov	r0, r5
 8010160:	47b8      	blx	r7
 8010162:	3001      	adds	r0, #1
 8010164:	f43f af19 	beq.w	800ff9a <_printf_float+0xc2>
 8010168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801016c:	4313      	orrs	r3, r2
 801016e:	d102      	bne.n	8010176 <_printf_float+0x29e>
 8010170:	6823      	ldr	r3, [r4, #0]
 8010172:	07d9      	lsls	r1, r3, #31
 8010174:	d5d8      	bpl.n	8010128 <_printf_float+0x250>
 8010176:	ee18 3a10 	vmov	r3, s16
 801017a:	4652      	mov	r2, sl
 801017c:	4631      	mov	r1, r6
 801017e:	4628      	mov	r0, r5
 8010180:	47b8      	blx	r7
 8010182:	3001      	adds	r0, #1
 8010184:	f43f af09 	beq.w	800ff9a <_printf_float+0xc2>
 8010188:	f04f 0900 	mov.w	r9, #0
 801018c:	f104 0a1a 	add.w	sl, r4, #26
 8010190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010192:	425b      	negs	r3, r3
 8010194:	454b      	cmp	r3, r9
 8010196:	dc01      	bgt.n	801019c <_printf_float+0x2c4>
 8010198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801019a:	e792      	b.n	80100c2 <_printf_float+0x1ea>
 801019c:	2301      	movs	r3, #1
 801019e:	4652      	mov	r2, sl
 80101a0:	4631      	mov	r1, r6
 80101a2:	4628      	mov	r0, r5
 80101a4:	47b8      	blx	r7
 80101a6:	3001      	adds	r0, #1
 80101a8:	f43f aef7 	beq.w	800ff9a <_printf_float+0xc2>
 80101ac:	f109 0901 	add.w	r9, r9, #1
 80101b0:	e7ee      	b.n	8010190 <_printf_float+0x2b8>
 80101b2:	bf00      	nop
 80101b4:	7fefffff 	.word	0x7fefffff
 80101b8:	08017349 	.word	0x08017349
 80101bc:	0801734d 	.word	0x0801734d
 80101c0:	08017355 	.word	0x08017355
 80101c4:	08017351 	.word	0x08017351
 80101c8:	08017359 	.word	0x08017359
 80101cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80101d0:	429a      	cmp	r2, r3
 80101d2:	bfa8      	it	ge
 80101d4:	461a      	movge	r2, r3
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	4691      	mov	r9, r2
 80101da:	dc37      	bgt.n	801024c <_printf_float+0x374>
 80101dc:	f04f 0b00 	mov.w	fp, #0
 80101e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80101e4:	f104 021a 	add.w	r2, r4, #26
 80101e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80101ea:	9305      	str	r3, [sp, #20]
 80101ec:	eba3 0309 	sub.w	r3, r3, r9
 80101f0:	455b      	cmp	r3, fp
 80101f2:	dc33      	bgt.n	801025c <_printf_float+0x384>
 80101f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101f8:	429a      	cmp	r2, r3
 80101fa:	db3b      	blt.n	8010274 <_printf_float+0x39c>
 80101fc:	6823      	ldr	r3, [r4, #0]
 80101fe:	07da      	lsls	r2, r3, #31
 8010200:	d438      	bmi.n	8010274 <_printf_float+0x39c>
 8010202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010204:	9b05      	ldr	r3, [sp, #20]
 8010206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	eba2 0901 	sub.w	r9, r2, r1
 801020e:	4599      	cmp	r9, r3
 8010210:	bfa8      	it	ge
 8010212:	4699      	movge	r9, r3
 8010214:	f1b9 0f00 	cmp.w	r9, #0
 8010218:	dc35      	bgt.n	8010286 <_printf_float+0x3ae>
 801021a:	f04f 0800 	mov.w	r8, #0
 801021e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010222:	f104 0a1a 	add.w	sl, r4, #26
 8010226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801022a:	1a9b      	subs	r3, r3, r2
 801022c:	eba3 0309 	sub.w	r3, r3, r9
 8010230:	4543      	cmp	r3, r8
 8010232:	f77f af79 	ble.w	8010128 <_printf_float+0x250>
 8010236:	2301      	movs	r3, #1
 8010238:	4652      	mov	r2, sl
 801023a:	4631      	mov	r1, r6
 801023c:	4628      	mov	r0, r5
 801023e:	47b8      	blx	r7
 8010240:	3001      	adds	r0, #1
 8010242:	f43f aeaa 	beq.w	800ff9a <_printf_float+0xc2>
 8010246:	f108 0801 	add.w	r8, r8, #1
 801024a:	e7ec      	b.n	8010226 <_printf_float+0x34e>
 801024c:	4613      	mov	r3, r2
 801024e:	4631      	mov	r1, r6
 8010250:	4642      	mov	r2, r8
 8010252:	4628      	mov	r0, r5
 8010254:	47b8      	blx	r7
 8010256:	3001      	adds	r0, #1
 8010258:	d1c0      	bne.n	80101dc <_printf_float+0x304>
 801025a:	e69e      	b.n	800ff9a <_printf_float+0xc2>
 801025c:	2301      	movs	r3, #1
 801025e:	4631      	mov	r1, r6
 8010260:	4628      	mov	r0, r5
 8010262:	9205      	str	r2, [sp, #20]
 8010264:	47b8      	blx	r7
 8010266:	3001      	adds	r0, #1
 8010268:	f43f ae97 	beq.w	800ff9a <_printf_float+0xc2>
 801026c:	9a05      	ldr	r2, [sp, #20]
 801026e:	f10b 0b01 	add.w	fp, fp, #1
 8010272:	e7b9      	b.n	80101e8 <_printf_float+0x310>
 8010274:	ee18 3a10 	vmov	r3, s16
 8010278:	4652      	mov	r2, sl
 801027a:	4631      	mov	r1, r6
 801027c:	4628      	mov	r0, r5
 801027e:	47b8      	blx	r7
 8010280:	3001      	adds	r0, #1
 8010282:	d1be      	bne.n	8010202 <_printf_float+0x32a>
 8010284:	e689      	b.n	800ff9a <_printf_float+0xc2>
 8010286:	9a05      	ldr	r2, [sp, #20]
 8010288:	464b      	mov	r3, r9
 801028a:	4442      	add	r2, r8
 801028c:	4631      	mov	r1, r6
 801028e:	4628      	mov	r0, r5
 8010290:	47b8      	blx	r7
 8010292:	3001      	adds	r0, #1
 8010294:	d1c1      	bne.n	801021a <_printf_float+0x342>
 8010296:	e680      	b.n	800ff9a <_printf_float+0xc2>
 8010298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801029a:	2a01      	cmp	r2, #1
 801029c:	dc01      	bgt.n	80102a2 <_printf_float+0x3ca>
 801029e:	07db      	lsls	r3, r3, #31
 80102a0:	d538      	bpl.n	8010314 <_printf_float+0x43c>
 80102a2:	2301      	movs	r3, #1
 80102a4:	4642      	mov	r2, r8
 80102a6:	4631      	mov	r1, r6
 80102a8:	4628      	mov	r0, r5
 80102aa:	47b8      	blx	r7
 80102ac:	3001      	adds	r0, #1
 80102ae:	f43f ae74 	beq.w	800ff9a <_printf_float+0xc2>
 80102b2:	ee18 3a10 	vmov	r3, s16
 80102b6:	4652      	mov	r2, sl
 80102b8:	4631      	mov	r1, r6
 80102ba:	4628      	mov	r0, r5
 80102bc:	47b8      	blx	r7
 80102be:	3001      	adds	r0, #1
 80102c0:	f43f ae6b 	beq.w	800ff9a <_printf_float+0xc2>
 80102c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102c8:	2200      	movs	r2, #0
 80102ca:	2300      	movs	r3, #0
 80102cc:	f7f0 fc26 	bl	8000b1c <__aeabi_dcmpeq>
 80102d0:	b9d8      	cbnz	r0, 801030a <_printf_float+0x432>
 80102d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102d4:	f108 0201 	add.w	r2, r8, #1
 80102d8:	3b01      	subs	r3, #1
 80102da:	4631      	mov	r1, r6
 80102dc:	4628      	mov	r0, r5
 80102de:	47b8      	blx	r7
 80102e0:	3001      	adds	r0, #1
 80102e2:	d10e      	bne.n	8010302 <_printf_float+0x42a>
 80102e4:	e659      	b.n	800ff9a <_printf_float+0xc2>
 80102e6:	2301      	movs	r3, #1
 80102e8:	4652      	mov	r2, sl
 80102ea:	4631      	mov	r1, r6
 80102ec:	4628      	mov	r0, r5
 80102ee:	47b8      	blx	r7
 80102f0:	3001      	adds	r0, #1
 80102f2:	f43f ae52 	beq.w	800ff9a <_printf_float+0xc2>
 80102f6:	f108 0801 	add.w	r8, r8, #1
 80102fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102fc:	3b01      	subs	r3, #1
 80102fe:	4543      	cmp	r3, r8
 8010300:	dcf1      	bgt.n	80102e6 <_printf_float+0x40e>
 8010302:	464b      	mov	r3, r9
 8010304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010308:	e6dc      	b.n	80100c4 <_printf_float+0x1ec>
 801030a:	f04f 0800 	mov.w	r8, #0
 801030e:	f104 0a1a 	add.w	sl, r4, #26
 8010312:	e7f2      	b.n	80102fa <_printf_float+0x422>
 8010314:	2301      	movs	r3, #1
 8010316:	4642      	mov	r2, r8
 8010318:	e7df      	b.n	80102da <_printf_float+0x402>
 801031a:	2301      	movs	r3, #1
 801031c:	464a      	mov	r2, r9
 801031e:	4631      	mov	r1, r6
 8010320:	4628      	mov	r0, r5
 8010322:	47b8      	blx	r7
 8010324:	3001      	adds	r0, #1
 8010326:	f43f ae38 	beq.w	800ff9a <_printf_float+0xc2>
 801032a:	f108 0801 	add.w	r8, r8, #1
 801032e:	68e3      	ldr	r3, [r4, #12]
 8010330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010332:	1a5b      	subs	r3, r3, r1
 8010334:	4543      	cmp	r3, r8
 8010336:	dcf0      	bgt.n	801031a <_printf_float+0x442>
 8010338:	e6fa      	b.n	8010130 <_printf_float+0x258>
 801033a:	f04f 0800 	mov.w	r8, #0
 801033e:	f104 0919 	add.w	r9, r4, #25
 8010342:	e7f4      	b.n	801032e <_printf_float+0x456>

08010344 <_printf_common>:
 8010344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010348:	4616      	mov	r6, r2
 801034a:	4699      	mov	r9, r3
 801034c:	688a      	ldr	r2, [r1, #8]
 801034e:	690b      	ldr	r3, [r1, #16]
 8010350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010354:	4293      	cmp	r3, r2
 8010356:	bfb8      	it	lt
 8010358:	4613      	movlt	r3, r2
 801035a:	6033      	str	r3, [r6, #0]
 801035c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010360:	4607      	mov	r7, r0
 8010362:	460c      	mov	r4, r1
 8010364:	b10a      	cbz	r2, 801036a <_printf_common+0x26>
 8010366:	3301      	adds	r3, #1
 8010368:	6033      	str	r3, [r6, #0]
 801036a:	6823      	ldr	r3, [r4, #0]
 801036c:	0699      	lsls	r1, r3, #26
 801036e:	bf42      	ittt	mi
 8010370:	6833      	ldrmi	r3, [r6, #0]
 8010372:	3302      	addmi	r3, #2
 8010374:	6033      	strmi	r3, [r6, #0]
 8010376:	6825      	ldr	r5, [r4, #0]
 8010378:	f015 0506 	ands.w	r5, r5, #6
 801037c:	d106      	bne.n	801038c <_printf_common+0x48>
 801037e:	f104 0a19 	add.w	sl, r4, #25
 8010382:	68e3      	ldr	r3, [r4, #12]
 8010384:	6832      	ldr	r2, [r6, #0]
 8010386:	1a9b      	subs	r3, r3, r2
 8010388:	42ab      	cmp	r3, r5
 801038a:	dc26      	bgt.n	80103da <_printf_common+0x96>
 801038c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010390:	1e13      	subs	r3, r2, #0
 8010392:	6822      	ldr	r2, [r4, #0]
 8010394:	bf18      	it	ne
 8010396:	2301      	movne	r3, #1
 8010398:	0692      	lsls	r2, r2, #26
 801039a:	d42b      	bmi.n	80103f4 <_printf_common+0xb0>
 801039c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80103a0:	4649      	mov	r1, r9
 80103a2:	4638      	mov	r0, r7
 80103a4:	47c0      	blx	r8
 80103a6:	3001      	adds	r0, #1
 80103a8:	d01e      	beq.n	80103e8 <_printf_common+0xa4>
 80103aa:	6823      	ldr	r3, [r4, #0]
 80103ac:	68e5      	ldr	r5, [r4, #12]
 80103ae:	6832      	ldr	r2, [r6, #0]
 80103b0:	f003 0306 	and.w	r3, r3, #6
 80103b4:	2b04      	cmp	r3, #4
 80103b6:	bf08      	it	eq
 80103b8:	1aad      	subeq	r5, r5, r2
 80103ba:	68a3      	ldr	r3, [r4, #8]
 80103bc:	6922      	ldr	r2, [r4, #16]
 80103be:	bf0c      	ite	eq
 80103c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103c4:	2500      	movne	r5, #0
 80103c6:	4293      	cmp	r3, r2
 80103c8:	bfc4      	itt	gt
 80103ca:	1a9b      	subgt	r3, r3, r2
 80103cc:	18ed      	addgt	r5, r5, r3
 80103ce:	2600      	movs	r6, #0
 80103d0:	341a      	adds	r4, #26
 80103d2:	42b5      	cmp	r5, r6
 80103d4:	d11a      	bne.n	801040c <_printf_common+0xc8>
 80103d6:	2000      	movs	r0, #0
 80103d8:	e008      	b.n	80103ec <_printf_common+0xa8>
 80103da:	2301      	movs	r3, #1
 80103dc:	4652      	mov	r2, sl
 80103de:	4649      	mov	r1, r9
 80103e0:	4638      	mov	r0, r7
 80103e2:	47c0      	blx	r8
 80103e4:	3001      	adds	r0, #1
 80103e6:	d103      	bne.n	80103f0 <_printf_common+0xac>
 80103e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103f0:	3501      	adds	r5, #1
 80103f2:	e7c6      	b.n	8010382 <_printf_common+0x3e>
 80103f4:	18e1      	adds	r1, r4, r3
 80103f6:	1c5a      	adds	r2, r3, #1
 80103f8:	2030      	movs	r0, #48	; 0x30
 80103fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103fe:	4422      	add	r2, r4
 8010400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010408:	3302      	adds	r3, #2
 801040a:	e7c7      	b.n	801039c <_printf_common+0x58>
 801040c:	2301      	movs	r3, #1
 801040e:	4622      	mov	r2, r4
 8010410:	4649      	mov	r1, r9
 8010412:	4638      	mov	r0, r7
 8010414:	47c0      	blx	r8
 8010416:	3001      	adds	r0, #1
 8010418:	d0e6      	beq.n	80103e8 <_printf_common+0xa4>
 801041a:	3601      	adds	r6, #1
 801041c:	e7d9      	b.n	80103d2 <_printf_common+0x8e>
	...

08010420 <_printf_i>:
 8010420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010424:	460c      	mov	r4, r1
 8010426:	4691      	mov	r9, r2
 8010428:	7e27      	ldrb	r7, [r4, #24]
 801042a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801042c:	2f78      	cmp	r7, #120	; 0x78
 801042e:	4680      	mov	r8, r0
 8010430:	469a      	mov	sl, r3
 8010432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010436:	d807      	bhi.n	8010448 <_printf_i+0x28>
 8010438:	2f62      	cmp	r7, #98	; 0x62
 801043a:	d80a      	bhi.n	8010452 <_printf_i+0x32>
 801043c:	2f00      	cmp	r7, #0
 801043e:	f000 80d8 	beq.w	80105f2 <_printf_i+0x1d2>
 8010442:	2f58      	cmp	r7, #88	; 0x58
 8010444:	f000 80a3 	beq.w	801058e <_printf_i+0x16e>
 8010448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801044c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010450:	e03a      	b.n	80104c8 <_printf_i+0xa8>
 8010452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010456:	2b15      	cmp	r3, #21
 8010458:	d8f6      	bhi.n	8010448 <_printf_i+0x28>
 801045a:	a001      	add	r0, pc, #4	; (adr r0, 8010460 <_printf_i+0x40>)
 801045c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010460:	080104b9 	.word	0x080104b9
 8010464:	080104cd 	.word	0x080104cd
 8010468:	08010449 	.word	0x08010449
 801046c:	08010449 	.word	0x08010449
 8010470:	08010449 	.word	0x08010449
 8010474:	08010449 	.word	0x08010449
 8010478:	080104cd 	.word	0x080104cd
 801047c:	08010449 	.word	0x08010449
 8010480:	08010449 	.word	0x08010449
 8010484:	08010449 	.word	0x08010449
 8010488:	08010449 	.word	0x08010449
 801048c:	080105d9 	.word	0x080105d9
 8010490:	080104fd 	.word	0x080104fd
 8010494:	080105bb 	.word	0x080105bb
 8010498:	08010449 	.word	0x08010449
 801049c:	08010449 	.word	0x08010449
 80104a0:	080105fb 	.word	0x080105fb
 80104a4:	08010449 	.word	0x08010449
 80104a8:	080104fd 	.word	0x080104fd
 80104ac:	08010449 	.word	0x08010449
 80104b0:	08010449 	.word	0x08010449
 80104b4:	080105c3 	.word	0x080105c3
 80104b8:	680b      	ldr	r3, [r1, #0]
 80104ba:	1d1a      	adds	r2, r3, #4
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	600a      	str	r2, [r1, #0]
 80104c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80104c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104c8:	2301      	movs	r3, #1
 80104ca:	e0a3      	b.n	8010614 <_printf_i+0x1f4>
 80104cc:	6825      	ldr	r5, [r4, #0]
 80104ce:	6808      	ldr	r0, [r1, #0]
 80104d0:	062e      	lsls	r6, r5, #24
 80104d2:	f100 0304 	add.w	r3, r0, #4
 80104d6:	d50a      	bpl.n	80104ee <_printf_i+0xce>
 80104d8:	6805      	ldr	r5, [r0, #0]
 80104da:	600b      	str	r3, [r1, #0]
 80104dc:	2d00      	cmp	r5, #0
 80104de:	da03      	bge.n	80104e8 <_printf_i+0xc8>
 80104e0:	232d      	movs	r3, #45	; 0x2d
 80104e2:	426d      	negs	r5, r5
 80104e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104e8:	485e      	ldr	r0, [pc, #376]	; (8010664 <_printf_i+0x244>)
 80104ea:	230a      	movs	r3, #10
 80104ec:	e019      	b.n	8010522 <_printf_i+0x102>
 80104ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80104f2:	6805      	ldr	r5, [r0, #0]
 80104f4:	600b      	str	r3, [r1, #0]
 80104f6:	bf18      	it	ne
 80104f8:	b22d      	sxthne	r5, r5
 80104fa:	e7ef      	b.n	80104dc <_printf_i+0xbc>
 80104fc:	680b      	ldr	r3, [r1, #0]
 80104fe:	6825      	ldr	r5, [r4, #0]
 8010500:	1d18      	adds	r0, r3, #4
 8010502:	6008      	str	r0, [r1, #0]
 8010504:	0628      	lsls	r0, r5, #24
 8010506:	d501      	bpl.n	801050c <_printf_i+0xec>
 8010508:	681d      	ldr	r5, [r3, #0]
 801050a:	e002      	b.n	8010512 <_printf_i+0xf2>
 801050c:	0669      	lsls	r1, r5, #25
 801050e:	d5fb      	bpl.n	8010508 <_printf_i+0xe8>
 8010510:	881d      	ldrh	r5, [r3, #0]
 8010512:	4854      	ldr	r0, [pc, #336]	; (8010664 <_printf_i+0x244>)
 8010514:	2f6f      	cmp	r7, #111	; 0x6f
 8010516:	bf0c      	ite	eq
 8010518:	2308      	moveq	r3, #8
 801051a:	230a      	movne	r3, #10
 801051c:	2100      	movs	r1, #0
 801051e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010522:	6866      	ldr	r6, [r4, #4]
 8010524:	60a6      	str	r6, [r4, #8]
 8010526:	2e00      	cmp	r6, #0
 8010528:	bfa2      	ittt	ge
 801052a:	6821      	ldrge	r1, [r4, #0]
 801052c:	f021 0104 	bicge.w	r1, r1, #4
 8010530:	6021      	strge	r1, [r4, #0]
 8010532:	b90d      	cbnz	r5, 8010538 <_printf_i+0x118>
 8010534:	2e00      	cmp	r6, #0
 8010536:	d04d      	beq.n	80105d4 <_printf_i+0x1b4>
 8010538:	4616      	mov	r6, r2
 801053a:	fbb5 f1f3 	udiv	r1, r5, r3
 801053e:	fb03 5711 	mls	r7, r3, r1, r5
 8010542:	5dc7      	ldrb	r7, [r0, r7]
 8010544:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010548:	462f      	mov	r7, r5
 801054a:	42bb      	cmp	r3, r7
 801054c:	460d      	mov	r5, r1
 801054e:	d9f4      	bls.n	801053a <_printf_i+0x11a>
 8010550:	2b08      	cmp	r3, #8
 8010552:	d10b      	bne.n	801056c <_printf_i+0x14c>
 8010554:	6823      	ldr	r3, [r4, #0]
 8010556:	07df      	lsls	r7, r3, #31
 8010558:	d508      	bpl.n	801056c <_printf_i+0x14c>
 801055a:	6923      	ldr	r3, [r4, #16]
 801055c:	6861      	ldr	r1, [r4, #4]
 801055e:	4299      	cmp	r1, r3
 8010560:	bfde      	ittt	le
 8010562:	2330      	movle	r3, #48	; 0x30
 8010564:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010568:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801056c:	1b92      	subs	r2, r2, r6
 801056e:	6122      	str	r2, [r4, #16]
 8010570:	f8cd a000 	str.w	sl, [sp]
 8010574:	464b      	mov	r3, r9
 8010576:	aa03      	add	r2, sp, #12
 8010578:	4621      	mov	r1, r4
 801057a:	4640      	mov	r0, r8
 801057c:	f7ff fee2 	bl	8010344 <_printf_common>
 8010580:	3001      	adds	r0, #1
 8010582:	d14c      	bne.n	801061e <_printf_i+0x1fe>
 8010584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010588:	b004      	add	sp, #16
 801058a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801058e:	4835      	ldr	r0, [pc, #212]	; (8010664 <_printf_i+0x244>)
 8010590:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010594:	6823      	ldr	r3, [r4, #0]
 8010596:	680e      	ldr	r6, [r1, #0]
 8010598:	061f      	lsls	r7, r3, #24
 801059a:	f856 5b04 	ldr.w	r5, [r6], #4
 801059e:	600e      	str	r6, [r1, #0]
 80105a0:	d514      	bpl.n	80105cc <_printf_i+0x1ac>
 80105a2:	07d9      	lsls	r1, r3, #31
 80105a4:	bf44      	itt	mi
 80105a6:	f043 0320 	orrmi.w	r3, r3, #32
 80105aa:	6023      	strmi	r3, [r4, #0]
 80105ac:	b91d      	cbnz	r5, 80105b6 <_printf_i+0x196>
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	f023 0320 	bic.w	r3, r3, #32
 80105b4:	6023      	str	r3, [r4, #0]
 80105b6:	2310      	movs	r3, #16
 80105b8:	e7b0      	b.n	801051c <_printf_i+0xfc>
 80105ba:	6823      	ldr	r3, [r4, #0]
 80105bc:	f043 0320 	orr.w	r3, r3, #32
 80105c0:	6023      	str	r3, [r4, #0]
 80105c2:	2378      	movs	r3, #120	; 0x78
 80105c4:	4828      	ldr	r0, [pc, #160]	; (8010668 <_printf_i+0x248>)
 80105c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105ca:	e7e3      	b.n	8010594 <_printf_i+0x174>
 80105cc:	065e      	lsls	r6, r3, #25
 80105ce:	bf48      	it	mi
 80105d0:	b2ad      	uxthmi	r5, r5
 80105d2:	e7e6      	b.n	80105a2 <_printf_i+0x182>
 80105d4:	4616      	mov	r6, r2
 80105d6:	e7bb      	b.n	8010550 <_printf_i+0x130>
 80105d8:	680b      	ldr	r3, [r1, #0]
 80105da:	6826      	ldr	r6, [r4, #0]
 80105dc:	6960      	ldr	r0, [r4, #20]
 80105de:	1d1d      	adds	r5, r3, #4
 80105e0:	600d      	str	r5, [r1, #0]
 80105e2:	0635      	lsls	r5, r6, #24
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	d501      	bpl.n	80105ec <_printf_i+0x1cc>
 80105e8:	6018      	str	r0, [r3, #0]
 80105ea:	e002      	b.n	80105f2 <_printf_i+0x1d2>
 80105ec:	0671      	lsls	r1, r6, #25
 80105ee:	d5fb      	bpl.n	80105e8 <_printf_i+0x1c8>
 80105f0:	8018      	strh	r0, [r3, #0]
 80105f2:	2300      	movs	r3, #0
 80105f4:	6123      	str	r3, [r4, #16]
 80105f6:	4616      	mov	r6, r2
 80105f8:	e7ba      	b.n	8010570 <_printf_i+0x150>
 80105fa:	680b      	ldr	r3, [r1, #0]
 80105fc:	1d1a      	adds	r2, r3, #4
 80105fe:	600a      	str	r2, [r1, #0]
 8010600:	681e      	ldr	r6, [r3, #0]
 8010602:	6862      	ldr	r2, [r4, #4]
 8010604:	2100      	movs	r1, #0
 8010606:	4630      	mov	r0, r6
 8010608:	f7ef fe02 	bl	8000210 <memchr>
 801060c:	b108      	cbz	r0, 8010612 <_printf_i+0x1f2>
 801060e:	1b80      	subs	r0, r0, r6
 8010610:	6060      	str	r0, [r4, #4]
 8010612:	6863      	ldr	r3, [r4, #4]
 8010614:	6123      	str	r3, [r4, #16]
 8010616:	2300      	movs	r3, #0
 8010618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801061c:	e7a8      	b.n	8010570 <_printf_i+0x150>
 801061e:	6923      	ldr	r3, [r4, #16]
 8010620:	4632      	mov	r2, r6
 8010622:	4649      	mov	r1, r9
 8010624:	4640      	mov	r0, r8
 8010626:	47d0      	blx	sl
 8010628:	3001      	adds	r0, #1
 801062a:	d0ab      	beq.n	8010584 <_printf_i+0x164>
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	079b      	lsls	r3, r3, #30
 8010630:	d413      	bmi.n	801065a <_printf_i+0x23a>
 8010632:	68e0      	ldr	r0, [r4, #12]
 8010634:	9b03      	ldr	r3, [sp, #12]
 8010636:	4298      	cmp	r0, r3
 8010638:	bfb8      	it	lt
 801063a:	4618      	movlt	r0, r3
 801063c:	e7a4      	b.n	8010588 <_printf_i+0x168>
 801063e:	2301      	movs	r3, #1
 8010640:	4632      	mov	r2, r6
 8010642:	4649      	mov	r1, r9
 8010644:	4640      	mov	r0, r8
 8010646:	47d0      	blx	sl
 8010648:	3001      	adds	r0, #1
 801064a:	d09b      	beq.n	8010584 <_printf_i+0x164>
 801064c:	3501      	adds	r5, #1
 801064e:	68e3      	ldr	r3, [r4, #12]
 8010650:	9903      	ldr	r1, [sp, #12]
 8010652:	1a5b      	subs	r3, r3, r1
 8010654:	42ab      	cmp	r3, r5
 8010656:	dcf2      	bgt.n	801063e <_printf_i+0x21e>
 8010658:	e7eb      	b.n	8010632 <_printf_i+0x212>
 801065a:	2500      	movs	r5, #0
 801065c:	f104 0619 	add.w	r6, r4, #25
 8010660:	e7f5      	b.n	801064e <_printf_i+0x22e>
 8010662:	bf00      	nop
 8010664:	0801735b 	.word	0x0801735b
 8010668:	0801736c 	.word	0x0801736c

0801066c <_sbrk_r>:
 801066c:	b538      	push	{r3, r4, r5, lr}
 801066e:	4d06      	ldr	r5, [pc, #24]	; (8010688 <_sbrk_r+0x1c>)
 8010670:	2300      	movs	r3, #0
 8010672:	4604      	mov	r4, r0
 8010674:	4608      	mov	r0, r1
 8010676:	602b      	str	r3, [r5, #0]
 8010678:	f7f1 fd70 	bl	800215c <_sbrk>
 801067c:	1c43      	adds	r3, r0, #1
 801067e:	d102      	bne.n	8010686 <_sbrk_r+0x1a>
 8010680:	682b      	ldr	r3, [r5, #0]
 8010682:	b103      	cbz	r3, 8010686 <_sbrk_r+0x1a>
 8010684:	6023      	str	r3, [r4, #0]
 8010686:	bd38      	pop	{r3, r4, r5, pc}
 8010688:	2003ee80 	.word	0x2003ee80

0801068c <_raise_r>:
 801068c:	291f      	cmp	r1, #31
 801068e:	b538      	push	{r3, r4, r5, lr}
 8010690:	4604      	mov	r4, r0
 8010692:	460d      	mov	r5, r1
 8010694:	d904      	bls.n	80106a0 <_raise_r+0x14>
 8010696:	2316      	movs	r3, #22
 8010698:	6003      	str	r3, [r0, #0]
 801069a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801069e:	bd38      	pop	{r3, r4, r5, pc}
 80106a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106a2:	b112      	cbz	r2, 80106aa <_raise_r+0x1e>
 80106a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106a8:	b94b      	cbnz	r3, 80106be <_raise_r+0x32>
 80106aa:	4620      	mov	r0, r4
 80106ac:	f000 f830 	bl	8010710 <_getpid_r>
 80106b0:	462a      	mov	r2, r5
 80106b2:	4601      	mov	r1, r0
 80106b4:	4620      	mov	r0, r4
 80106b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106ba:	f000 b817 	b.w	80106ec <_kill_r>
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d00a      	beq.n	80106d8 <_raise_r+0x4c>
 80106c2:	1c59      	adds	r1, r3, #1
 80106c4:	d103      	bne.n	80106ce <_raise_r+0x42>
 80106c6:	2316      	movs	r3, #22
 80106c8:	6003      	str	r3, [r0, #0]
 80106ca:	2001      	movs	r0, #1
 80106cc:	e7e7      	b.n	801069e <_raise_r+0x12>
 80106ce:	2400      	movs	r4, #0
 80106d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106d4:	4628      	mov	r0, r5
 80106d6:	4798      	blx	r3
 80106d8:	2000      	movs	r0, #0
 80106da:	e7e0      	b.n	801069e <_raise_r+0x12>

080106dc <raise>:
 80106dc:	4b02      	ldr	r3, [pc, #8]	; (80106e8 <raise+0xc>)
 80106de:	4601      	mov	r1, r0
 80106e0:	6818      	ldr	r0, [r3, #0]
 80106e2:	f7ff bfd3 	b.w	801068c <_raise_r>
 80106e6:	bf00      	nop
 80106e8:	200321d8 	.word	0x200321d8

080106ec <_kill_r>:
 80106ec:	b538      	push	{r3, r4, r5, lr}
 80106ee:	4d07      	ldr	r5, [pc, #28]	; (801070c <_kill_r+0x20>)
 80106f0:	2300      	movs	r3, #0
 80106f2:	4604      	mov	r4, r0
 80106f4:	4608      	mov	r0, r1
 80106f6:	4611      	mov	r1, r2
 80106f8:	602b      	str	r3, [r5, #0]
 80106fa:	f7f1 fca7 	bl	800204c <_kill>
 80106fe:	1c43      	adds	r3, r0, #1
 8010700:	d102      	bne.n	8010708 <_kill_r+0x1c>
 8010702:	682b      	ldr	r3, [r5, #0]
 8010704:	b103      	cbz	r3, 8010708 <_kill_r+0x1c>
 8010706:	6023      	str	r3, [r4, #0]
 8010708:	bd38      	pop	{r3, r4, r5, pc}
 801070a:	bf00      	nop
 801070c:	2003ee80 	.word	0x2003ee80

08010710 <_getpid_r>:
 8010710:	f7f1 bc94 	b.w	800203c <_getpid>

08010714 <siprintf>:
 8010714:	b40e      	push	{r1, r2, r3}
 8010716:	b500      	push	{lr}
 8010718:	b09c      	sub	sp, #112	; 0x70
 801071a:	ab1d      	add	r3, sp, #116	; 0x74
 801071c:	9002      	str	r0, [sp, #8]
 801071e:	9006      	str	r0, [sp, #24]
 8010720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010724:	4809      	ldr	r0, [pc, #36]	; (801074c <siprintf+0x38>)
 8010726:	9107      	str	r1, [sp, #28]
 8010728:	9104      	str	r1, [sp, #16]
 801072a:	4909      	ldr	r1, [pc, #36]	; (8010750 <siprintf+0x3c>)
 801072c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010730:	9105      	str	r1, [sp, #20]
 8010732:	6800      	ldr	r0, [r0, #0]
 8010734:	9301      	str	r3, [sp, #4]
 8010736:	a902      	add	r1, sp, #8
 8010738:	f001 fdf8 	bl	801232c <_svfiprintf_r>
 801073c:	9b02      	ldr	r3, [sp, #8]
 801073e:	2200      	movs	r2, #0
 8010740:	701a      	strb	r2, [r3, #0]
 8010742:	b01c      	add	sp, #112	; 0x70
 8010744:	f85d eb04 	ldr.w	lr, [sp], #4
 8010748:	b003      	add	sp, #12
 801074a:	4770      	bx	lr
 801074c:	200321d8 	.word	0x200321d8
 8010750:	ffff0208 	.word	0xffff0208

08010754 <strncmp>:
 8010754:	b510      	push	{r4, lr}
 8010756:	b16a      	cbz	r2, 8010774 <strncmp+0x20>
 8010758:	3901      	subs	r1, #1
 801075a:	1884      	adds	r4, r0, r2
 801075c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010760:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010764:	4293      	cmp	r3, r2
 8010766:	d103      	bne.n	8010770 <strncmp+0x1c>
 8010768:	42a0      	cmp	r0, r4
 801076a:	d001      	beq.n	8010770 <strncmp+0x1c>
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1f5      	bne.n	801075c <strncmp+0x8>
 8010770:	1a98      	subs	r0, r3, r2
 8010772:	bd10      	pop	{r4, pc}
 8010774:	4610      	mov	r0, r2
 8010776:	e7fc      	b.n	8010772 <strncmp+0x1e>

08010778 <__swbuf_r>:
 8010778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801077a:	460e      	mov	r6, r1
 801077c:	4614      	mov	r4, r2
 801077e:	4605      	mov	r5, r0
 8010780:	b118      	cbz	r0, 801078a <__swbuf_r+0x12>
 8010782:	6983      	ldr	r3, [r0, #24]
 8010784:	b90b      	cbnz	r3, 801078a <__swbuf_r+0x12>
 8010786:	f001 f8ad 	bl	80118e4 <__sinit>
 801078a:	4b21      	ldr	r3, [pc, #132]	; (8010810 <__swbuf_r+0x98>)
 801078c:	429c      	cmp	r4, r3
 801078e:	d12b      	bne.n	80107e8 <__swbuf_r+0x70>
 8010790:	686c      	ldr	r4, [r5, #4]
 8010792:	69a3      	ldr	r3, [r4, #24]
 8010794:	60a3      	str	r3, [r4, #8]
 8010796:	89a3      	ldrh	r3, [r4, #12]
 8010798:	071a      	lsls	r2, r3, #28
 801079a:	d52f      	bpl.n	80107fc <__swbuf_r+0x84>
 801079c:	6923      	ldr	r3, [r4, #16]
 801079e:	b36b      	cbz	r3, 80107fc <__swbuf_r+0x84>
 80107a0:	6923      	ldr	r3, [r4, #16]
 80107a2:	6820      	ldr	r0, [r4, #0]
 80107a4:	1ac0      	subs	r0, r0, r3
 80107a6:	6963      	ldr	r3, [r4, #20]
 80107a8:	b2f6      	uxtb	r6, r6
 80107aa:	4283      	cmp	r3, r0
 80107ac:	4637      	mov	r7, r6
 80107ae:	dc04      	bgt.n	80107ba <__swbuf_r+0x42>
 80107b0:	4621      	mov	r1, r4
 80107b2:	4628      	mov	r0, r5
 80107b4:	f001 f802 	bl	80117bc <_fflush_r>
 80107b8:	bb30      	cbnz	r0, 8010808 <__swbuf_r+0x90>
 80107ba:	68a3      	ldr	r3, [r4, #8]
 80107bc:	3b01      	subs	r3, #1
 80107be:	60a3      	str	r3, [r4, #8]
 80107c0:	6823      	ldr	r3, [r4, #0]
 80107c2:	1c5a      	adds	r2, r3, #1
 80107c4:	6022      	str	r2, [r4, #0]
 80107c6:	701e      	strb	r6, [r3, #0]
 80107c8:	6963      	ldr	r3, [r4, #20]
 80107ca:	3001      	adds	r0, #1
 80107cc:	4283      	cmp	r3, r0
 80107ce:	d004      	beq.n	80107da <__swbuf_r+0x62>
 80107d0:	89a3      	ldrh	r3, [r4, #12]
 80107d2:	07db      	lsls	r3, r3, #31
 80107d4:	d506      	bpl.n	80107e4 <__swbuf_r+0x6c>
 80107d6:	2e0a      	cmp	r6, #10
 80107d8:	d104      	bne.n	80107e4 <__swbuf_r+0x6c>
 80107da:	4621      	mov	r1, r4
 80107dc:	4628      	mov	r0, r5
 80107de:	f000 ffed 	bl	80117bc <_fflush_r>
 80107e2:	b988      	cbnz	r0, 8010808 <__swbuf_r+0x90>
 80107e4:	4638      	mov	r0, r7
 80107e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107e8:	4b0a      	ldr	r3, [pc, #40]	; (8010814 <__swbuf_r+0x9c>)
 80107ea:	429c      	cmp	r4, r3
 80107ec:	d101      	bne.n	80107f2 <__swbuf_r+0x7a>
 80107ee:	68ac      	ldr	r4, [r5, #8]
 80107f0:	e7cf      	b.n	8010792 <__swbuf_r+0x1a>
 80107f2:	4b09      	ldr	r3, [pc, #36]	; (8010818 <__swbuf_r+0xa0>)
 80107f4:	429c      	cmp	r4, r3
 80107f6:	bf08      	it	eq
 80107f8:	68ec      	ldreq	r4, [r5, #12]
 80107fa:	e7ca      	b.n	8010792 <__swbuf_r+0x1a>
 80107fc:	4621      	mov	r1, r4
 80107fe:	4628      	mov	r0, r5
 8010800:	f000 f80c 	bl	801081c <__swsetup_r>
 8010804:	2800      	cmp	r0, #0
 8010806:	d0cb      	beq.n	80107a0 <__swbuf_r+0x28>
 8010808:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801080c:	e7ea      	b.n	80107e4 <__swbuf_r+0x6c>
 801080e:	bf00      	nop
 8010810:	08017534 	.word	0x08017534
 8010814:	08017554 	.word	0x08017554
 8010818:	08017514 	.word	0x08017514

0801081c <__swsetup_r>:
 801081c:	4b32      	ldr	r3, [pc, #200]	; (80108e8 <__swsetup_r+0xcc>)
 801081e:	b570      	push	{r4, r5, r6, lr}
 8010820:	681d      	ldr	r5, [r3, #0]
 8010822:	4606      	mov	r6, r0
 8010824:	460c      	mov	r4, r1
 8010826:	b125      	cbz	r5, 8010832 <__swsetup_r+0x16>
 8010828:	69ab      	ldr	r3, [r5, #24]
 801082a:	b913      	cbnz	r3, 8010832 <__swsetup_r+0x16>
 801082c:	4628      	mov	r0, r5
 801082e:	f001 f859 	bl	80118e4 <__sinit>
 8010832:	4b2e      	ldr	r3, [pc, #184]	; (80108ec <__swsetup_r+0xd0>)
 8010834:	429c      	cmp	r4, r3
 8010836:	d10f      	bne.n	8010858 <__swsetup_r+0x3c>
 8010838:	686c      	ldr	r4, [r5, #4]
 801083a:	89a3      	ldrh	r3, [r4, #12]
 801083c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010840:	0719      	lsls	r1, r3, #28
 8010842:	d42c      	bmi.n	801089e <__swsetup_r+0x82>
 8010844:	06dd      	lsls	r5, r3, #27
 8010846:	d411      	bmi.n	801086c <__swsetup_r+0x50>
 8010848:	2309      	movs	r3, #9
 801084a:	6033      	str	r3, [r6, #0]
 801084c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010850:	81a3      	strh	r3, [r4, #12]
 8010852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010856:	e03e      	b.n	80108d6 <__swsetup_r+0xba>
 8010858:	4b25      	ldr	r3, [pc, #148]	; (80108f0 <__swsetup_r+0xd4>)
 801085a:	429c      	cmp	r4, r3
 801085c:	d101      	bne.n	8010862 <__swsetup_r+0x46>
 801085e:	68ac      	ldr	r4, [r5, #8]
 8010860:	e7eb      	b.n	801083a <__swsetup_r+0x1e>
 8010862:	4b24      	ldr	r3, [pc, #144]	; (80108f4 <__swsetup_r+0xd8>)
 8010864:	429c      	cmp	r4, r3
 8010866:	bf08      	it	eq
 8010868:	68ec      	ldreq	r4, [r5, #12]
 801086a:	e7e6      	b.n	801083a <__swsetup_r+0x1e>
 801086c:	0758      	lsls	r0, r3, #29
 801086e:	d512      	bpl.n	8010896 <__swsetup_r+0x7a>
 8010870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010872:	b141      	cbz	r1, 8010886 <__swsetup_r+0x6a>
 8010874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010878:	4299      	cmp	r1, r3
 801087a:	d002      	beq.n	8010882 <__swsetup_r+0x66>
 801087c:	4630      	mov	r0, r6
 801087e:	f7ff f887 	bl	800f990 <_free_r>
 8010882:	2300      	movs	r3, #0
 8010884:	6363      	str	r3, [r4, #52]	; 0x34
 8010886:	89a3      	ldrh	r3, [r4, #12]
 8010888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801088c:	81a3      	strh	r3, [r4, #12]
 801088e:	2300      	movs	r3, #0
 8010890:	6063      	str	r3, [r4, #4]
 8010892:	6923      	ldr	r3, [r4, #16]
 8010894:	6023      	str	r3, [r4, #0]
 8010896:	89a3      	ldrh	r3, [r4, #12]
 8010898:	f043 0308 	orr.w	r3, r3, #8
 801089c:	81a3      	strh	r3, [r4, #12]
 801089e:	6923      	ldr	r3, [r4, #16]
 80108a0:	b94b      	cbnz	r3, 80108b6 <__swsetup_r+0x9a>
 80108a2:	89a3      	ldrh	r3, [r4, #12]
 80108a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80108a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108ac:	d003      	beq.n	80108b6 <__swsetup_r+0x9a>
 80108ae:	4621      	mov	r1, r4
 80108b0:	4630      	mov	r0, r6
 80108b2:	f001 f8e1 	bl	8011a78 <__smakebuf_r>
 80108b6:	89a0      	ldrh	r0, [r4, #12]
 80108b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108bc:	f010 0301 	ands.w	r3, r0, #1
 80108c0:	d00a      	beq.n	80108d8 <__swsetup_r+0xbc>
 80108c2:	2300      	movs	r3, #0
 80108c4:	60a3      	str	r3, [r4, #8]
 80108c6:	6963      	ldr	r3, [r4, #20]
 80108c8:	425b      	negs	r3, r3
 80108ca:	61a3      	str	r3, [r4, #24]
 80108cc:	6923      	ldr	r3, [r4, #16]
 80108ce:	b943      	cbnz	r3, 80108e2 <__swsetup_r+0xc6>
 80108d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80108d4:	d1ba      	bne.n	801084c <__swsetup_r+0x30>
 80108d6:	bd70      	pop	{r4, r5, r6, pc}
 80108d8:	0781      	lsls	r1, r0, #30
 80108da:	bf58      	it	pl
 80108dc:	6963      	ldrpl	r3, [r4, #20]
 80108de:	60a3      	str	r3, [r4, #8]
 80108e0:	e7f4      	b.n	80108cc <__swsetup_r+0xb0>
 80108e2:	2000      	movs	r0, #0
 80108e4:	e7f7      	b.n	80108d6 <__swsetup_r+0xba>
 80108e6:	bf00      	nop
 80108e8:	200321d8 	.word	0x200321d8
 80108ec:	08017534 	.word	0x08017534
 80108f0:	08017554 	.word	0x08017554
 80108f4:	08017514 	.word	0x08017514

080108f8 <__register_exitproc>:
 80108f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80109b8 <__register_exitproc+0xc0>
 8010900:	4606      	mov	r6, r0
 8010902:	f8d8 0000 	ldr.w	r0, [r8]
 8010906:	461f      	mov	r7, r3
 8010908:	460d      	mov	r5, r1
 801090a:	4691      	mov	r9, r2
 801090c:	f001 f88d 	bl	8011a2a <__retarget_lock_acquire_recursive>
 8010910:	4b25      	ldr	r3, [pc, #148]	; (80109a8 <__register_exitproc+0xb0>)
 8010912:	681c      	ldr	r4, [r3, #0]
 8010914:	b934      	cbnz	r4, 8010924 <__register_exitproc+0x2c>
 8010916:	4c25      	ldr	r4, [pc, #148]	; (80109ac <__register_exitproc+0xb4>)
 8010918:	601c      	str	r4, [r3, #0]
 801091a:	4b25      	ldr	r3, [pc, #148]	; (80109b0 <__register_exitproc+0xb8>)
 801091c:	b113      	cbz	r3, 8010924 <__register_exitproc+0x2c>
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8010924:	6863      	ldr	r3, [r4, #4]
 8010926:	2b1f      	cmp	r3, #31
 8010928:	dd07      	ble.n	801093a <__register_exitproc+0x42>
 801092a:	f8d8 0000 	ldr.w	r0, [r8]
 801092e:	f001 f87e 	bl	8011a2e <__retarget_lock_release_recursive>
 8010932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801093a:	b34e      	cbz	r6, 8010990 <__register_exitproc+0x98>
 801093c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8010940:	b988      	cbnz	r0, 8010966 <__register_exitproc+0x6e>
 8010942:	4b1c      	ldr	r3, [pc, #112]	; (80109b4 <__register_exitproc+0xbc>)
 8010944:	b923      	cbnz	r3, 8010950 <__register_exitproc+0x58>
 8010946:	f8d8 0000 	ldr.w	r0, [r8]
 801094a:	f001 f86f 	bl	8011a2c <__retarget_lock_release>
 801094e:	e7f0      	b.n	8010932 <__register_exitproc+0x3a>
 8010950:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010954:	f7fe ffdc 	bl	800f910 <malloc>
 8010958:	2800      	cmp	r0, #0
 801095a:	d0f4      	beq.n	8010946 <__register_exitproc+0x4e>
 801095c:	2300      	movs	r3, #0
 801095e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8010962:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8010966:	6863      	ldr	r3, [r4, #4]
 8010968:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801096c:	2201      	movs	r2, #1
 801096e:	409a      	lsls	r2, r3
 8010970:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8010974:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8010978:	4313      	orrs	r3, r2
 801097a:	2e02      	cmp	r6, #2
 801097c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8010980:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8010984:	bf02      	ittt	eq
 8010986:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801098a:	431a      	orreq	r2, r3
 801098c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8010990:	6863      	ldr	r3, [r4, #4]
 8010992:	f8d8 0000 	ldr.w	r0, [r8]
 8010996:	1c5a      	adds	r2, r3, #1
 8010998:	3302      	adds	r3, #2
 801099a:	6062      	str	r2, [r4, #4]
 801099c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80109a0:	f001 f845 	bl	8011a2e <__retarget_lock_release_recursive>
 80109a4:	2000      	movs	r0, #0
 80109a6:	e7c6      	b.n	8010936 <__register_exitproc+0x3e>
 80109a8:	2003ee6c 	.word	0x2003ee6c
 80109ac:	2003ede0 	.word	0x2003ede0
 80109b0:	00000000 	.word	0x00000000
 80109b4:	0800f911 	.word	0x0800f911
 80109b8:	2003223c 	.word	0x2003223c

080109bc <quorem>:
 80109bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c0:	6903      	ldr	r3, [r0, #16]
 80109c2:	690c      	ldr	r4, [r1, #16]
 80109c4:	42a3      	cmp	r3, r4
 80109c6:	4607      	mov	r7, r0
 80109c8:	f2c0 8081 	blt.w	8010ace <quorem+0x112>
 80109cc:	3c01      	subs	r4, #1
 80109ce:	f101 0814 	add.w	r8, r1, #20
 80109d2:	f100 0514 	add.w	r5, r0, #20
 80109d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109da:	9301      	str	r3, [sp, #4]
 80109dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80109e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109e4:	3301      	adds	r3, #1
 80109e6:	429a      	cmp	r2, r3
 80109e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80109ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80109f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80109f4:	d331      	bcc.n	8010a5a <quorem+0x9e>
 80109f6:	f04f 0e00 	mov.w	lr, #0
 80109fa:	4640      	mov	r0, r8
 80109fc:	46ac      	mov	ip, r5
 80109fe:	46f2      	mov	sl, lr
 8010a00:	f850 2b04 	ldr.w	r2, [r0], #4
 8010a04:	b293      	uxth	r3, r2
 8010a06:	fb06 e303 	mla	r3, r6, r3, lr
 8010a0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	ebaa 0303 	sub.w	r3, sl, r3
 8010a14:	0c12      	lsrs	r2, r2, #16
 8010a16:	f8dc a000 	ldr.w	sl, [ip]
 8010a1a:	fb06 e202 	mla	r2, r6, r2, lr
 8010a1e:	fa13 f38a 	uxtah	r3, r3, sl
 8010a22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010a26:	fa1f fa82 	uxth.w	sl, r2
 8010a2a:	f8dc 2000 	ldr.w	r2, [ip]
 8010a2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010a32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a3c:	4581      	cmp	r9, r0
 8010a3e:	f84c 3b04 	str.w	r3, [ip], #4
 8010a42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a46:	d2db      	bcs.n	8010a00 <quorem+0x44>
 8010a48:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a4c:	b92b      	cbnz	r3, 8010a5a <quorem+0x9e>
 8010a4e:	9b01      	ldr	r3, [sp, #4]
 8010a50:	3b04      	subs	r3, #4
 8010a52:	429d      	cmp	r5, r3
 8010a54:	461a      	mov	r2, r3
 8010a56:	d32e      	bcc.n	8010ab6 <quorem+0xfa>
 8010a58:	613c      	str	r4, [r7, #16]
 8010a5a:	4638      	mov	r0, r7
 8010a5c:	f001 fad6 	bl	801200c <__mcmp>
 8010a60:	2800      	cmp	r0, #0
 8010a62:	db24      	blt.n	8010aae <quorem+0xf2>
 8010a64:	3601      	adds	r6, #1
 8010a66:	4628      	mov	r0, r5
 8010a68:	f04f 0c00 	mov.w	ip, #0
 8010a6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a70:	f8d0 e000 	ldr.w	lr, [r0]
 8010a74:	b293      	uxth	r3, r2
 8010a76:	ebac 0303 	sub.w	r3, ip, r3
 8010a7a:	0c12      	lsrs	r2, r2, #16
 8010a7c:	fa13 f38e 	uxtah	r3, r3, lr
 8010a80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a8e:	45c1      	cmp	r9, r8
 8010a90:	f840 3b04 	str.w	r3, [r0], #4
 8010a94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010a98:	d2e8      	bcs.n	8010a6c <quorem+0xb0>
 8010a9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010aa2:	b922      	cbnz	r2, 8010aae <quorem+0xf2>
 8010aa4:	3b04      	subs	r3, #4
 8010aa6:	429d      	cmp	r5, r3
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	d30a      	bcc.n	8010ac2 <quorem+0x106>
 8010aac:	613c      	str	r4, [r7, #16]
 8010aae:	4630      	mov	r0, r6
 8010ab0:	b003      	add	sp, #12
 8010ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab6:	6812      	ldr	r2, [r2, #0]
 8010ab8:	3b04      	subs	r3, #4
 8010aba:	2a00      	cmp	r2, #0
 8010abc:	d1cc      	bne.n	8010a58 <quorem+0x9c>
 8010abe:	3c01      	subs	r4, #1
 8010ac0:	e7c7      	b.n	8010a52 <quorem+0x96>
 8010ac2:	6812      	ldr	r2, [r2, #0]
 8010ac4:	3b04      	subs	r3, #4
 8010ac6:	2a00      	cmp	r2, #0
 8010ac8:	d1f0      	bne.n	8010aac <quorem+0xf0>
 8010aca:	3c01      	subs	r4, #1
 8010acc:	e7eb      	b.n	8010aa6 <quorem+0xea>
 8010ace:	2000      	movs	r0, #0
 8010ad0:	e7ee      	b.n	8010ab0 <quorem+0xf4>
 8010ad2:	0000      	movs	r0, r0
 8010ad4:	0000      	movs	r0, r0
	...

08010ad8 <_dtoa_r>:
 8010ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010adc:	ed2d 8b02 	vpush	{d8}
 8010ae0:	ec57 6b10 	vmov	r6, r7, d0
 8010ae4:	b095      	sub	sp, #84	; 0x54
 8010ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010ae8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010aec:	9105      	str	r1, [sp, #20]
 8010aee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010af2:	4604      	mov	r4, r0
 8010af4:	9209      	str	r2, [sp, #36]	; 0x24
 8010af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010af8:	b975      	cbnz	r5, 8010b18 <_dtoa_r+0x40>
 8010afa:	2010      	movs	r0, #16
 8010afc:	f7fe ff08 	bl	800f910 <malloc>
 8010b00:	4602      	mov	r2, r0
 8010b02:	6260      	str	r0, [r4, #36]	; 0x24
 8010b04:	b920      	cbnz	r0, 8010b10 <_dtoa_r+0x38>
 8010b06:	4bb2      	ldr	r3, [pc, #712]	; (8010dd0 <_dtoa_r+0x2f8>)
 8010b08:	21ea      	movs	r1, #234	; 0xea
 8010b0a:	48b2      	ldr	r0, [pc, #712]	; (8010dd4 <_dtoa_r+0x2fc>)
 8010b0c:	f7fe fea0 	bl	800f850 <__assert_func>
 8010b10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b14:	6005      	str	r5, [r0, #0]
 8010b16:	60c5      	str	r5, [r0, #12]
 8010b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b1a:	6819      	ldr	r1, [r3, #0]
 8010b1c:	b151      	cbz	r1, 8010b34 <_dtoa_r+0x5c>
 8010b1e:	685a      	ldr	r2, [r3, #4]
 8010b20:	604a      	str	r2, [r1, #4]
 8010b22:	2301      	movs	r3, #1
 8010b24:	4093      	lsls	r3, r2
 8010b26:	608b      	str	r3, [r1, #8]
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f001 f831 	bl	8011b90 <_Bfree>
 8010b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b30:	2200      	movs	r2, #0
 8010b32:	601a      	str	r2, [r3, #0]
 8010b34:	1e3b      	subs	r3, r7, #0
 8010b36:	bfb9      	ittee	lt
 8010b38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010b3c:	9303      	strlt	r3, [sp, #12]
 8010b3e:	2300      	movge	r3, #0
 8010b40:	f8c8 3000 	strge.w	r3, [r8]
 8010b44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010b48:	4ba3      	ldr	r3, [pc, #652]	; (8010dd8 <_dtoa_r+0x300>)
 8010b4a:	bfbc      	itt	lt
 8010b4c:	2201      	movlt	r2, #1
 8010b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8010b52:	ea33 0309 	bics.w	r3, r3, r9
 8010b56:	d11b      	bne.n	8010b90 <_dtoa_r+0xb8>
 8010b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b5e:	6013      	str	r3, [r2, #0]
 8010b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b64:	4333      	orrs	r3, r6
 8010b66:	f000 857a 	beq.w	801165e <_dtoa_r+0xb86>
 8010b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b6c:	b963      	cbnz	r3, 8010b88 <_dtoa_r+0xb0>
 8010b6e:	4b9b      	ldr	r3, [pc, #620]	; (8010ddc <_dtoa_r+0x304>)
 8010b70:	e024      	b.n	8010bbc <_dtoa_r+0xe4>
 8010b72:	4b9b      	ldr	r3, [pc, #620]	; (8010de0 <_dtoa_r+0x308>)
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	3308      	adds	r3, #8
 8010b78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b7a:	6013      	str	r3, [r2, #0]
 8010b7c:	9800      	ldr	r0, [sp, #0]
 8010b7e:	b015      	add	sp, #84	; 0x54
 8010b80:	ecbd 8b02 	vpop	{d8}
 8010b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b88:	4b94      	ldr	r3, [pc, #592]	; (8010ddc <_dtoa_r+0x304>)
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	3303      	adds	r3, #3
 8010b8e:	e7f3      	b.n	8010b78 <_dtoa_r+0xa0>
 8010b90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b94:	2200      	movs	r2, #0
 8010b96:	ec51 0b17 	vmov	r0, r1, d7
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010ba0:	f7ef ffbc 	bl	8000b1c <__aeabi_dcmpeq>
 8010ba4:	4680      	mov	r8, r0
 8010ba6:	b158      	cbz	r0, 8010bc0 <_dtoa_r+0xe8>
 8010ba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010baa:	2301      	movs	r3, #1
 8010bac:	6013      	str	r3, [r2, #0]
 8010bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f000 8551 	beq.w	8011658 <_dtoa_r+0xb80>
 8010bb6:	488b      	ldr	r0, [pc, #556]	; (8010de4 <_dtoa_r+0x30c>)
 8010bb8:	6018      	str	r0, [r3, #0]
 8010bba:	1e43      	subs	r3, r0, #1
 8010bbc:	9300      	str	r3, [sp, #0]
 8010bbe:	e7dd      	b.n	8010b7c <_dtoa_r+0xa4>
 8010bc0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010bc4:	aa12      	add	r2, sp, #72	; 0x48
 8010bc6:	a913      	add	r1, sp, #76	; 0x4c
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f001 fac3 	bl	8012154 <__d2b>
 8010bce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010bd2:	4683      	mov	fp, r0
 8010bd4:	2d00      	cmp	r5, #0
 8010bd6:	d07c      	beq.n	8010cd2 <_dtoa_r+0x1fa>
 8010bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010be2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010be6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010bf2:	4b7d      	ldr	r3, [pc, #500]	; (8010de8 <_dtoa_r+0x310>)
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	4639      	mov	r1, r7
 8010bfa:	f7ef fb6f 	bl	80002dc <__aeabi_dsub>
 8010bfe:	a36e      	add	r3, pc, #440	; (adr r3, 8010db8 <_dtoa_r+0x2e0>)
 8010c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c04:	f7ef fd22 	bl	800064c <__aeabi_dmul>
 8010c08:	a36d      	add	r3, pc, #436	; (adr r3, 8010dc0 <_dtoa_r+0x2e8>)
 8010c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0e:	f7ef fb67 	bl	80002e0 <__adddf3>
 8010c12:	4606      	mov	r6, r0
 8010c14:	4628      	mov	r0, r5
 8010c16:	460f      	mov	r7, r1
 8010c18:	f7ef fcae 	bl	8000578 <__aeabi_i2d>
 8010c1c:	a36a      	add	r3, pc, #424	; (adr r3, 8010dc8 <_dtoa_r+0x2f0>)
 8010c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c22:	f7ef fd13 	bl	800064c <__aeabi_dmul>
 8010c26:	4602      	mov	r2, r0
 8010c28:	460b      	mov	r3, r1
 8010c2a:	4630      	mov	r0, r6
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	f7ef fb57 	bl	80002e0 <__adddf3>
 8010c32:	4606      	mov	r6, r0
 8010c34:	460f      	mov	r7, r1
 8010c36:	f7ef ffb9 	bl	8000bac <__aeabi_d2iz>
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	4682      	mov	sl, r0
 8010c3e:	2300      	movs	r3, #0
 8010c40:	4630      	mov	r0, r6
 8010c42:	4639      	mov	r1, r7
 8010c44:	f7ef ff74 	bl	8000b30 <__aeabi_dcmplt>
 8010c48:	b148      	cbz	r0, 8010c5e <_dtoa_r+0x186>
 8010c4a:	4650      	mov	r0, sl
 8010c4c:	f7ef fc94 	bl	8000578 <__aeabi_i2d>
 8010c50:	4632      	mov	r2, r6
 8010c52:	463b      	mov	r3, r7
 8010c54:	f7ef ff62 	bl	8000b1c <__aeabi_dcmpeq>
 8010c58:	b908      	cbnz	r0, 8010c5e <_dtoa_r+0x186>
 8010c5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010c5e:	f1ba 0f16 	cmp.w	sl, #22
 8010c62:	d854      	bhi.n	8010d0e <_dtoa_r+0x236>
 8010c64:	4b61      	ldr	r3, [pc, #388]	; (8010dec <_dtoa_r+0x314>)
 8010c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010c72:	f7ef ff5d 	bl	8000b30 <__aeabi_dcmplt>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d04b      	beq.n	8010d12 <_dtoa_r+0x23a>
 8010c7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010c7e:	2300      	movs	r3, #0
 8010c80:	930e      	str	r3, [sp, #56]	; 0x38
 8010c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c84:	1b5d      	subs	r5, r3, r5
 8010c86:	1e6b      	subs	r3, r5, #1
 8010c88:	9304      	str	r3, [sp, #16]
 8010c8a:	bf43      	ittte	mi
 8010c8c:	2300      	movmi	r3, #0
 8010c8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8010c92:	9304      	strmi	r3, [sp, #16]
 8010c94:	f04f 0800 	movpl.w	r8, #0
 8010c98:	f1ba 0f00 	cmp.w	sl, #0
 8010c9c:	db3b      	blt.n	8010d16 <_dtoa_r+0x23e>
 8010c9e:	9b04      	ldr	r3, [sp, #16]
 8010ca0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010ca4:	4453      	add	r3, sl
 8010ca6:	9304      	str	r3, [sp, #16]
 8010ca8:	2300      	movs	r3, #0
 8010caa:	9306      	str	r3, [sp, #24]
 8010cac:	9b05      	ldr	r3, [sp, #20]
 8010cae:	2b09      	cmp	r3, #9
 8010cb0:	d869      	bhi.n	8010d86 <_dtoa_r+0x2ae>
 8010cb2:	2b05      	cmp	r3, #5
 8010cb4:	bfc4      	itt	gt
 8010cb6:	3b04      	subgt	r3, #4
 8010cb8:	9305      	strgt	r3, [sp, #20]
 8010cba:	9b05      	ldr	r3, [sp, #20]
 8010cbc:	f1a3 0302 	sub.w	r3, r3, #2
 8010cc0:	bfcc      	ite	gt
 8010cc2:	2500      	movgt	r5, #0
 8010cc4:	2501      	movle	r5, #1
 8010cc6:	2b03      	cmp	r3, #3
 8010cc8:	d869      	bhi.n	8010d9e <_dtoa_r+0x2c6>
 8010cca:	e8df f003 	tbb	[pc, r3]
 8010cce:	4e2c      	.short	0x4e2c
 8010cd0:	5a4c      	.short	0x5a4c
 8010cd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010cd6:	441d      	add	r5, r3
 8010cd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010cdc:	2b20      	cmp	r3, #32
 8010cde:	bfc1      	itttt	gt
 8010ce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010ce4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010ce8:	fa09 f303 	lslgt.w	r3, r9, r3
 8010cec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010cf0:	bfda      	itte	le
 8010cf2:	f1c3 0320 	rsble	r3, r3, #32
 8010cf6:	fa06 f003 	lslle.w	r0, r6, r3
 8010cfa:	4318      	orrgt	r0, r3
 8010cfc:	f7ef fc2c 	bl	8000558 <__aeabi_ui2d>
 8010d00:	2301      	movs	r3, #1
 8010d02:	4606      	mov	r6, r0
 8010d04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010d08:	3d01      	subs	r5, #1
 8010d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8010d0c:	e771      	b.n	8010bf2 <_dtoa_r+0x11a>
 8010d0e:	2301      	movs	r3, #1
 8010d10:	e7b6      	b.n	8010c80 <_dtoa_r+0x1a8>
 8010d12:	900e      	str	r0, [sp, #56]	; 0x38
 8010d14:	e7b5      	b.n	8010c82 <_dtoa_r+0x1aa>
 8010d16:	f1ca 0300 	rsb	r3, sl, #0
 8010d1a:	9306      	str	r3, [sp, #24]
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	eba8 080a 	sub.w	r8, r8, sl
 8010d22:	930d      	str	r3, [sp, #52]	; 0x34
 8010d24:	e7c2      	b.n	8010cac <_dtoa_r+0x1d4>
 8010d26:	2300      	movs	r3, #0
 8010d28:	9308      	str	r3, [sp, #32]
 8010d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	dc39      	bgt.n	8010da4 <_dtoa_r+0x2cc>
 8010d30:	f04f 0901 	mov.w	r9, #1
 8010d34:	f8cd 9004 	str.w	r9, [sp, #4]
 8010d38:	464b      	mov	r3, r9
 8010d3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010d3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010d40:	2200      	movs	r2, #0
 8010d42:	6042      	str	r2, [r0, #4]
 8010d44:	2204      	movs	r2, #4
 8010d46:	f102 0614 	add.w	r6, r2, #20
 8010d4a:	429e      	cmp	r6, r3
 8010d4c:	6841      	ldr	r1, [r0, #4]
 8010d4e:	d92f      	bls.n	8010db0 <_dtoa_r+0x2d8>
 8010d50:	4620      	mov	r0, r4
 8010d52:	f000 fedd 	bl	8011b10 <_Balloc>
 8010d56:	9000      	str	r0, [sp, #0]
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	d14b      	bne.n	8010df4 <_dtoa_r+0x31c>
 8010d5c:	4b24      	ldr	r3, [pc, #144]	; (8010df0 <_dtoa_r+0x318>)
 8010d5e:	4602      	mov	r2, r0
 8010d60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010d64:	e6d1      	b.n	8010b0a <_dtoa_r+0x32>
 8010d66:	2301      	movs	r3, #1
 8010d68:	e7de      	b.n	8010d28 <_dtoa_r+0x250>
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	9308      	str	r3, [sp, #32]
 8010d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d70:	eb0a 0903 	add.w	r9, sl, r3
 8010d74:	f109 0301 	add.w	r3, r9, #1
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	9301      	str	r3, [sp, #4]
 8010d7c:	bfb8      	it	lt
 8010d7e:	2301      	movlt	r3, #1
 8010d80:	e7dd      	b.n	8010d3e <_dtoa_r+0x266>
 8010d82:	2301      	movs	r3, #1
 8010d84:	e7f2      	b.n	8010d6c <_dtoa_r+0x294>
 8010d86:	2501      	movs	r5, #1
 8010d88:	2300      	movs	r3, #0
 8010d8a:	9305      	str	r3, [sp, #20]
 8010d8c:	9508      	str	r5, [sp, #32]
 8010d8e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8010d92:	2200      	movs	r2, #0
 8010d94:	f8cd 9004 	str.w	r9, [sp, #4]
 8010d98:	2312      	movs	r3, #18
 8010d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8010d9c:	e7cf      	b.n	8010d3e <_dtoa_r+0x266>
 8010d9e:	2301      	movs	r3, #1
 8010da0:	9308      	str	r3, [sp, #32]
 8010da2:	e7f4      	b.n	8010d8e <_dtoa_r+0x2b6>
 8010da4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010da8:	f8cd 9004 	str.w	r9, [sp, #4]
 8010dac:	464b      	mov	r3, r9
 8010dae:	e7c6      	b.n	8010d3e <_dtoa_r+0x266>
 8010db0:	3101      	adds	r1, #1
 8010db2:	6041      	str	r1, [r0, #4]
 8010db4:	0052      	lsls	r2, r2, #1
 8010db6:	e7c6      	b.n	8010d46 <_dtoa_r+0x26e>
 8010db8:	636f4361 	.word	0x636f4361
 8010dbc:	3fd287a7 	.word	0x3fd287a7
 8010dc0:	8b60c8b3 	.word	0x8b60c8b3
 8010dc4:	3fc68a28 	.word	0x3fc68a28
 8010dc8:	509f79fb 	.word	0x509f79fb
 8010dcc:	3fd34413 	.word	0x3fd34413
 8010dd0:	0801748b 	.word	0x0801748b
 8010dd4:	080174a2 	.word	0x080174a2
 8010dd8:	7ff00000 	.word	0x7ff00000
 8010ddc:	08017487 	.word	0x08017487
 8010de0:	0801747e 	.word	0x0801747e
 8010de4:	0801735a 	.word	0x0801735a
 8010de8:	3ff80000 	.word	0x3ff80000
 8010dec:	08017600 	.word	0x08017600
 8010df0:	08017501 	.word	0x08017501
 8010df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010df6:	9a00      	ldr	r2, [sp, #0]
 8010df8:	601a      	str	r2, [r3, #0]
 8010dfa:	9b01      	ldr	r3, [sp, #4]
 8010dfc:	2b0e      	cmp	r3, #14
 8010dfe:	f200 80ad 	bhi.w	8010f5c <_dtoa_r+0x484>
 8010e02:	2d00      	cmp	r5, #0
 8010e04:	f000 80aa 	beq.w	8010f5c <_dtoa_r+0x484>
 8010e08:	f1ba 0f00 	cmp.w	sl, #0
 8010e0c:	dd36      	ble.n	8010e7c <_dtoa_r+0x3a4>
 8010e0e:	4ac3      	ldr	r2, [pc, #780]	; (801111c <_dtoa_r+0x644>)
 8010e10:	f00a 030f 	and.w	r3, sl, #15
 8010e14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e18:	ed93 7b00 	vldr	d7, [r3]
 8010e1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010e20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010e24:	eeb0 8a47 	vmov.f32	s16, s14
 8010e28:	eef0 8a67 	vmov.f32	s17, s15
 8010e2c:	d016      	beq.n	8010e5c <_dtoa_r+0x384>
 8010e2e:	4bbc      	ldr	r3, [pc, #752]	; (8011120 <_dtoa_r+0x648>)
 8010e30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e38:	f7ef fd32 	bl	80008a0 <__aeabi_ddiv>
 8010e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e40:	f007 070f 	and.w	r7, r7, #15
 8010e44:	2503      	movs	r5, #3
 8010e46:	4eb6      	ldr	r6, [pc, #728]	; (8011120 <_dtoa_r+0x648>)
 8010e48:	b957      	cbnz	r7, 8010e60 <_dtoa_r+0x388>
 8010e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e4e:	ec53 2b18 	vmov	r2, r3, d8
 8010e52:	f7ef fd25 	bl	80008a0 <__aeabi_ddiv>
 8010e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e5a:	e029      	b.n	8010eb0 <_dtoa_r+0x3d8>
 8010e5c:	2502      	movs	r5, #2
 8010e5e:	e7f2      	b.n	8010e46 <_dtoa_r+0x36e>
 8010e60:	07f9      	lsls	r1, r7, #31
 8010e62:	d508      	bpl.n	8010e76 <_dtoa_r+0x39e>
 8010e64:	ec51 0b18 	vmov	r0, r1, d8
 8010e68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e6c:	f7ef fbee 	bl	800064c <__aeabi_dmul>
 8010e70:	ec41 0b18 	vmov	d8, r0, r1
 8010e74:	3501      	adds	r5, #1
 8010e76:	107f      	asrs	r7, r7, #1
 8010e78:	3608      	adds	r6, #8
 8010e7a:	e7e5      	b.n	8010e48 <_dtoa_r+0x370>
 8010e7c:	f000 80a6 	beq.w	8010fcc <_dtoa_r+0x4f4>
 8010e80:	f1ca 0600 	rsb	r6, sl, #0
 8010e84:	4ba5      	ldr	r3, [pc, #660]	; (801111c <_dtoa_r+0x644>)
 8010e86:	4fa6      	ldr	r7, [pc, #664]	; (8011120 <_dtoa_r+0x648>)
 8010e88:	f006 020f 	and.w	r2, r6, #15
 8010e8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010e98:	f7ef fbd8 	bl	800064c <__aeabi_dmul>
 8010e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ea0:	1136      	asrs	r6, r6, #4
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	2502      	movs	r5, #2
 8010ea6:	2e00      	cmp	r6, #0
 8010ea8:	f040 8085 	bne.w	8010fb6 <_dtoa_r+0x4de>
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1d2      	bne.n	8010e56 <_dtoa_r+0x37e>
 8010eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	f000 808c 	beq.w	8010fd0 <_dtoa_r+0x4f8>
 8010eb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ebc:	4b99      	ldr	r3, [pc, #612]	; (8011124 <_dtoa_r+0x64c>)
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	4639      	mov	r1, r7
 8010ec4:	f7ef fe34 	bl	8000b30 <__aeabi_dcmplt>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	f000 8081 	beq.w	8010fd0 <_dtoa_r+0x4f8>
 8010ece:	9b01      	ldr	r3, [sp, #4]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d07d      	beq.n	8010fd0 <_dtoa_r+0x4f8>
 8010ed4:	f1b9 0f00 	cmp.w	r9, #0
 8010ed8:	dd3c      	ble.n	8010f54 <_dtoa_r+0x47c>
 8010eda:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010ede:	9307      	str	r3, [sp, #28]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	4b91      	ldr	r3, [pc, #580]	; (8011128 <_dtoa_r+0x650>)
 8010ee4:	4630      	mov	r0, r6
 8010ee6:	4639      	mov	r1, r7
 8010ee8:	f7ef fbb0 	bl	800064c <__aeabi_dmul>
 8010eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ef0:	3501      	adds	r5, #1
 8010ef2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010ef6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010efa:	4628      	mov	r0, r5
 8010efc:	f7ef fb3c 	bl	8000578 <__aeabi_i2d>
 8010f00:	4632      	mov	r2, r6
 8010f02:	463b      	mov	r3, r7
 8010f04:	f7ef fba2 	bl	800064c <__aeabi_dmul>
 8010f08:	4b88      	ldr	r3, [pc, #544]	; (801112c <_dtoa_r+0x654>)
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f7ef f9e8 	bl	80002e0 <__adddf3>
 8010f10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f18:	9303      	str	r3, [sp, #12]
 8010f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d15c      	bne.n	8010fda <_dtoa_r+0x502>
 8010f20:	4b83      	ldr	r3, [pc, #524]	; (8011130 <_dtoa_r+0x658>)
 8010f22:	2200      	movs	r2, #0
 8010f24:	4630      	mov	r0, r6
 8010f26:	4639      	mov	r1, r7
 8010f28:	f7ef f9d8 	bl	80002dc <__aeabi_dsub>
 8010f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f30:	4606      	mov	r6, r0
 8010f32:	460f      	mov	r7, r1
 8010f34:	f7ef fe1a 	bl	8000b6c <__aeabi_dcmpgt>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	f040 8296 	bne.w	801146a <_dtoa_r+0x992>
 8010f3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010f42:	4630      	mov	r0, r6
 8010f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f48:	4639      	mov	r1, r7
 8010f4a:	f7ef fdf1 	bl	8000b30 <__aeabi_dcmplt>
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	f040 8288 	bne.w	8011464 <_dtoa_r+0x98c>
 8010f54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010f58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	f2c0 8158 	blt.w	8011214 <_dtoa_r+0x73c>
 8010f64:	f1ba 0f0e 	cmp.w	sl, #14
 8010f68:	f300 8154 	bgt.w	8011214 <_dtoa_r+0x73c>
 8010f6c:	4b6b      	ldr	r3, [pc, #428]	; (801111c <_dtoa_r+0x644>)
 8010f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010f72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	f280 80e3 	bge.w	8011144 <_dtoa_r+0x66c>
 8010f7e:	9b01      	ldr	r3, [sp, #4]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	f300 80df 	bgt.w	8011144 <_dtoa_r+0x66c>
 8010f86:	f040 826d 	bne.w	8011464 <_dtoa_r+0x98c>
 8010f8a:	4b69      	ldr	r3, [pc, #420]	; (8011130 <_dtoa_r+0x658>)
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	4640      	mov	r0, r8
 8010f90:	4649      	mov	r1, r9
 8010f92:	f7ef fb5b 	bl	800064c <__aeabi_dmul>
 8010f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f9a:	f7ef fddd 	bl	8000b58 <__aeabi_dcmpge>
 8010f9e:	9e01      	ldr	r6, [sp, #4]
 8010fa0:	4637      	mov	r7, r6
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	f040 8243 	bne.w	801142e <_dtoa_r+0x956>
 8010fa8:	9d00      	ldr	r5, [sp, #0]
 8010faa:	2331      	movs	r3, #49	; 0x31
 8010fac:	f805 3b01 	strb.w	r3, [r5], #1
 8010fb0:	f10a 0a01 	add.w	sl, sl, #1
 8010fb4:	e23f      	b.n	8011436 <_dtoa_r+0x95e>
 8010fb6:	07f2      	lsls	r2, r6, #31
 8010fb8:	d505      	bpl.n	8010fc6 <_dtoa_r+0x4ee>
 8010fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fbe:	f7ef fb45 	bl	800064c <__aeabi_dmul>
 8010fc2:	3501      	adds	r5, #1
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	1076      	asrs	r6, r6, #1
 8010fc8:	3708      	adds	r7, #8
 8010fca:	e76c      	b.n	8010ea6 <_dtoa_r+0x3ce>
 8010fcc:	2502      	movs	r5, #2
 8010fce:	e76f      	b.n	8010eb0 <_dtoa_r+0x3d8>
 8010fd0:	9b01      	ldr	r3, [sp, #4]
 8010fd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8010fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8010fd8:	e78d      	b.n	8010ef6 <_dtoa_r+0x41e>
 8010fda:	9900      	ldr	r1, [sp, #0]
 8010fdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fe0:	4b4e      	ldr	r3, [pc, #312]	; (801111c <_dtoa_r+0x644>)
 8010fe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010fe6:	4401      	add	r1, r0
 8010fe8:	9102      	str	r1, [sp, #8]
 8010fea:	9908      	ldr	r1, [sp, #32]
 8010fec:	eeb0 8a47 	vmov.f32	s16, s14
 8010ff0:	eef0 8a67 	vmov.f32	s17, s15
 8010ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ff8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ffc:	2900      	cmp	r1, #0
 8010ffe:	d045      	beq.n	801108c <_dtoa_r+0x5b4>
 8011000:	494c      	ldr	r1, [pc, #304]	; (8011134 <_dtoa_r+0x65c>)
 8011002:	2000      	movs	r0, #0
 8011004:	f7ef fc4c 	bl	80008a0 <__aeabi_ddiv>
 8011008:	ec53 2b18 	vmov	r2, r3, d8
 801100c:	f7ef f966 	bl	80002dc <__aeabi_dsub>
 8011010:	9d00      	ldr	r5, [sp, #0]
 8011012:	ec41 0b18 	vmov	d8, r0, r1
 8011016:	4639      	mov	r1, r7
 8011018:	4630      	mov	r0, r6
 801101a:	f7ef fdc7 	bl	8000bac <__aeabi_d2iz>
 801101e:	900c      	str	r0, [sp, #48]	; 0x30
 8011020:	f7ef faaa 	bl	8000578 <__aeabi_i2d>
 8011024:	4602      	mov	r2, r0
 8011026:	460b      	mov	r3, r1
 8011028:	4630      	mov	r0, r6
 801102a:	4639      	mov	r1, r7
 801102c:	f7ef f956 	bl	80002dc <__aeabi_dsub>
 8011030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011032:	3330      	adds	r3, #48	; 0x30
 8011034:	f805 3b01 	strb.w	r3, [r5], #1
 8011038:	ec53 2b18 	vmov	r2, r3, d8
 801103c:	4606      	mov	r6, r0
 801103e:	460f      	mov	r7, r1
 8011040:	f7ef fd76 	bl	8000b30 <__aeabi_dcmplt>
 8011044:	2800      	cmp	r0, #0
 8011046:	d165      	bne.n	8011114 <_dtoa_r+0x63c>
 8011048:	4632      	mov	r2, r6
 801104a:	463b      	mov	r3, r7
 801104c:	4935      	ldr	r1, [pc, #212]	; (8011124 <_dtoa_r+0x64c>)
 801104e:	2000      	movs	r0, #0
 8011050:	f7ef f944 	bl	80002dc <__aeabi_dsub>
 8011054:	ec53 2b18 	vmov	r2, r3, d8
 8011058:	f7ef fd6a 	bl	8000b30 <__aeabi_dcmplt>
 801105c:	2800      	cmp	r0, #0
 801105e:	f040 80b9 	bne.w	80111d4 <_dtoa_r+0x6fc>
 8011062:	9b02      	ldr	r3, [sp, #8]
 8011064:	429d      	cmp	r5, r3
 8011066:	f43f af75 	beq.w	8010f54 <_dtoa_r+0x47c>
 801106a:	4b2f      	ldr	r3, [pc, #188]	; (8011128 <_dtoa_r+0x650>)
 801106c:	ec51 0b18 	vmov	r0, r1, d8
 8011070:	2200      	movs	r2, #0
 8011072:	f7ef faeb 	bl	800064c <__aeabi_dmul>
 8011076:	4b2c      	ldr	r3, [pc, #176]	; (8011128 <_dtoa_r+0x650>)
 8011078:	ec41 0b18 	vmov	d8, r0, r1
 801107c:	2200      	movs	r2, #0
 801107e:	4630      	mov	r0, r6
 8011080:	4639      	mov	r1, r7
 8011082:	f7ef fae3 	bl	800064c <__aeabi_dmul>
 8011086:	4606      	mov	r6, r0
 8011088:	460f      	mov	r7, r1
 801108a:	e7c4      	b.n	8011016 <_dtoa_r+0x53e>
 801108c:	ec51 0b17 	vmov	r0, r1, d7
 8011090:	f7ef fadc 	bl	800064c <__aeabi_dmul>
 8011094:	9b02      	ldr	r3, [sp, #8]
 8011096:	9d00      	ldr	r5, [sp, #0]
 8011098:	930c      	str	r3, [sp, #48]	; 0x30
 801109a:	ec41 0b18 	vmov	d8, r0, r1
 801109e:	4639      	mov	r1, r7
 80110a0:	4630      	mov	r0, r6
 80110a2:	f7ef fd83 	bl	8000bac <__aeabi_d2iz>
 80110a6:	9011      	str	r0, [sp, #68]	; 0x44
 80110a8:	f7ef fa66 	bl	8000578 <__aeabi_i2d>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	4630      	mov	r0, r6
 80110b2:	4639      	mov	r1, r7
 80110b4:	f7ef f912 	bl	80002dc <__aeabi_dsub>
 80110b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110ba:	3330      	adds	r3, #48	; 0x30
 80110bc:	f805 3b01 	strb.w	r3, [r5], #1
 80110c0:	9b02      	ldr	r3, [sp, #8]
 80110c2:	429d      	cmp	r5, r3
 80110c4:	4606      	mov	r6, r0
 80110c6:	460f      	mov	r7, r1
 80110c8:	f04f 0200 	mov.w	r2, #0
 80110cc:	d134      	bne.n	8011138 <_dtoa_r+0x660>
 80110ce:	4b19      	ldr	r3, [pc, #100]	; (8011134 <_dtoa_r+0x65c>)
 80110d0:	ec51 0b18 	vmov	r0, r1, d8
 80110d4:	f7ef f904 	bl	80002e0 <__adddf3>
 80110d8:	4602      	mov	r2, r0
 80110da:	460b      	mov	r3, r1
 80110dc:	4630      	mov	r0, r6
 80110de:	4639      	mov	r1, r7
 80110e0:	f7ef fd44 	bl	8000b6c <__aeabi_dcmpgt>
 80110e4:	2800      	cmp	r0, #0
 80110e6:	d175      	bne.n	80111d4 <_dtoa_r+0x6fc>
 80110e8:	ec53 2b18 	vmov	r2, r3, d8
 80110ec:	4911      	ldr	r1, [pc, #68]	; (8011134 <_dtoa_r+0x65c>)
 80110ee:	2000      	movs	r0, #0
 80110f0:	f7ef f8f4 	bl	80002dc <__aeabi_dsub>
 80110f4:	4602      	mov	r2, r0
 80110f6:	460b      	mov	r3, r1
 80110f8:	4630      	mov	r0, r6
 80110fa:	4639      	mov	r1, r7
 80110fc:	f7ef fd18 	bl	8000b30 <__aeabi_dcmplt>
 8011100:	2800      	cmp	r0, #0
 8011102:	f43f af27 	beq.w	8010f54 <_dtoa_r+0x47c>
 8011106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011108:	1e6b      	subs	r3, r5, #1
 801110a:	930c      	str	r3, [sp, #48]	; 0x30
 801110c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011110:	2b30      	cmp	r3, #48	; 0x30
 8011112:	d0f8      	beq.n	8011106 <_dtoa_r+0x62e>
 8011114:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011118:	e04a      	b.n	80111b0 <_dtoa_r+0x6d8>
 801111a:	bf00      	nop
 801111c:	08017600 	.word	0x08017600
 8011120:	080175d8 	.word	0x080175d8
 8011124:	3ff00000 	.word	0x3ff00000
 8011128:	40240000 	.word	0x40240000
 801112c:	401c0000 	.word	0x401c0000
 8011130:	40140000 	.word	0x40140000
 8011134:	3fe00000 	.word	0x3fe00000
 8011138:	4baf      	ldr	r3, [pc, #700]	; (80113f8 <_dtoa_r+0x920>)
 801113a:	f7ef fa87 	bl	800064c <__aeabi_dmul>
 801113e:	4606      	mov	r6, r0
 8011140:	460f      	mov	r7, r1
 8011142:	e7ac      	b.n	801109e <_dtoa_r+0x5c6>
 8011144:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011148:	9d00      	ldr	r5, [sp, #0]
 801114a:	4642      	mov	r2, r8
 801114c:	464b      	mov	r3, r9
 801114e:	4630      	mov	r0, r6
 8011150:	4639      	mov	r1, r7
 8011152:	f7ef fba5 	bl	80008a0 <__aeabi_ddiv>
 8011156:	f7ef fd29 	bl	8000bac <__aeabi_d2iz>
 801115a:	9002      	str	r0, [sp, #8]
 801115c:	f7ef fa0c 	bl	8000578 <__aeabi_i2d>
 8011160:	4642      	mov	r2, r8
 8011162:	464b      	mov	r3, r9
 8011164:	f7ef fa72 	bl	800064c <__aeabi_dmul>
 8011168:	4602      	mov	r2, r0
 801116a:	460b      	mov	r3, r1
 801116c:	4630      	mov	r0, r6
 801116e:	4639      	mov	r1, r7
 8011170:	f7ef f8b4 	bl	80002dc <__aeabi_dsub>
 8011174:	9e02      	ldr	r6, [sp, #8]
 8011176:	9f01      	ldr	r7, [sp, #4]
 8011178:	3630      	adds	r6, #48	; 0x30
 801117a:	f805 6b01 	strb.w	r6, [r5], #1
 801117e:	9e00      	ldr	r6, [sp, #0]
 8011180:	1bae      	subs	r6, r5, r6
 8011182:	42b7      	cmp	r7, r6
 8011184:	4602      	mov	r2, r0
 8011186:	460b      	mov	r3, r1
 8011188:	d137      	bne.n	80111fa <_dtoa_r+0x722>
 801118a:	f7ef f8a9 	bl	80002e0 <__adddf3>
 801118e:	4642      	mov	r2, r8
 8011190:	464b      	mov	r3, r9
 8011192:	4606      	mov	r6, r0
 8011194:	460f      	mov	r7, r1
 8011196:	f7ef fce9 	bl	8000b6c <__aeabi_dcmpgt>
 801119a:	b9c8      	cbnz	r0, 80111d0 <_dtoa_r+0x6f8>
 801119c:	4642      	mov	r2, r8
 801119e:	464b      	mov	r3, r9
 80111a0:	4630      	mov	r0, r6
 80111a2:	4639      	mov	r1, r7
 80111a4:	f7ef fcba 	bl	8000b1c <__aeabi_dcmpeq>
 80111a8:	b110      	cbz	r0, 80111b0 <_dtoa_r+0x6d8>
 80111aa:	9b02      	ldr	r3, [sp, #8]
 80111ac:	07d9      	lsls	r1, r3, #31
 80111ae:	d40f      	bmi.n	80111d0 <_dtoa_r+0x6f8>
 80111b0:	4620      	mov	r0, r4
 80111b2:	4659      	mov	r1, fp
 80111b4:	f000 fcec 	bl	8011b90 <_Bfree>
 80111b8:	2300      	movs	r3, #0
 80111ba:	702b      	strb	r3, [r5, #0]
 80111bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111be:	f10a 0001 	add.w	r0, sl, #1
 80111c2:	6018      	str	r0, [r3, #0]
 80111c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f43f acd8 	beq.w	8010b7c <_dtoa_r+0xa4>
 80111cc:	601d      	str	r5, [r3, #0]
 80111ce:	e4d5      	b.n	8010b7c <_dtoa_r+0xa4>
 80111d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80111d4:	462b      	mov	r3, r5
 80111d6:	461d      	mov	r5, r3
 80111d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111dc:	2a39      	cmp	r2, #57	; 0x39
 80111de:	d108      	bne.n	80111f2 <_dtoa_r+0x71a>
 80111e0:	9a00      	ldr	r2, [sp, #0]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d1f7      	bne.n	80111d6 <_dtoa_r+0x6fe>
 80111e6:	9a07      	ldr	r2, [sp, #28]
 80111e8:	9900      	ldr	r1, [sp, #0]
 80111ea:	3201      	adds	r2, #1
 80111ec:	9207      	str	r2, [sp, #28]
 80111ee:	2230      	movs	r2, #48	; 0x30
 80111f0:	700a      	strb	r2, [r1, #0]
 80111f2:	781a      	ldrb	r2, [r3, #0]
 80111f4:	3201      	adds	r2, #1
 80111f6:	701a      	strb	r2, [r3, #0]
 80111f8:	e78c      	b.n	8011114 <_dtoa_r+0x63c>
 80111fa:	4b7f      	ldr	r3, [pc, #508]	; (80113f8 <_dtoa_r+0x920>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	f7ef fa25 	bl	800064c <__aeabi_dmul>
 8011202:	2200      	movs	r2, #0
 8011204:	2300      	movs	r3, #0
 8011206:	4606      	mov	r6, r0
 8011208:	460f      	mov	r7, r1
 801120a:	f7ef fc87 	bl	8000b1c <__aeabi_dcmpeq>
 801120e:	2800      	cmp	r0, #0
 8011210:	d09b      	beq.n	801114a <_dtoa_r+0x672>
 8011212:	e7cd      	b.n	80111b0 <_dtoa_r+0x6d8>
 8011214:	9a08      	ldr	r2, [sp, #32]
 8011216:	2a00      	cmp	r2, #0
 8011218:	f000 80c4 	beq.w	80113a4 <_dtoa_r+0x8cc>
 801121c:	9a05      	ldr	r2, [sp, #20]
 801121e:	2a01      	cmp	r2, #1
 8011220:	f300 80a8 	bgt.w	8011374 <_dtoa_r+0x89c>
 8011224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011226:	2a00      	cmp	r2, #0
 8011228:	f000 80a0 	beq.w	801136c <_dtoa_r+0x894>
 801122c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011230:	9e06      	ldr	r6, [sp, #24]
 8011232:	4645      	mov	r5, r8
 8011234:	9a04      	ldr	r2, [sp, #16]
 8011236:	2101      	movs	r1, #1
 8011238:	441a      	add	r2, r3
 801123a:	4620      	mov	r0, r4
 801123c:	4498      	add	r8, r3
 801123e:	9204      	str	r2, [sp, #16]
 8011240:	f000 fd62 	bl	8011d08 <__i2b>
 8011244:	4607      	mov	r7, r0
 8011246:	2d00      	cmp	r5, #0
 8011248:	dd0b      	ble.n	8011262 <_dtoa_r+0x78a>
 801124a:	9b04      	ldr	r3, [sp, #16]
 801124c:	2b00      	cmp	r3, #0
 801124e:	dd08      	ble.n	8011262 <_dtoa_r+0x78a>
 8011250:	42ab      	cmp	r3, r5
 8011252:	9a04      	ldr	r2, [sp, #16]
 8011254:	bfa8      	it	ge
 8011256:	462b      	movge	r3, r5
 8011258:	eba8 0803 	sub.w	r8, r8, r3
 801125c:	1aed      	subs	r5, r5, r3
 801125e:	1ad3      	subs	r3, r2, r3
 8011260:	9304      	str	r3, [sp, #16]
 8011262:	9b06      	ldr	r3, [sp, #24]
 8011264:	b1fb      	cbz	r3, 80112a6 <_dtoa_r+0x7ce>
 8011266:	9b08      	ldr	r3, [sp, #32]
 8011268:	2b00      	cmp	r3, #0
 801126a:	f000 809f 	beq.w	80113ac <_dtoa_r+0x8d4>
 801126e:	2e00      	cmp	r6, #0
 8011270:	dd11      	ble.n	8011296 <_dtoa_r+0x7be>
 8011272:	4639      	mov	r1, r7
 8011274:	4632      	mov	r2, r6
 8011276:	4620      	mov	r0, r4
 8011278:	f000 fe02 	bl	8011e80 <__pow5mult>
 801127c:	465a      	mov	r2, fp
 801127e:	4601      	mov	r1, r0
 8011280:	4607      	mov	r7, r0
 8011282:	4620      	mov	r0, r4
 8011284:	f000 fd56 	bl	8011d34 <__multiply>
 8011288:	4659      	mov	r1, fp
 801128a:	9007      	str	r0, [sp, #28]
 801128c:	4620      	mov	r0, r4
 801128e:	f000 fc7f 	bl	8011b90 <_Bfree>
 8011292:	9b07      	ldr	r3, [sp, #28]
 8011294:	469b      	mov	fp, r3
 8011296:	9b06      	ldr	r3, [sp, #24]
 8011298:	1b9a      	subs	r2, r3, r6
 801129a:	d004      	beq.n	80112a6 <_dtoa_r+0x7ce>
 801129c:	4659      	mov	r1, fp
 801129e:	4620      	mov	r0, r4
 80112a0:	f000 fdee 	bl	8011e80 <__pow5mult>
 80112a4:	4683      	mov	fp, r0
 80112a6:	2101      	movs	r1, #1
 80112a8:	4620      	mov	r0, r4
 80112aa:	f000 fd2d 	bl	8011d08 <__i2b>
 80112ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	4606      	mov	r6, r0
 80112b4:	dd7c      	ble.n	80113b0 <_dtoa_r+0x8d8>
 80112b6:	461a      	mov	r2, r3
 80112b8:	4601      	mov	r1, r0
 80112ba:	4620      	mov	r0, r4
 80112bc:	f000 fde0 	bl	8011e80 <__pow5mult>
 80112c0:	9b05      	ldr	r3, [sp, #20]
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	4606      	mov	r6, r0
 80112c6:	dd76      	ble.n	80113b6 <_dtoa_r+0x8de>
 80112c8:	2300      	movs	r3, #0
 80112ca:	9306      	str	r3, [sp, #24]
 80112cc:	6933      	ldr	r3, [r6, #16]
 80112ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80112d2:	6918      	ldr	r0, [r3, #16]
 80112d4:	f000 fcc8 	bl	8011c68 <__hi0bits>
 80112d8:	f1c0 0020 	rsb	r0, r0, #32
 80112dc:	9b04      	ldr	r3, [sp, #16]
 80112de:	4418      	add	r0, r3
 80112e0:	f010 001f 	ands.w	r0, r0, #31
 80112e4:	f000 8086 	beq.w	80113f4 <_dtoa_r+0x91c>
 80112e8:	f1c0 0320 	rsb	r3, r0, #32
 80112ec:	2b04      	cmp	r3, #4
 80112ee:	dd7f      	ble.n	80113f0 <_dtoa_r+0x918>
 80112f0:	f1c0 001c 	rsb	r0, r0, #28
 80112f4:	9b04      	ldr	r3, [sp, #16]
 80112f6:	4403      	add	r3, r0
 80112f8:	4480      	add	r8, r0
 80112fa:	4405      	add	r5, r0
 80112fc:	9304      	str	r3, [sp, #16]
 80112fe:	f1b8 0f00 	cmp.w	r8, #0
 8011302:	dd05      	ble.n	8011310 <_dtoa_r+0x838>
 8011304:	4659      	mov	r1, fp
 8011306:	4642      	mov	r2, r8
 8011308:	4620      	mov	r0, r4
 801130a:	f000 fe13 	bl	8011f34 <__lshift>
 801130e:	4683      	mov	fp, r0
 8011310:	9b04      	ldr	r3, [sp, #16]
 8011312:	2b00      	cmp	r3, #0
 8011314:	dd05      	ble.n	8011322 <_dtoa_r+0x84a>
 8011316:	4631      	mov	r1, r6
 8011318:	461a      	mov	r2, r3
 801131a:	4620      	mov	r0, r4
 801131c:	f000 fe0a 	bl	8011f34 <__lshift>
 8011320:	4606      	mov	r6, r0
 8011322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011324:	2b00      	cmp	r3, #0
 8011326:	d069      	beq.n	80113fc <_dtoa_r+0x924>
 8011328:	4631      	mov	r1, r6
 801132a:	4658      	mov	r0, fp
 801132c:	f000 fe6e 	bl	801200c <__mcmp>
 8011330:	2800      	cmp	r0, #0
 8011332:	da63      	bge.n	80113fc <_dtoa_r+0x924>
 8011334:	2300      	movs	r3, #0
 8011336:	4659      	mov	r1, fp
 8011338:	220a      	movs	r2, #10
 801133a:	4620      	mov	r0, r4
 801133c:	f000 fc4a 	bl	8011bd4 <__multadd>
 8011340:	9b08      	ldr	r3, [sp, #32]
 8011342:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011346:	4683      	mov	fp, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	f000 818f 	beq.w	801166c <_dtoa_r+0xb94>
 801134e:	4639      	mov	r1, r7
 8011350:	2300      	movs	r3, #0
 8011352:	220a      	movs	r2, #10
 8011354:	4620      	mov	r0, r4
 8011356:	f000 fc3d 	bl	8011bd4 <__multadd>
 801135a:	f1b9 0f00 	cmp.w	r9, #0
 801135e:	4607      	mov	r7, r0
 8011360:	f300 808e 	bgt.w	8011480 <_dtoa_r+0x9a8>
 8011364:	9b05      	ldr	r3, [sp, #20]
 8011366:	2b02      	cmp	r3, #2
 8011368:	dc50      	bgt.n	801140c <_dtoa_r+0x934>
 801136a:	e089      	b.n	8011480 <_dtoa_r+0x9a8>
 801136c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801136e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011372:	e75d      	b.n	8011230 <_dtoa_r+0x758>
 8011374:	9b01      	ldr	r3, [sp, #4]
 8011376:	1e5e      	subs	r6, r3, #1
 8011378:	9b06      	ldr	r3, [sp, #24]
 801137a:	42b3      	cmp	r3, r6
 801137c:	bfbf      	itttt	lt
 801137e:	9b06      	ldrlt	r3, [sp, #24]
 8011380:	9606      	strlt	r6, [sp, #24]
 8011382:	1af2      	sublt	r2, r6, r3
 8011384:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011386:	bfb6      	itet	lt
 8011388:	189b      	addlt	r3, r3, r2
 801138a:	1b9e      	subge	r6, r3, r6
 801138c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801138e:	9b01      	ldr	r3, [sp, #4]
 8011390:	bfb8      	it	lt
 8011392:	2600      	movlt	r6, #0
 8011394:	2b00      	cmp	r3, #0
 8011396:	bfb5      	itete	lt
 8011398:	eba8 0503 	sublt.w	r5, r8, r3
 801139c:	9b01      	ldrge	r3, [sp, #4]
 801139e:	2300      	movlt	r3, #0
 80113a0:	4645      	movge	r5, r8
 80113a2:	e747      	b.n	8011234 <_dtoa_r+0x75c>
 80113a4:	9e06      	ldr	r6, [sp, #24]
 80113a6:	9f08      	ldr	r7, [sp, #32]
 80113a8:	4645      	mov	r5, r8
 80113aa:	e74c      	b.n	8011246 <_dtoa_r+0x76e>
 80113ac:	9a06      	ldr	r2, [sp, #24]
 80113ae:	e775      	b.n	801129c <_dtoa_r+0x7c4>
 80113b0:	9b05      	ldr	r3, [sp, #20]
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	dc18      	bgt.n	80113e8 <_dtoa_r+0x910>
 80113b6:	9b02      	ldr	r3, [sp, #8]
 80113b8:	b9b3      	cbnz	r3, 80113e8 <_dtoa_r+0x910>
 80113ba:	9b03      	ldr	r3, [sp, #12]
 80113bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80113c0:	b9a3      	cbnz	r3, 80113ec <_dtoa_r+0x914>
 80113c2:	9b03      	ldr	r3, [sp, #12]
 80113c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80113c8:	0d1b      	lsrs	r3, r3, #20
 80113ca:	051b      	lsls	r3, r3, #20
 80113cc:	b12b      	cbz	r3, 80113da <_dtoa_r+0x902>
 80113ce:	9b04      	ldr	r3, [sp, #16]
 80113d0:	3301      	adds	r3, #1
 80113d2:	9304      	str	r3, [sp, #16]
 80113d4:	f108 0801 	add.w	r8, r8, #1
 80113d8:	2301      	movs	r3, #1
 80113da:	9306      	str	r3, [sp, #24]
 80113dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113de:	2b00      	cmp	r3, #0
 80113e0:	f47f af74 	bne.w	80112cc <_dtoa_r+0x7f4>
 80113e4:	2001      	movs	r0, #1
 80113e6:	e779      	b.n	80112dc <_dtoa_r+0x804>
 80113e8:	2300      	movs	r3, #0
 80113ea:	e7f6      	b.n	80113da <_dtoa_r+0x902>
 80113ec:	9b02      	ldr	r3, [sp, #8]
 80113ee:	e7f4      	b.n	80113da <_dtoa_r+0x902>
 80113f0:	d085      	beq.n	80112fe <_dtoa_r+0x826>
 80113f2:	4618      	mov	r0, r3
 80113f4:	301c      	adds	r0, #28
 80113f6:	e77d      	b.n	80112f4 <_dtoa_r+0x81c>
 80113f8:	40240000 	.word	0x40240000
 80113fc:	9b01      	ldr	r3, [sp, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	dc38      	bgt.n	8011474 <_dtoa_r+0x99c>
 8011402:	9b05      	ldr	r3, [sp, #20]
 8011404:	2b02      	cmp	r3, #2
 8011406:	dd35      	ble.n	8011474 <_dtoa_r+0x99c>
 8011408:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801140c:	f1b9 0f00 	cmp.w	r9, #0
 8011410:	d10d      	bne.n	801142e <_dtoa_r+0x956>
 8011412:	4631      	mov	r1, r6
 8011414:	464b      	mov	r3, r9
 8011416:	2205      	movs	r2, #5
 8011418:	4620      	mov	r0, r4
 801141a:	f000 fbdb 	bl	8011bd4 <__multadd>
 801141e:	4601      	mov	r1, r0
 8011420:	4606      	mov	r6, r0
 8011422:	4658      	mov	r0, fp
 8011424:	f000 fdf2 	bl	801200c <__mcmp>
 8011428:	2800      	cmp	r0, #0
 801142a:	f73f adbd 	bgt.w	8010fa8 <_dtoa_r+0x4d0>
 801142e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011430:	9d00      	ldr	r5, [sp, #0]
 8011432:	ea6f 0a03 	mvn.w	sl, r3
 8011436:	f04f 0800 	mov.w	r8, #0
 801143a:	4631      	mov	r1, r6
 801143c:	4620      	mov	r0, r4
 801143e:	f000 fba7 	bl	8011b90 <_Bfree>
 8011442:	2f00      	cmp	r7, #0
 8011444:	f43f aeb4 	beq.w	80111b0 <_dtoa_r+0x6d8>
 8011448:	f1b8 0f00 	cmp.w	r8, #0
 801144c:	d005      	beq.n	801145a <_dtoa_r+0x982>
 801144e:	45b8      	cmp	r8, r7
 8011450:	d003      	beq.n	801145a <_dtoa_r+0x982>
 8011452:	4641      	mov	r1, r8
 8011454:	4620      	mov	r0, r4
 8011456:	f000 fb9b 	bl	8011b90 <_Bfree>
 801145a:	4639      	mov	r1, r7
 801145c:	4620      	mov	r0, r4
 801145e:	f000 fb97 	bl	8011b90 <_Bfree>
 8011462:	e6a5      	b.n	80111b0 <_dtoa_r+0x6d8>
 8011464:	2600      	movs	r6, #0
 8011466:	4637      	mov	r7, r6
 8011468:	e7e1      	b.n	801142e <_dtoa_r+0x956>
 801146a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801146c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011470:	4637      	mov	r7, r6
 8011472:	e599      	b.n	8010fa8 <_dtoa_r+0x4d0>
 8011474:	9b08      	ldr	r3, [sp, #32]
 8011476:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801147a:	2b00      	cmp	r3, #0
 801147c:	f000 80fd 	beq.w	801167a <_dtoa_r+0xba2>
 8011480:	2d00      	cmp	r5, #0
 8011482:	dd05      	ble.n	8011490 <_dtoa_r+0x9b8>
 8011484:	4639      	mov	r1, r7
 8011486:	462a      	mov	r2, r5
 8011488:	4620      	mov	r0, r4
 801148a:	f000 fd53 	bl	8011f34 <__lshift>
 801148e:	4607      	mov	r7, r0
 8011490:	9b06      	ldr	r3, [sp, #24]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d05c      	beq.n	8011550 <_dtoa_r+0xa78>
 8011496:	6879      	ldr	r1, [r7, #4]
 8011498:	4620      	mov	r0, r4
 801149a:	f000 fb39 	bl	8011b10 <_Balloc>
 801149e:	4605      	mov	r5, r0
 80114a0:	b928      	cbnz	r0, 80114ae <_dtoa_r+0x9d6>
 80114a2:	4b80      	ldr	r3, [pc, #512]	; (80116a4 <_dtoa_r+0xbcc>)
 80114a4:	4602      	mov	r2, r0
 80114a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80114aa:	f7ff bb2e 	b.w	8010b0a <_dtoa_r+0x32>
 80114ae:	693a      	ldr	r2, [r7, #16]
 80114b0:	3202      	adds	r2, #2
 80114b2:	0092      	lsls	r2, r2, #2
 80114b4:	f107 010c 	add.w	r1, r7, #12
 80114b8:	300c      	adds	r0, #12
 80114ba:	f7fe fa39 	bl	800f930 <memcpy>
 80114be:	2201      	movs	r2, #1
 80114c0:	4629      	mov	r1, r5
 80114c2:	4620      	mov	r0, r4
 80114c4:	f000 fd36 	bl	8011f34 <__lshift>
 80114c8:	9b00      	ldr	r3, [sp, #0]
 80114ca:	3301      	adds	r3, #1
 80114cc:	9301      	str	r3, [sp, #4]
 80114ce:	9b00      	ldr	r3, [sp, #0]
 80114d0:	444b      	add	r3, r9
 80114d2:	9307      	str	r3, [sp, #28]
 80114d4:	9b02      	ldr	r3, [sp, #8]
 80114d6:	f003 0301 	and.w	r3, r3, #1
 80114da:	46b8      	mov	r8, r7
 80114dc:	9306      	str	r3, [sp, #24]
 80114de:	4607      	mov	r7, r0
 80114e0:	9b01      	ldr	r3, [sp, #4]
 80114e2:	4631      	mov	r1, r6
 80114e4:	3b01      	subs	r3, #1
 80114e6:	4658      	mov	r0, fp
 80114e8:	9302      	str	r3, [sp, #8]
 80114ea:	f7ff fa67 	bl	80109bc <quorem>
 80114ee:	4603      	mov	r3, r0
 80114f0:	3330      	adds	r3, #48	; 0x30
 80114f2:	9004      	str	r0, [sp, #16]
 80114f4:	4641      	mov	r1, r8
 80114f6:	4658      	mov	r0, fp
 80114f8:	9308      	str	r3, [sp, #32]
 80114fa:	f000 fd87 	bl	801200c <__mcmp>
 80114fe:	463a      	mov	r2, r7
 8011500:	4681      	mov	r9, r0
 8011502:	4631      	mov	r1, r6
 8011504:	4620      	mov	r0, r4
 8011506:	f000 fd9d 	bl	8012044 <__mdiff>
 801150a:	68c2      	ldr	r2, [r0, #12]
 801150c:	9b08      	ldr	r3, [sp, #32]
 801150e:	4605      	mov	r5, r0
 8011510:	bb02      	cbnz	r2, 8011554 <_dtoa_r+0xa7c>
 8011512:	4601      	mov	r1, r0
 8011514:	4658      	mov	r0, fp
 8011516:	f000 fd79 	bl	801200c <__mcmp>
 801151a:	9b08      	ldr	r3, [sp, #32]
 801151c:	4602      	mov	r2, r0
 801151e:	4629      	mov	r1, r5
 8011520:	4620      	mov	r0, r4
 8011522:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011526:	f000 fb33 	bl	8011b90 <_Bfree>
 801152a:	9b05      	ldr	r3, [sp, #20]
 801152c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801152e:	9d01      	ldr	r5, [sp, #4]
 8011530:	ea43 0102 	orr.w	r1, r3, r2
 8011534:	9b06      	ldr	r3, [sp, #24]
 8011536:	430b      	orrs	r3, r1
 8011538:	9b08      	ldr	r3, [sp, #32]
 801153a:	d10d      	bne.n	8011558 <_dtoa_r+0xa80>
 801153c:	2b39      	cmp	r3, #57	; 0x39
 801153e:	d029      	beq.n	8011594 <_dtoa_r+0xabc>
 8011540:	f1b9 0f00 	cmp.w	r9, #0
 8011544:	dd01      	ble.n	801154a <_dtoa_r+0xa72>
 8011546:	9b04      	ldr	r3, [sp, #16]
 8011548:	3331      	adds	r3, #49	; 0x31
 801154a:	9a02      	ldr	r2, [sp, #8]
 801154c:	7013      	strb	r3, [r2, #0]
 801154e:	e774      	b.n	801143a <_dtoa_r+0x962>
 8011550:	4638      	mov	r0, r7
 8011552:	e7b9      	b.n	80114c8 <_dtoa_r+0x9f0>
 8011554:	2201      	movs	r2, #1
 8011556:	e7e2      	b.n	801151e <_dtoa_r+0xa46>
 8011558:	f1b9 0f00 	cmp.w	r9, #0
 801155c:	db06      	blt.n	801156c <_dtoa_r+0xa94>
 801155e:	9905      	ldr	r1, [sp, #20]
 8011560:	ea41 0909 	orr.w	r9, r1, r9
 8011564:	9906      	ldr	r1, [sp, #24]
 8011566:	ea59 0101 	orrs.w	r1, r9, r1
 801156a:	d120      	bne.n	80115ae <_dtoa_r+0xad6>
 801156c:	2a00      	cmp	r2, #0
 801156e:	ddec      	ble.n	801154a <_dtoa_r+0xa72>
 8011570:	4659      	mov	r1, fp
 8011572:	2201      	movs	r2, #1
 8011574:	4620      	mov	r0, r4
 8011576:	9301      	str	r3, [sp, #4]
 8011578:	f000 fcdc 	bl	8011f34 <__lshift>
 801157c:	4631      	mov	r1, r6
 801157e:	4683      	mov	fp, r0
 8011580:	f000 fd44 	bl	801200c <__mcmp>
 8011584:	2800      	cmp	r0, #0
 8011586:	9b01      	ldr	r3, [sp, #4]
 8011588:	dc02      	bgt.n	8011590 <_dtoa_r+0xab8>
 801158a:	d1de      	bne.n	801154a <_dtoa_r+0xa72>
 801158c:	07da      	lsls	r2, r3, #31
 801158e:	d5dc      	bpl.n	801154a <_dtoa_r+0xa72>
 8011590:	2b39      	cmp	r3, #57	; 0x39
 8011592:	d1d8      	bne.n	8011546 <_dtoa_r+0xa6e>
 8011594:	9a02      	ldr	r2, [sp, #8]
 8011596:	2339      	movs	r3, #57	; 0x39
 8011598:	7013      	strb	r3, [r2, #0]
 801159a:	462b      	mov	r3, r5
 801159c:	461d      	mov	r5, r3
 801159e:	3b01      	subs	r3, #1
 80115a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80115a4:	2a39      	cmp	r2, #57	; 0x39
 80115a6:	d050      	beq.n	801164a <_dtoa_r+0xb72>
 80115a8:	3201      	adds	r2, #1
 80115aa:	701a      	strb	r2, [r3, #0]
 80115ac:	e745      	b.n	801143a <_dtoa_r+0x962>
 80115ae:	2a00      	cmp	r2, #0
 80115b0:	dd03      	ble.n	80115ba <_dtoa_r+0xae2>
 80115b2:	2b39      	cmp	r3, #57	; 0x39
 80115b4:	d0ee      	beq.n	8011594 <_dtoa_r+0xabc>
 80115b6:	3301      	adds	r3, #1
 80115b8:	e7c7      	b.n	801154a <_dtoa_r+0xa72>
 80115ba:	9a01      	ldr	r2, [sp, #4]
 80115bc:	9907      	ldr	r1, [sp, #28]
 80115be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80115c2:	428a      	cmp	r2, r1
 80115c4:	d02a      	beq.n	801161c <_dtoa_r+0xb44>
 80115c6:	4659      	mov	r1, fp
 80115c8:	2300      	movs	r3, #0
 80115ca:	220a      	movs	r2, #10
 80115cc:	4620      	mov	r0, r4
 80115ce:	f000 fb01 	bl	8011bd4 <__multadd>
 80115d2:	45b8      	cmp	r8, r7
 80115d4:	4683      	mov	fp, r0
 80115d6:	f04f 0300 	mov.w	r3, #0
 80115da:	f04f 020a 	mov.w	r2, #10
 80115de:	4641      	mov	r1, r8
 80115e0:	4620      	mov	r0, r4
 80115e2:	d107      	bne.n	80115f4 <_dtoa_r+0xb1c>
 80115e4:	f000 faf6 	bl	8011bd4 <__multadd>
 80115e8:	4680      	mov	r8, r0
 80115ea:	4607      	mov	r7, r0
 80115ec:	9b01      	ldr	r3, [sp, #4]
 80115ee:	3301      	adds	r3, #1
 80115f0:	9301      	str	r3, [sp, #4]
 80115f2:	e775      	b.n	80114e0 <_dtoa_r+0xa08>
 80115f4:	f000 faee 	bl	8011bd4 <__multadd>
 80115f8:	4639      	mov	r1, r7
 80115fa:	4680      	mov	r8, r0
 80115fc:	2300      	movs	r3, #0
 80115fe:	220a      	movs	r2, #10
 8011600:	4620      	mov	r0, r4
 8011602:	f000 fae7 	bl	8011bd4 <__multadd>
 8011606:	4607      	mov	r7, r0
 8011608:	e7f0      	b.n	80115ec <_dtoa_r+0xb14>
 801160a:	f1b9 0f00 	cmp.w	r9, #0
 801160e:	9a00      	ldr	r2, [sp, #0]
 8011610:	bfcc      	ite	gt
 8011612:	464d      	movgt	r5, r9
 8011614:	2501      	movle	r5, #1
 8011616:	4415      	add	r5, r2
 8011618:	f04f 0800 	mov.w	r8, #0
 801161c:	4659      	mov	r1, fp
 801161e:	2201      	movs	r2, #1
 8011620:	4620      	mov	r0, r4
 8011622:	9301      	str	r3, [sp, #4]
 8011624:	f000 fc86 	bl	8011f34 <__lshift>
 8011628:	4631      	mov	r1, r6
 801162a:	4683      	mov	fp, r0
 801162c:	f000 fcee 	bl	801200c <__mcmp>
 8011630:	2800      	cmp	r0, #0
 8011632:	dcb2      	bgt.n	801159a <_dtoa_r+0xac2>
 8011634:	d102      	bne.n	801163c <_dtoa_r+0xb64>
 8011636:	9b01      	ldr	r3, [sp, #4]
 8011638:	07db      	lsls	r3, r3, #31
 801163a:	d4ae      	bmi.n	801159a <_dtoa_r+0xac2>
 801163c:	462b      	mov	r3, r5
 801163e:	461d      	mov	r5, r3
 8011640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011644:	2a30      	cmp	r2, #48	; 0x30
 8011646:	d0fa      	beq.n	801163e <_dtoa_r+0xb66>
 8011648:	e6f7      	b.n	801143a <_dtoa_r+0x962>
 801164a:	9a00      	ldr	r2, [sp, #0]
 801164c:	429a      	cmp	r2, r3
 801164e:	d1a5      	bne.n	801159c <_dtoa_r+0xac4>
 8011650:	f10a 0a01 	add.w	sl, sl, #1
 8011654:	2331      	movs	r3, #49	; 0x31
 8011656:	e779      	b.n	801154c <_dtoa_r+0xa74>
 8011658:	4b13      	ldr	r3, [pc, #76]	; (80116a8 <_dtoa_r+0xbd0>)
 801165a:	f7ff baaf 	b.w	8010bbc <_dtoa_r+0xe4>
 801165e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011660:	2b00      	cmp	r3, #0
 8011662:	f47f aa86 	bne.w	8010b72 <_dtoa_r+0x9a>
 8011666:	4b11      	ldr	r3, [pc, #68]	; (80116ac <_dtoa_r+0xbd4>)
 8011668:	f7ff baa8 	b.w	8010bbc <_dtoa_r+0xe4>
 801166c:	f1b9 0f00 	cmp.w	r9, #0
 8011670:	dc03      	bgt.n	801167a <_dtoa_r+0xba2>
 8011672:	9b05      	ldr	r3, [sp, #20]
 8011674:	2b02      	cmp	r3, #2
 8011676:	f73f aec9 	bgt.w	801140c <_dtoa_r+0x934>
 801167a:	9d00      	ldr	r5, [sp, #0]
 801167c:	4631      	mov	r1, r6
 801167e:	4658      	mov	r0, fp
 8011680:	f7ff f99c 	bl	80109bc <quorem>
 8011684:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011688:	f805 3b01 	strb.w	r3, [r5], #1
 801168c:	9a00      	ldr	r2, [sp, #0]
 801168e:	1aaa      	subs	r2, r5, r2
 8011690:	4591      	cmp	r9, r2
 8011692:	ddba      	ble.n	801160a <_dtoa_r+0xb32>
 8011694:	4659      	mov	r1, fp
 8011696:	2300      	movs	r3, #0
 8011698:	220a      	movs	r2, #10
 801169a:	4620      	mov	r0, r4
 801169c:	f000 fa9a 	bl	8011bd4 <__multadd>
 80116a0:	4683      	mov	fp, r0
 80116a2:	e7eb      	b.n	801167c <_dtoa_r+0xba4>
 80116a4:	08017501 	.word	0x08017501
 80116a8:	08017359 	.word	0x08017359
 80116ac:	0801747e 	.word	0x0801747e

080116b0 <__sflush_r>:
 80116b0:	898a      	ldrh	r2, [r1, #12]
 80116b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116b6:	4605      	mov	r5, r0
 80116b8:	0710      	lsls	r0, r2, #28
 80116ba:	460c      	mov	r4, r1
 80116bc:	d458      	bmi.n	8011770 <__sflush_r+0xc0>
 80116be:	684b      	ldr	r3, [r1, #4]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	dc05      	bgt.n	80116d0 <__sflush_r+0x20>
 80116c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	dc02      	bgt.n	80116d0 <__sflush_r+0x20>
 80116ca:	2000      	movs	r0, #0
 80116cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116d2:	2e00      	cmp	r6, #0
 80116d4:	d0f9      	beq.n	80116ca <__sflush_r+0x1a>
 80116d6:	2300      	movs	r3, #0
 80116d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80116dc:	682f      	ldr	r7, [r5, #0]
 80116de:	602b      	str	r3, [r5, #0]
 80116e0:	d032      	beq.n	8011748 <__sflush_r+0x98>
 80116e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116e4:	89a3      	ldrh	r3, [r4, #12]
 80116e6:	075a      	lsls	r2, r3, #29
 80116e8:	d505      	bpl.n	80116f6 <__sflush_r+0x46>
 80116ea:	6863      	ldr	r3, [r4, #4]
 80116ec:	1ac0      	subs	r0, r0, r3
 80116ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116f0:	b10b      	cbz	r3, 80116f6 <__sflush_r+0x46>
 80116f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116f4:	1ac0      	subs	r0, r0, r3
 80116f6:	2300      	movs	r3, #0
 80116f8:	4602      	mov	r2, r0
 80116fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116fc:	6a21      	ldr	r1, [r4, #32]
 80116fe:	4628      	mov	r0, r5
 8011700:	47b0      	blx	r6
 8011702:	1c43      	adds	r3, r0, #1
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	d106      	bne.n	8011716 <__sflush_r+0x66>
 8011708:	6829      	ldr	r1, [r5, #0]
 801170a:	291d      	cmp	r1, #29
 801170c:	d82c      	bhi.n	8011768 <__sflush_r+0xb8>
 801170e:	4a2a      	ldr	r2, [pc, #168]	; (80117b8 <__sflush_r+0x108>)
 8011710:	40ca      	lsrs	r2, r1
 8011712:	07d6      	lsls	r6, r2, #31
 8011714:	d528      	bpl.n	8011768 <__sflush_r+0xb8>
 8011716:	2200      	movs	r2, #0
 8011718:	6062      	str	r2, [r4, #4]
 801171a:	04d9      	lsls	r1, r3, #19
 801171c:	6922      	ldr	r2, [r4, #16]
 801171e:	6022      	str	r2, [r4, #0]
 8011720:	d504      	bpl.n	801172c <__sflush_r+0x7c>
 8011722:	1c42      	adds	r2, r0, #1
 8011724:	d101      	bne.n	801172a <__sflush_r+0x7a>
 8011726:	682b      	ldr	r3, [r5, #0]
 8011728:	b903      	cbnz	r3, 801172c <__sflush_r+0x7c>
 801172a:	6560      	str	r0, [r4, #84]	; 0x54
 801172c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801172e:	602f      	str	r7, [r5, #0]
 8011730:	2900      	cmp	r1, #0
 8011732:	d0ca      	beq.n	80116ca <__sflush_r+0x1a>
 8011734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011738:	4299      	cmp	r1, r3
 801173a:	d002      	beq.n	8011742 <__sflush_r+0x92>
 801173c:	4628      	mov	r0, r5
 801173e:	f7fe f927 	bl	800f990 <_free_r>
 8011742:	2000      	movs	r0, #0
 8011744:	6360      	str	r0, [r4, #52]	; 0x34
 8011746:	e7c1      	b.n	80116cc <__sflush_r+0x1c>
 8011748:	6a21      	ldr	r1, [r4, #32]
 801174a:	2301      	movs	r3, #1
 801174c:	4628      	mov	r0, r5
 801174e:	47b0      	blx	r6
 8011750:	1c41      	adds	r1, r0, #1
 8011752:	d1c7      	bne.n	80116e4 <__sflush_r+0x34>
 8011754:	682b      	ldr	r3, [r5, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d0c4      	beq.n	80116e4 <__sflush_r+0x34>
 801175a:	2b1d      	cmp	r3, #29
 801175c:	d001      	beq.n	8011762 <__sflush_r+0xb2>
 801175e:	2b16      	cmp	r3, #22
 8011760:	d101      	bne.n	8011766 <__sflush_r+0xb6>
 8011762:	602f      	str	r7, [r5, #0]
 8011764:	e7b1      	b.n	80116ca <__sflush_r+0x1a>
 8011766:	89a3      	ldrh	r3, [r4, #12]
 8011768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801176c:	81a3      	strh	r3, [r4, #12]
 801176e:	e7ad      	b.n	80116cc <__sflush_r+0x1c>
 8011770:	690f      	ldr	r7, [r1, #16]
 8011772:	2f00      	cmp	r7, #0
 8011774:	d0a9      	beq.n	80116ca <__sflush_r+0x1a>
 8011776:	0793      	lsls	r3, r2, #30
 8011778:	680e      	ldr	r6, [r1, #0]
 801177a:	bf08      	it	eq
 801177c:	694b      	ldreq	r3, [r1, #20]
 801177e:	600f      	str	r7, [r1, #0]
 8011780:	bf18      	it	ne
 8011782:	2300      	movne	r3, #0
 8011784:	eba6 0807 	sub.w	r8, r6, r7
 8011788:	608b      	str	r3, [r1, #8]
 801178a:	f1b8 0f00 	cmp.w	r8, #0
 801178e:	dd9c      	ble.n	80116ca <__sflush_r+0x1a>
 8011790:	6a21      	ldr	r1, [r4, #32]
 8011792:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011794:	4643      	mov	r3, r8
 8011796:	463a      	mov	r2, r7
 8011798:	4628      	mov	r0, r5
 801179a:	47b0      	blx	r6
 801179c:	2800      	cmp	r0, #0
 801179e:	dc06      	bgt.n	80117ae <__sflush_r+0xfe>
 80117a0:	89a3      	ldrh	r3, [r4, #12]
 80117a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117a6:	81a3      	strh	r3, [r4, #12]
 80117a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117ac:	e78e      	b.n	80116cc <__sflush_r+0x1c>
 80117ae:	4407      	add	r7, r0
 80117b0:	eba8 0800 	sub.w	r8, r8, r0
 80117b4:	e7e9      	b.n	801178a <__sflush_r+0xda>
 80117b6:	bf00      	nop
 80117b8:	20400001 	.word	0x20400001

080117bc <_fflush_r>:
 80117bc:	b538      	push	{r3, r4, r5, lr}
 80117be:	690b      	ldr	r3, [r1, #16]
 80117c0:	4605      	mov	r5, r0
 80117c2:	460c      	mov	r4, r1
 80117c4:	b913      	cbnz	r3, 80117cc <_fflush_r+0x10>
 80117c6:	2500      	movs	r5, #0
 80117c8:	4628      	mov	r0, r5
 80117ca:	bd38      	pop	{r3, r4, r5, pc}
 80117cc:	b118      	cbz	r0, 80117d6 <_fflush_r+0x1a>
 80117ce:	6983      	ldr	r3, [r0, #24]
 80117d0:	b90b      	cbnz	r3, 80117d6 <_fflush_r+0x1a>
 80117d2:	f000 f887 	bl	80118e4 <__sinit>
 80117d6:	4b14      	ldr	r3, [pc, #80]	; (8011828 <_fflush_r+0x6c>)
 80117d8:	429c      	cmp	r4, r3
 80117da:	d11b      	bne.n	8011814 <_fflush_r+0x58>
 80117dc:	686c      	ldr	r4, [r5, #4]
 80117de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d0ef      	beq.n	80117c6 <_fflush_r+0xa>
 80117e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117e8:	07d0      	lsls	r0, r2, #31
 80117ea:	d404      	bmi.n	80117f6 <_fflush_r+0x3a>
 80117ec:	0599      	lsls	r1, r3, #22
 80117ee:	d402      	bmi.n	80117f6 <_fflush_r+0x3a>
 80117f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117f2:	f000 f91a 	bl	8011a2a <__retarget_lock_acquire_recursive>
 80117f6:	4628      	mov	r0, r5
 80117f8:	4621      	mov	r1, r4
 80117fa:	f7ff ff59 	bl	80116b0 <__sflush_r>
 80117fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011800:	07da      	lsls	r2, r3, #31
 8011802:	4605      	mov	r5, r0
 8011804:	d4e0      	bmi.n	80117c8 <_fflush_r+0xc>
 8011806:	89a3      	ldrh	r3, [r4, #12]
 8011808:	059b      	lsls	r3, r3, #22
 801180a:	d4dd      	bmi.n	80117c8 <_fflush_r+0xc>
 801180c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801180e:	f000 f90e 	bl	8011a2e <__retarget_lock_release_recursive>
 8011812:	e7d9      	b.n	80117c8 <_fflush_r+0xc>
 8011814:	4b05      	ldr	r3, [pc, #20]	; (801182c <_fflush_r+0x70>)
 8011816:	429c      	cmp	r4, r3
 8011818:	d101      	bne.n	801181e <_fflush_r+0x62>
 801181a:	68ac      	ldr	r4, [r5, #8]
 801181c:	e7df      	b.n	80117de <_fflush_r+0x22>
 801181e:	4b04      	ldr	r3, [pc, #16]	; (8011830 <_fflush_r+0x74>)
 8011820:	429c      	cmp	r4, r3
 8011822:	bf08      	it	eq
 8011824:	68ec      	ldreq	r4, [r5, #12]
 8011826:	e7da      	b.n	80117de <_fflush_r+0x22>
 8011828:	08017534 	.word	0x08017534
 801182c:	08017554 	.word	0x08017554
 8011830:	08017514 	.word	0x08017514

08011834 <std>:
 8011834:	2300      	movs	r3, #0
 8011836:	b510      	push	{r4, lr}
 8011838:	4604      	mov	r4, r0
 801183a:	e9c0 3300 	strd	r3, r3, [r0]
 801183e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011842:	6083      	str	r3, [r0, #8]
 8011844:	8181      	strh	r1, [r0, #12]
 8011846:	6643      	str	r3, [r0, #100]	; 0x64
 8011848:	81c2      	strh	r2, [r0, #14]
 801184a:	6183      	str	r3, [r0, #24]
 801184c:	4619      	mov	r1, r3
 801184e:	2208      	movs	r2, #8
 8011850:	305c      	adds	r0, #92	; 0x5c
 8011852:	f7fe f895 	bl	800f980 <memset>
 8011856:	4b05      	ldr	r3, [pc, #20]	; (801186c <std+0x38>)
 8011858:	6263      	str	r3, [r4, #36]	; 0x24
 801185a:	4b05      	ldr	r3, [pc, #20]	; (8011870 <std+0x3c>)
 801185c:	62a3      	str	r3, [r4, #40]	; 0x28
 801185e:	4b05      	ldr	r3, [pc, #20]	; (8011874 <std+0x40>)
 8011860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011862:	4b05      	ldr	r3, [pc, #20]	; (8011878 <std+0x44>)
 8011864:	6224      	str	r4, [r4, #32]
 8011866:	6323      	str	r3, [r4, #48]	; 0x30
 8011868:	bd10      	pop	{r4, pc}
 801186a:	bf00      	nop
 801186c:	0801252d 	.word	0x0801252d
 8011870:	0801254f 	.word	0x0801254f
 8011874:	08012587 	.word	0x08012587
 8011878:	080125ab 	.word	0x080125ab

0801187c <_cleanup_r>:
 801187c:	4901      	ldr	r1, [pc, #4]	; (8011884 <_cleanup_r+0x8>)
 801187e:	f000 b8af 	b.w	80119e0 <_fwalk_reent>
 8011882:	bf00      	nop
 8011884:	080117bd 	.word	0x080117bd

08011888 <__sfmoreglue>:
 8011888:	b570      	push	{r4, r5, r6, lr}
 801188a:	1e4a      	subs	r2, r1, #1
 801188c:	2568      	movs	r5, #104	; 0x68
 801188e:	4355      	muls	r5, r2
 8011890:	460e      	mov	r6, r1
 8011892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011896:	f7fe f8cb 	bl	800fa30 <_malloc_r>
 801189a:	4604      	mov	r4, r0
 801189c:	b140      	cbz	r0, 80118b0 <__sfmoreglue+0x28>
 801189e:	2100      	movs	r1, #0
 80118a0:	e9c0 1600 	strd	r1, r6, [r0]
 80118a4:	300c      	adds	r0, #12
 80118a6:	60a0      	str	r0, [r4, #8]
 80118a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80118ac:	f7fe f868 	bl	800f980 <memset>
 80118b0:	4620      	mov	r0, r4
 80118b2:	bd70      	pop	{r4, r5, r6, pc}

080118b4 <__sfp_lock_acquire>:
 80118b4:	4801      	ldr	r0, [pc, #4]	; (80118bc <__sfp_lock_acquire+0x8>)
 80118b6:	f000 b8b8 	b.w	8011a2a <__retarget_lock_acquire_recursive>
 80118ba:	bf00      	nop
 80118bc:	2003ee78 	.word	0x2003ee78

080118c0 <__sfp_lock_release>:
 80118c0:	4801      	ldr	r0, [pc, #4]	; (80118c8 <__sfp_lock_release+0x8>)
 80118c2:	f000 b8b4 	b.w	8011a2e <__retarget_lock_release_recursive>
 80118c6:	bf00      	nop
 80118c8:	2003ee78 	.word	0x2003ee78

080118cc <__sinit_lock_acquire>:
 80118cc:	4801      	ldr	r0, [pc, #4]	; (80118d4 <__sinit_lock_acquire+0x8>)
 80118ce:	f000 b8ac 	b.w	8011a2a <__retarget_lock_acquire_recursive>
 80118d2:	bf00      	nop
 80118d4:	2003ee77 	.word	0x2003ee77

080118d8 <__sinit_lock_release>:
 80118d8:	4801      	ldr	r0, [pc, #4]	; (80118e0 <__sinit_lock_release+0x8>)
 80118da:	f000 b8a8 	b.w	8011a2e <__retarget_lock_release_recursive>
 80118de:	bf00      	nop
 80118e0:	2003ee77 	.word	0x2003ee77

080118e4 <__sinit>:
 80118e4:	b510      	push	{r4, lr}
 80118e6:	4604      	mov	r4, r0
 80118e8:	f7ff fff0 	bl	80118cc <__sinit_lock_acquire>
 80118ec:	69a3      	ldr	r3, [r4, #24]
 80118ee:	b11b      	cbz	r3, 80118f8 <__sinit+0x14>
 80118f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118f4:	f7ff bff0 	b.w	80118d8 <__sinit_lock_release>
 80118f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80118fc:	6523      	str	r3, [r4, #80]	; 0x50
 80118fe:	4b13      	ldr	r3, [pc, #76]	; (801194c <__sinit+0x68>)
 8011900:	4a13      	ldr	r2, [pc, #76]	; (8011950 <__sinit+0x6c>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	62a2      	str	r2, [r4, #40]	; 0x28
 8011906:	42a3      	cmp	r3, r4
 8011908:	bf04      	itt	eq
 801190a:	2301      	moveq	r3, #1
 801190c:	61a3      	streq	r3, [r4, #24]
 801190e:	4620      	mov	r0, r4
 8011910:	f000 f820 	bl	8011954 <__sfp>
 8011914:	6060      	str	r0, [r4, #4]
 8011916:	4620      	mov	r0, r4
 8011918:	f000 f81c 	bl	8011954 <__sfp>
 801191c:	60a0      	str	r0, [r4, #8]
 801191e:	4620      	mov	r0, r4
 8011920:	f000 f818 	bl	8011954 <__sfp>
 8011924:	2200      	movs	r2, #0
 8011926:	60e0      	str	r0, [r4, #12]
 8011928:	2104      	movs	r1, #4
 801192a:	6860      	ldr	r0, [r4, #4]
 801192c:	f7ff ff82 	bl	8011834 <std>
 8011930:	68a0      	ldr	r0, [r4, #8]
 8011932:	2201      	movs	r2, #1
 8011934:	2109      	movs	r1, #9
 8011936:	f7ff ff7d 	bl	8011834 <std>
 801193a:	68e0      	ldr	r0, [r4, #12]
 801193c:	2202      	movs	r2, #2
 801193e:	2112      	movs	r1, #18
 8011940:	f7ff ff78 	bl	8011834 <std>
 8011944:	2301      	movs	r3, #1
 8011946:	61a3      	str	r3, [r4, #24]
 8011948:	e7d2      	b.n	80118f0 <__sinit+0xc>
 801194a:	bf00      	nop
 801194c:	08017334 	.word	0x08017334
 8011950:	0801187d 	.word	0x0801187d

08011954 <__sfp>:
 8011954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011956:	4607      	mov	r7, r0
 8011958:	f7ff ffac 	bl	80118b4 <__sfp_lock_acquire>
 801195c:	4b1e      	ldr	r3, [pc, #120]	; (80119d8 <__sfp+0x84>)
 801195e:	681e      	ldr	r6, [r3, #0]
 8011960:	69b3      	ldr	r3, [r6, #24]
 8011962:	b913      	cbnz	r3, 801196a <__sfp+0x16>
 8011964:	4630      	mov	r0, r6
 8011966:	f7ff ffbd 	bl	80118e4 <__sinit>
 801196a:	3648      	adds	r6, #72	; 0x48
 801196c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011970:	3b01      	subs	r3, #1
 8011972:	d503      	bpl.n	801197c <__sfp+0x28>
 8011974:	6833      	ldr	r3, [r6, #0]
 8011976:	b30b      	cbz	r3, 80119bc <__sfp+0x68>
 8011978:	6836      	ldr	r6, [r6, #0]
 801197a:	e7f7      	b.n	801196c <__sfp+0x18>
 801197c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011980:	b9d5      	cbnz	r5, 80119b8 <__sfp+0x64>
 8011982:	4b16      	ldr	r3, [pc, #88]	; (80119dc <__sfp+0x88>)
 8011984:	60e3      	str	r3, [r4, #12]
 8011986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801198a:	6665      	str	r5, [r4, #100]	; 0x64
 801198c:	f000 f84c 	bl	8011a28 <__retarget_lock_init_recursive>
 8011990:	f7ff ff96 	bl	80118c0 <__sfp_lock_release>
 8011994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801199c:	6025      	str	r5, [r4, #0]
 801199e:	61a5      	str	r5, [r4, #24]
 80119a0:	2208      	movs	r2, #8
 80119a2:	4629      	mov	r1, r5
 80119a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80119a8:	f7fd ffea 	bl	800f980 <memset>
 80119ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80119b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80119b4:	4620      	mov	r0, r4
 80119b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119b8:	3468      	adds	r4, #104	; 0x68
 80119ba:	e7d9      	b.n	8011970 <__sfp+0x1c>
 80119bc:	2104      	movs	r1, #4
 80119be:	4638      	mov	r0, r7
 80119c0:	f7ff ff62 	bl	8011888 <__sfmoreglue>
 80119c4:	4604      	mov	r4, r0
 80119c6:	6030      	str	r0, [r6, #0]
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d1d5      	bne.n	8011978 <__sfp+0x24>
 80119cc:	f7ff ff78 	bl	80118c0 <__sfp_lock_release>
 80119d0:	230c      	movs	r3, #12
 80119d2:	603b      	str	r3, [r7, #0]
 80119d4:	e7ee      	b.n	80119b4 <__sfp+0x60>
 80119d6:	bf00      	nop
 80119d8:	08017334 	.word	0x08017334
 80119dc:	ffff0001 	.word	0xffff0001

080119e0 <_fwalk_reent>:
 80119e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119e4:	4606      	mov	r6, r0
 80119e6:	4688      	mov	r8, r1
 80119e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80119ec:	2700      	movs	r7, #0
 80119ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119f2:	f1b9 0901 	subs.w	r9, r9, #1
 80119f6:	d505      	bpl.n	8011a04 <_fwalk_reent+0x24>
 80119f8:	6824      	ldr	r4, [r4, #0]
 80119fa:	2c00      	cmp	r4, #0
 80119fc:	d1f7      	bne.n	80119ee <_fwalk_reent+0xe>
 80119fe:	4638      	mov	r0, r7
 8011a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a04:	89ab      	ldrh	r3, [r5, #12]
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	d907      	bls.n	8011a1a <_fwalk_reent+0x3a>
 8011a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	d003      	beq.n	8011a1a <_fwalk_reent+0x3a>
 8011a12:	4629      	mov	r1, r5
 8011a14:	4630      	mov	r0, r6
 8011a16:	47c0      	blx	r8
 8011a18:	4307      	orrs	r7, r0
 8011a1a:	3568      	adds	r5, #104	; 0x68
 8011a1c:	e7e9      	b.n	80119f2 <_fwalk_reent+0x12>
	...

08011a20 <_localeconv_r>:
 8011a20:	4800      	ldr	r0, [pc, #0]	; (8011a24 <_localeconv_r+0x4>)
 8011a22:	4770      	bx	lr
 8011a24:	20032330 	.word	0x20032330

08011a28 <__retarget_lock_init_recursive>:
 8011a28:	4770      	bx	lr

08011a2a <__retarget_lock_acquire_recursive>:
 8011a2a:	4770      	bx	lr

08011a2c <__retarget_lock_release>:
 8011a2c:	4770      	bx	lr

08011a2e <__retarget_lock_release_recursive>:
 8011a2e:	4770      	bx	lr

08011a30 <__swhatbuf_r>:
 8011a30:	b570      	push	{r4, r5, r6, lr}
 8011a32:	460e      	mov	r6, r1
 8011a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a38:	2900      	cmp	r1, #0
 8011a3a:	b096      	sub	sp, #88	; 0x58
 8011a3c:	4614      	mov	r4, r2
 8011a3e:	461d      	mov	r5, r3
 8011a40:	da07      	bge.n	8011a52 <__swhatbuf_r+0x22>
 8011a42:	2300      	movs	r3, #0
 8011a44:	602b      	str	r3, [r5, #0]
 8011a46:	89b3      	ldrh	r3, [r6, #12]
 8011a48:	061a      	lsls	r2, r3, #24
 8011a4a:	d410      	bmi.n	8011a6e <__swhatbuf_r+0x3e>
 8011a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a50:	e00e      	b.n	8011a70 <__swhatbuf_r+0x40>
 8011a52:	466a      	mov	r2, sp
 8011a54:	f000 fdd0 	bl	80125f8 <_fstat_r>
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	dbf2      	blt.n	8011a42 <__swhatbuf_r+0x12>
 8011a5c:	9a01      	ldr	r2, [sp, #4]
 8011a5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011a62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011a66:	425a      	negs	r2, r3
 8011a68:	415a      	adcs	r2, r3
 8011a6a:	602a      	str	r2, [r5, #0]
 8011a6c:	e7ee      	b.n	8011a4c <__swhatbuf_r+0x1c>
 8011a6e:	2340      	movs	r3, #64	; 0x40
 8011a70:	2000      	movs	r0, #0
 8011a72:	6023      	str	r3, [r4, #0]
 8011a74:	b016      	add	sp, #88	; 0x58
 8011a76:	bd70      	pop	{r4, r5, r6, pc}

08011a78 <__smakebuf_r>:
 8011a78:	898b      	ldrh	r3, [r1, #12]
 8011a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a7c:	079d      	lsls	r5, r3, #30
 8011a7e:	4606      	mov	r6, r0
 8011a80:	460c      	mov	r4, r1
 8011a82:	d507      	bpl.n	8011a94 <__smakebuf_r+0x1c>
 8011a84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a88:	6023      	str	r3, [r4, #0]
 8011a8a:	6123      	str	r3, [r4, #16]
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	6163      	str	r3, [r4, #20]
 8011a90:	b002      	add	sp, #8
 8011a92:	bd70      	pop	{r4, r5, r6, pc}
 8011a94:	ab01      	add	r3, sp, #4
 8011a96:	466a      	mov	r2, sp
 8011a98:	f7ff ffca 	bl	8011a30 <__swhatbuf_r>
 8011a9c:	9900      	ldr	r1, [sp, #0]
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	f7fd ffc5 	bl	800fa30 <_malloc_r>
 8011aa6:	b948      	cbnz	r0, 8011abc <__smakebuf_r+0x44>
 8011aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011aac:	059a      	lsls	r2, r3, #22
 8011aae:	d4ef      	bmi.n	8011a90 <__smakebuf_r+0x18>
 8011ab0:	f023 0303 	bic.w	r3, r3, #3
 8011ab4:	f043 0302 	orr.w	r3, r3, #2
 8011ab8:	81a3      	strh	r3, [r4, #12]
 8011aba:	e7e3      	b.n	8011a84 <__smakebuf_r+0xc>
 8011abc:	4b0d      	ldr	r3, [pc, #52]	; (8011af4 <__smakebuf_r+0x7c>)
 8011abe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ac0:	89a3      	ldrh	r3, [r4, #12]
 8011ac2:	6020      	str	r0, [r4, #0]
 8011ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ac8:	81a3      	strh	r3, [r4, #12]
 8011aca:	9b00      	ldr	r3, [sp, #0]
 8011acc:	6163      	str	r3, [r4, #20]
 8011ace:	9b01      	ldr	r3, [sp, #4]
 8011ad0:	6120      	str	r0, [r4, #16]
 8011ad2:	b15b      	cbz	r3, 8011aec <__smakebuf_r+0x74>
 8011ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ad8:	4630      	mov	r0, r6
 8011ada:	f000 fd9f 	bl	801261c <_isatty_r>
 8011ade:	b128      	cbz	r0, 8011aec <__smakebuf_r+0x74>
 8011ae0:	89a3      	ldrh	r3, [r4, #12]
 8011ae2:	f023 0303 	bic.w	r3, r3, #3
 8011ae6:	f043 0301 	orr.w	r3, r3, #1
 8011aea:	81a3      	strh	r3, [r4, #12]
 8011aec:	89a0      	ldrh	r0, [r4, #12]
 8011aee:	4305      	orrs	r5, r0
 8011af0:	81a5      	strh	r5, [r4, #12]
 8011af2:	e7cd      	b.n	8011a90 <__smakebuf_r+0x18>
 8011af4:	0801187d 	.word	0x0801187d

08011af8 <__malloc_lock>:
 8011af8:	4801      	ldr	r0, [pc, #4]	; (8011b00 <__malloc_lock+0x8>)
 8011afa:	f7ff bf96 	b.w	8011a2a <__retarget_lock_acquire_recursive>
 8011afe:	bf00      	nop
 8011b00:	2003ee74 	.word	0x2003ee74

08011b04 <__malloc_unlock>:
 8011b04:	4801      	ldr	r0, [pc, #4]	; (8011b0c <__malloc_unlock+0x8>)
 8011b06:	f7ff bf92 	b.w	8011a2e <__retarget_lock_release_recursive>
 8011b0a:	bf00      	nop
 8011b0c:	2003ee74 	.word	0x2003ee74

08011b10 <_Balloc>:
 8011b10:	b570      	push	{r4, r5, r6, lr}
 8011b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011b14:	4604      	mov	r4, r0
 8011b16:	460d      	mov	r5, r1
 8011b18:	b976      	cbnz	r6, 8011b38 <_Balloc+0x28>
 8011b1a:	2010      	movs	r0, #16
 8011b1c:	f7fd fef8 	bl	800f910 <malloc>
 8011b20:	4602      	mov	r2, r0
 8011b22:	6260      	str	r0, [r4, #36]	; 0x24
 8011b24:	b920      	cbnz	r0, 8011b30 <_Balloc+0x20>
 8011b26:	4b18      	ldr	r3, [pc, #96]	; (8011b88 <_Balloc+0x78>)
 8011b28:	4818      	ldr	r0, [pc, #96]	; (8011b8c <_Balloc+0x7c>)
 8011b2a:	2166      	movs	r1, #102	; 0x66
 8011b2c:	f7fd fe90 	bl	800f850 <__assert_func>
 8011b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b34:	6006      	str	r6, [r0, #0]
 8011b36:	60c6      	str	r6, [r0, #12]
 8011b38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011b3a:	68f3      	ldr	r3, [r6, #12]
 8011b3c:	b183      	cbz	r3, 8011b60 <_Balloc+0x50>
 8011b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b40:	68db      	ldr	r3, [r3, #12]
 8011b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011b46:	b9b8      	cbnz	r0, 8011b78 <_Balloc+0x68>
 8011b48:	2101      	movs	r1, #1
 8011b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8011b4e:	1d72      	adds	r2, r6, #5
 8011b50:	0092      	lsls	r2, r2, #2
 8011b52:	4620      	mov	r0, r4
 8011b54:	f000 fb5a 	bl	801220c <_calloc_r>
 8011b58:	b160      	cbz	r0, 8011b74 <_Balloc+0x64>
 8011b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011b5e:	e00e      	b.n	8011b7e <_Balloc+0x6e>
 8011b60:	2221      	movs	r2, #33	; 0x21
 8011b62:	2104      	movs	r1, #4
 8011b64:	4620      	mov	r0, r4
 8011b66:	f000 fb51 	bl	801220c <_calloc_r>
 8011b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b6c:	60f0      	str	r0, [r6, #12]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d1e4      	bne.n	8011b3e <_Balloc+0x2e>
 8011b74:	2000      	movs	r0, #0
 8011b76:	bd70      	pop	{r4, r5, r6, pc}
 8011b78:	6802      	ldr	r2, [r0, #0]
 8011b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011b7e:	2300      	movs	r3, #0
 8011b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011b84:	e7f7      	b.n	8011b76 <_Balloc+0x66>
 8011b86:	bf00      	nop
 8011b88:	0801748b 	.word	0x0801748b
 8011b8c:	08017574 	.word	0x08017574

08011b90 <_Bfree>:
 8011b90:	b570      	push	{r4, r5, r6, lr}
 8011b92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011b94:	4605      	mov	r5, r0
 8011b96:	460c      	mov	r4, r1
 8011b98:	b976      	cbnz	r6, 8011bb8 <_Bfree+0x28>
 8011b9a:	2010      	movs	r0, #16
 8011b9c:	f7fd feb8 	bl	800f910 <malloc>
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	6268      	str	r0, [r5, #36]	; 0x24
 8011ba4:	b920      	cbnz	r0, 8011bb0 <_Bfree+0x20>
 8011ba6:	4b09      	ldr	r3, [pc, #36]	; (8011bcc <_Bfree+0x3c>)
 8011ba8:	4809      	ldr	r0, [pc, #36]	; (8011bd0 <_Bfree+0x40>)
 8011baa:	218a      	movs	r1, #138	; 0x8a
 8011bac:	f7fd fe50 	bl	800f850 <__assert_func>
 8011bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011bb4:	6006      	str	r6, [r0, #0]
 8011bb6:	60c6      	str	r6, [r0, #12]
 8011bb8:	b13c      	cbz	r4, 8011bca <_Bfree+0x3a>
 8011bba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011bbc:	6862      	ldr	r2, [r4, #4]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011bc4:	6021      	str	r1, [r4, #0]
 8011bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011bca:	bd70      	pop	{r4, r5, r6, pc}
 8011bcc:	0801748b 	.word	0x0801748b
 8011bd0:	08017574 	.word	0x08017574

08011bd4 <__multadd>:
 8011bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd8:	690e      	ldr	r6, [r1, #16]
 8011bda:	4607      	mov	r7, r0
 8011bdc:	4698      	mov	r8, r3
 8011bde:	460c      	mov	r4, r1
 8011be0:	f101 0014 	add.w	r0, r1, #20
 8011be4:	2300      	movs	r3, #0
 8011be6:	6805      	ldr	r5, [r0, #0]
 8011be8:	b2a9      	uxth	r1, r5
 8011bea:	fb02 8101 	mla	r1, r2, r1, r8
 8011bee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011bf2:	0c2d      	lsrs	r5, r5, #16
 8011bf4:	fb02 c505 	mla	r5, r2, r5, ip
 8011bf8:	b289      	uxth	r1, r1
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011c00:	429e      	cmp	r6, r3
 8011c02:	f840 1b04 	str.w	r1, [r0], #4
 8011c06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011c0a:	dcec      	bgt.n	8011be6 <__multadd+0x12>
 8011c0c:	f1b8 0f00 	cmp.w	r8, #0
 8011c10:	d022      	beq.n	8011c58 <__multadd+0x84>
 8011c12:	68a3      	ldr	r3, [r4, #8]
 8011c14:	42b3      	cmp	r3, r6
 8011c16:	dc19      	bgt.n	8011c4c <__multadd+0x78>
 8011c18:	6861      	ldr	r1, [r4, #4]
 8011c1a:	4638      	mov	r0, r7
 8011c1c:	3101      	adds	r1, #1
 8011c1e:	f7ff ff77 	bl	8011b10 <_Balloc>
 8011c22:	4605      	mov	r5, r0
 8011c24:	b928      	cbnz	r0, 8011c32 <__multadd+0x5e>
 8011c26:	4602      	mov	r2, r0
 8011c28:	4b0d      	ldr	r3, [pc, #52]	; (8011c60 <__multadd+0x8c>)
 8011c2a:	480e      	ldr	r0, [pc, #56]	; (8011c64 <__multadd+0x90>)
 8011c2c:	21b5      	movs	r1, #181	; 0xb5
 8011c2e:	f7fd fe0f 	bl	800f850 <__assert_func>
 8011c32:	6922      	ldr	r2, [r4, #16]
 8011c34:	3202      	adds	r2, #2
 8011c36:	f104 010c 	add.w	r1, r4, #12
 8011c3a:	0092      	lsls	r2, r2, #2
 8011c3c:	300c      	adds	r0, #12
 8011c3e:	f7fd fe77 	bl	800f930 <memcpy>
 8011c42:	4621      	mov	r1, r4
 8011c44:	4638      	mov	r0, r7
 8011c46:	f7ff ffa3 	bl	8011b90 <_Bfree>
 8011c4a:	462c      	mov	r4, r5
 8011c4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011c50:	3601      	adds	r6, #1
 8011c52:	f8c3 8014 	str.w	r8, [r3, #20]
 8011c56:	6126      	str	r6, [r4, #16]
 8011c58:	4620      	mov	r0, r4
 8011c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c5e:	bf00      	nop
 8011c60:	08017501 	.word	0x08017501
 8011c64:	08017574 	.word	0x08017574

08011c68 <__hi0bits>:
 8011c68:	0c03      	lsrs	r3, r0, #16
 8011c6a:	041b      	lsls	r3, r3, #16
 8011c6c:	b9d3      	cbnz	r3, 8011ca4 <__hi0bits+0x3c>
 8011c6e:	0400      	lsls	r0, r0, #16
 8011c70:	2310      	movs	r3, #16
 8011c72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011c76:	bf04      	itt	eq
 8011c78:	0200      	lsleq	r0, r0, #8
 8011c7a:	3308      	addeq	r3, #8
 8011c7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011c80:	bf04      	itt	eq
 8011c82:	0100      	lsleq	r0, r0, #4
 8011c84:	3304      	addeq	r3, #4
 8011c86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011c8a:	bf04      	itt	eq
 8011c8c:	0080      	lsleq	r0, r0, #2
 8011c8e:	3302      	addeq	r3, #2
 8011c90:	2800      	cmp	r0, #0
 8011c92:	db05      	blt.n	8011ca0 <__hi0bits+0x38>
 8011c94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011c98:	f103 0301 	add.w	r3, r3, #1
 8011c9c:	bf08      	it	eq
 8011c9e:	2320      	moveq	r3, #32
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	4770      	bx	lr
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	e7e4      	b.n	8011c72 <__hi0bits+0xa>

08011ca8 <__lo0bits>:
 8011ca8:	6803      	ldr	r3, [r0, #0]
 8011caa:	f013 0207 	ands.w	r2, r3, #7
 8011cae:	4601      	mov	r1, r0
 8011cb0:	d00b      	beq.n	8011cca <__lo0bits+0x22>
 8011cb2:	07da      	lsls	r2, r3, #31
 8011cb4:	d424      	bmi.n	8011d00 <__lo0bits+0x58>
 8011cb6:	0798      	lsls	r0, r3, #30
 8011cb8:	bf49      	itett	mi
 8011cba:	085b      	lsrmi	r3, r3, #1
 8011cbc:	089b      	lsrpl	r3, r3, #2
 8011cbe:	2001      	movmi	r0, #1
 8011cc0:	600b      	strmi	r3, [r1, #0]
 8011cc2:	bf5c      	itt	pl
 8011cc4:	600b      	strpl	r3, [r1, #0]
 8011cc6:	2002      	movpl	r0, #2
 8011cc8:	4770      	bx	lr
 8011cca:	b298      	uxth	r0, r3
 8011ccc:	b9b0      	cbnz	r0, 8011cfc <__lo0bits+0x54>
 8011cce:	0c1b      	lsrs	r3, r3, #16
 8011cd0:	2010      	movs	r0, #16
 8011cd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011cd6:	bf04      	itt	eq
 8011cd8:	0a1b      	lsreq	r3, r3, #8
 8011cda:	3008      	addeq	r0, #8
 8011cdc:	071a      	lsls	r2, r3, #28
 8011cde:	bf04      	itt	eq
 8011ce0:	091b      	lsreq	r3, r3, #4
 8011ce2:	3004      	addeq	r0, #4
 8011ce4:	079a      	lsls	r2, r3, #30
 8011ce6:	bf04      	itt	eq
 8011ce8:	089b      	lsreq	r3, r3, #2
 8011cea:	3002      	addeq	r0, #2
 8011cec:	07da      	lsls	r2, r3, #31
 8011cee:	d403      	bmi.n	8011cf8 <__lo0bits+0x50>
 8011cf0:	085b      	lsrs	r3, r3, #1
 8011cf2:	f100 0001 	add.w	r0, r0, #1
 8011cf6:	d005      	beq.n	8011d04 <__lo0bits+0x5c>
 8011cf8:	600b      	str	r3, [r1, #0]
 8011cfa:	4770      	bx	lr
 8011cfc:	4610      	mov	r0, r2
 8011cfe:	e7e8      	b.n	8011cd2 <__lo0bits+0x2a>
 8011d00:	2000      	movs	r0, #0
 8011d02:	4770      	bx	lr
 8011d04:	2020      	movs	r0, #32
 8011d06:	4770      	bx	lr

08011d08 <__i2b>:
 8011d08:	b510      	push	{r4, lr}
 8011d0a:	460c      	mov	r4, r1
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	f7ff feff 	bl	8011b10 <_Balloc>
 8011d12:	4602      	mov	r2, r0
 8011d14:	b928      	cbnz	r0, 8011d22 <__i2b+0x1a>
 8011d16:	4b05      	ldr	r3, [pc, #20]	; (8011d2c <__i2b+0x24>)
 8011d18:	4805      	ldr	r0, [pc, #20]	; (8011d30 <__i2b+0x28>)
 8011d1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011d1e:	f7fd fd97 	bl	800f850 <__assert_func>
 8011d22:	2301      	movs	r3, #1
 8011d24:	6144      	str	r4, [r0, #20]
 8011d26:	6103      	str	r3, [r0, #16]
 8011d28:	bd10      	pop	{r4, pc}
 8011d2a:	bf00      	nop
 8011d2c:	08017501 	.word	0x08017501
 8011d30:	08017574 	.word	0x08017574

08011d34 <__multiply>:
 8011d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	4614      	mov	r4, r2
 8011d3a:	690a      	ldr	r2, [r1, #16]
 8011d3c:	6923      	ldr	r3, [r4, #16]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	bfb8      	it	lt
 8011d42:	460b      	movlt	r3, r1
 8011d44:	460d      	mov	r5, r1
 8011d46:	bfbc      	itt	lt
 8011d48:	4625      	movlt	r5, r4
 8011d4a:	461c      	movlt	r4, r3
 8011d4c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011d50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011d54:	68ab      	ldr	r3, [r5, #8]
 8011d56:	6869      	ldr	r1, [r5, #4]
 8011d58:	eb0a 0709 	add.w	r7, sl, r9
 8011d5c:	42bb      	cmp	r3, r7
 8011d5e:	b085      	sub	sp, #20
 8011d60:	bfb8      	it	lt
 8011d62:	3101      	addlt	r1, #1
 8011d64:	f7ff fed4 	bl	8011b10 <_Balloc>
 8011d68:	b930      	cbnz	r0, 8011d78 <__multiply+0x44>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	4b42      	ldr	r3, [pc, #264]	; (8011e78 <__multiply+0x144>)
 8011d6e:	4843      	ldr	r0, [pc, #268]	; (8011e7c <__multiply+0x148>)
 8011d70:	f240 115d 	movw	r1, #349	; 0x15d
 8011d74:	f7fd fd6c 	bl	800f850 <__assert_func>
 8011d78:	f100 0614 	add.w	r6, r0, #20
 8011d7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011d80:	4633      	mov	r3, r6
 8011d82:	2200      	movs	r2, #0
 8011d84:	4543      	cmp	r3, r8
 8011d86:	d31e      	bcc.n	8011dc6 <__multiply+0x92>
 8011d88:	f105 0c14 	add.w	ip, r5, #20
 8011d8c:	f104 0314 	add.w	r3, r4, #20
 8011d90:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011d94:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011d98:	9202      	str	r2, [sp, #8]
 8011d9a:	ebac 0205 	sub.w	r2, ip, r5
 8011d9e:	3a15      	subs	r2, #21
 8011da0:	f022 0203 	bic.w	r2, r2, #3
 8011da4:	3204      	adds	r2, #4
 8011da6:	f105 0115 	add.w	r1, r5, #21
 8011daa:	458c      	cmp	ip, r1
 8011dac:	bf38      	it	cc
 8011dae:	2204      	movcc	r2, #4
 8011db0:	9201      	str	r2, [sp, #4]
 8011db2:	9a02      	ldr	r2, [sp, #8]
 8011db4:	9303      	str	r3, [sp, #12]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d808      	bhi.n	8011dcc <__multiply+0x98>
 8011dba:	2f00      	cmp	r7, #0
 8011dbc:	dc55      	bgt.n	8011e6a <__multiply+0x136>
 8011dbe:	6107      	str	r7, [r0, #16]
 8011dc0:	b005      	add	sp, #20
 8011dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc6:	f843 2b04 	str.w	r2, [r3], #4
 8011dca:	e7db      	b.n	8011d84 <__multiply+0x50>
 8011dcc:	f8b3 a000 	ldrh.w	sl, [r3]
 8011dd0:	f1ba 0f00 	cmp.w	sl, #0
 8011dd4:	d020      	beq.n	8011e18 <__multiply+0xe4>
 8011dd6:	f105 0e14 	add.w	lr, r5, #20
 8011dda:	46b1      	mov	r9, r6
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011de2:	f8d9 b000 	ldr.w	fp, [r9]
 8011de6:	b2a1      	uxth	r1, r4
 8011de8:	fa1f fb8b 	uxth.w	fp, fp
 8011dec:	fb0a b101 	mla	r1, sl, r1, fp
 8011df0:	4411      	add	r1, r2
 8011df2:	f8d9 2000 	ldr.w	r2, [r9]
 8011df6:	0c24      	lsrs	r4, r4, #16
 8011df8:	0c12      	lsrs	r2, r2, #16
 8011dfa:	fb0a 2404 	mla	r4, sl, r4, r2
 8011dfe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011e02:	b289      	uxth	r1, r1
 8011e04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011e08:	45f4      	cmp	ip, lr
 8011e0a:	f849 1b04 	str.w	r1, [r9], #4
 8011e0e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011e12:	d8e4      	bhi.n	8011dde <__multiply+0xaa>
 8011e14:	9901      	ldr	r1, [sp, #4]
 8011e16:	5072      	str	r2, [r6, r1]
 8011e18:	9a03      	ldr	r2, [sp, #12]
 8011e1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011e1e:	3304      	adds	r3, #4
 8011e20:	f1b9 0f00 	cmp.w	r9, #0
 8011e24:	d01f      	beq.n	8011e66 <__multiply+0x132>
 8011e26:	6834      	ldr	r4, [r6, #0]
 8011e28:	f105 0114 	add.w	r1, r5, #20
 8011e2c:	46b6      	mov	lr, r6
 8011e2e:	f04f 0a00 	mov.w	sl, #0
 8011e32:	880a      	ldrh	r2, [r1, #0]
 8011e34:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011e38:	fb09 b202 	mla	r2, r9, r2, fp
 8011e3c:	4492      	add	sl, r2
 8011e3e:	b2a4      	uxth	r4, r4
 8011e40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011e44:	f84e 4b04 	str.w	r4, [lr], #4
 8011e48:	f851 4b04 	ldr.w	r4, [r1], #4
 8011e4c:	f8be 2000 	ldrh.w	r2, [lr]
 8011e50:	0c24      	lsrs	r4, r4, #16
 8011e52:	fb09 2404 	mla	r4, r9, r4, r2
 8011e56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011e5a:	458c      	cmp	ip, r1
 8011e5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011e60:	d8e7      	bhi.n	8011e32 <__multiply+0xfe>
 8011e62:	9a01      	ldr	r2, [sp, #4]
 8011e64:	50b4      	str	r4, [r6, r2]
 8011e66:	3604      	adds	r6, #4
 8011e68:	e7a3      	b.n	8011db2 <__multiply+0x7e>
 8011e6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d1a5      	bne.n	8011dbe <__multiply+0x8a>
 8011e72:	3f01      	subs	r7, #1
 8011e74:	e7a1      	b.n	8011dba <__multiply+0x86>
 8011e76:	bf00      	nop
 8011e78:	08017501 	.word	0x08017501
 8011e7c:	08017574 	.word	0x08017574

08011e80 <__pow5mult>:
 8011e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e84:	4615      	mov	r5, r2
 8011e86:	f012 0203 	ands.w	r2, r2, #3
 8011e8a:	4606      	mov	r6, r0
 8011e8c:	460f      	mov	r7, r1
 8011e8e:	d007      	beq.n	8011ea0 <__pow5mult+0x20>
 8011e90:	4c25      	ldr	r4, [pc, #148]	; (8011f28 <__pow5mult+0xa8>)
 8011e92:	3a01      	subs	r2, #1
 8011e94:	2300      	movs	r3, #0
 8011e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011e9a:	f7ff fe9b 	bl	8011bd4 <__multadd>
 8011e9e:	4607      	mov	r7, r0
 8011ea0:	10ad      	asrs	r5, r5, #2
 8011ea2:	d03d      	beq.n	8011f20 <__pow5mult+0xa0>
 8011ea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011ea6:	b97c      	cbnz	r4, 8011ec8 <__pow5mult+0x48>
 8011ea8:	2010      	movs	r0, #16
 8011eaa:	f7fd fd31 	bl	800f910 <malloc>
 8011eae:	4602      	mov	r2, r0
 8011eb0:	6270      	str	r0, [r6, #36]	; 0x24
 8011eb2:	b928      	cbnz	r0, 8011ec0 <__pow5mult+0x40>
 8011eb4:	4b1d      	ldr	r3, [pc, #116]	; (8011f2c <__pow5mult+0xac>)
 8011eb6:	481e      	ldr	r0, [pc, #120]	; (8011f30 <__pow5mult+0xb0>)
 8011eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011ebc:	f7fd fcc8 	bl	800f850 <__assert_func>
 8011ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ec4:	6004      	str	r4, [r0, #0]
 8011ec6:	60c4      	str	r4, [r0, #12]
 8011ec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ed0:	b94c      	cbnz	r4, 8011ee6 <__pow5mult+0x66>
 8011ed2:	f240 2171 	movw	r1, #625	; 0x271
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	f7ff ff16 	bl	8011d08 <__i2b>
 8011edc:	2300      	movs	r3, #0
 8011ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	6003      	str	r3, [r0, #0]
 8011ee6:	f04f 0900 	mov.w	r9, #0
 8011eea:	07eb      	lsls	r3, r5, #31
 8011eec:	d50a      	bpl.n	8011f04 <__pow5mult+0x84>
 8011eee:	4639      	mov	r1, r7
 8011ef0:	4622      	mov	r2, r4
 8011ef2:	4630      	mov	r0, r6
 8011ef4:	f7ff ff1e 	bl	8011d34 <__multiply>
 8011ef8:	4639      	mov	r1, r7
 8011efa:	4680      	mov	r8, r0
 8011efc:	4630      	mov	r0, r6
 8011efe:	f7ff fe47 	bl	8011b90 <_Bfree>
 8011f02:	4647      	mov	r7, r8
 8011f04:	106d      	asrs	r5, r5, #1
 8011f06:	d00b      	beq.n	8011f20 <__pow5mult+0xa0>
 8011f08:	6820      	ldr	r0, [r4, #0]
 8011f0a:	b938      	cbnz	r0, 8011f1c <__pow5mult+0x9c>
 8011f0c:	4622      	mov	r2, r4
 8011f0e:	4621      	mov	r1, r4
 8011f10:	4630      	mov	r0, r6
 8011f12:	f7ff ff0f 	bl	8011d34 <__multiply>
 8011f16:	6020      	str	r0, [r4, #0]
 8011f18:	f8c0 9000 	str.w	r9, [r0]
 8011f1c:	4604      	mov	r4, r0
 8011f1e:	e7e4      	b.n	8011eea <__pow5mult+0x6a>
 8011f20:	4638      	mov	r0, r7
 8011f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f26:	bf00      	nop
 8011f28:	080176c8 	.word	0x080176c8
 8011f2c:	0801748b 	.word	0x0801748b
 8011f30:	08017574 	.word	0x08017574

08011f34 <__lshift>:
 8011f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f38:	460c      	mov	r4, r1
 8011f3a:	6849      	ldr	r1, [r1, #4]
 8011f3c:	6923      	ldr	r3, [r4, #16]
 8011f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f42:	68a3      	ldr	r3, [r4, #8]
 8011f44:	4607      	mov	r7, r0
 8011f46:	4691      	mov	r9, r2
 8011f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f4c:	f108 0601 	add.w	r6, r8, #1
 8011f50:	42b3      	cmp	r3, r6
 8011f52:	db0b      	blt.n	8011f6c <__lshift+0x38>
 8011f54:	4638      	mov	r0, r7
 8011f56:	f7ff fddb 	bl	8011b10 <_Balloc>
 8011f5a:	4605      	mov	r5, r0
 8011f5c:	b948      	cbnz	r0, 8011f72 <__lshift+0x3e>
 8011f5e:	4602      	mov	r2, r0
 8011f60:	4b28      	ldr	r3, [pc, #160]	; (8012004 <__lshift+0xd0>)
 8011f62:	4829      	ldr	r0, [pc, #164]	; (8012008 <__lshift+0xd4>)
 8011f64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011f68:	f7fd fc72 	bl	800f850 <__assert_func>
 8011f6c:	3101      	adds	r1, #1
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	e7ee      	b.n	8011f50 <__lshift+0x1c>
 8011f72:	2300      	movs	r3, #0
 8011f74:	f100 0114 	add.w	r1, r0, #20
 8011f78:	f100 0210 	add.w	r2, r0, #16
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	4553      	cmp	r3, sl
 8011f80:	db33      	blt.n	8011fea <__lshift+0xb6>
 8011f82:	6920      	ldr	r0, [r4, #16]
 8011f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011f88:	f104 0314 	add.w	r3, r4, #20
 8011f8c:	f019 091f 	ands.w	r9, r9, #31
 8011f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011f98:	d02b      	beq.n	8011ff2 <__lshift+0xbe>
 8011f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8011f9e:	468a      	mov	sl, r1
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	6818      	ldr	r0, [r3, #0]
 8011fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8011fa8:	4302      	orrs	r2, r0
 8011faa:	f84a 2b04 	str.w	r2, [sl], #4
 8011fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fb2:	459c      	cmp	ip, r3
 8011fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8011fb8:	d8f3      	bhi.n	8011fa2 <__lshift+0x6e>
 8011fba:	ebac 0304 	sub.w	r3, ip, r4
 8011fbe:	3b15      	subs	r3, #21
 8011fc0:	f023 0303 	bic.w	r3, r3, #3
 8011fc4:	3304      	adds	r3, #4
 8011fc6:	f104 0015 	add.w	r0, r4, #21
 8011fca:	4584      	cmp	ip, r0
 8011fcc:	bf38      	it	cc
 8011fce:	2304      	movcc	r3, #4
 8011fd0:	50ca      	str	r2, [r1, r3]
 8011fd2:	b10a      	cbz	r2, 8011fd8 <__lshift+0xa4>
 8011fd4:	f108 0602 	add.w	r6, r8, #2
 8011fd8:	3e01      	subs	r6, #1
 8011fda:	4638      	mov	r0, r7
 8011fdc:	612e      	str	r6, [r5, #16]
 8011fde:	4621      	mov	r1, r4
 8011fe0:	f7ff fdd6 	bl	8011b90 <_Bfree>
 8011fe4:	4628      	mov	r0, r5
 8011fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8011fee:	3301      	adds	r3, #1
 8011ff0:	e7c5      	b.n	8011f7e <__lshift+0x4a>
 8011ff2:	3904      	subs	r1, #4
 8011ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ffc:	459c      	cmp	ip, r3
 8011ffe:	d8f9      	bhi.n	8011ff4 <__lshift+0xc0>
 8012000:	e7ea      	b.n	8011fd8 <__lshift+0xa4>
 8012002:	bf00      	nop
 8012004:	08017501 	.word	0x08017501
 8012008:	08017574 	.word	0x08017574

0801200c <__mcmp>:
 801200c:	b530      	push	{r4, r5, lr}
 801200e:	6902      	ldr	r2, [r0, #16]
 8012010:	690c      	ldr	r4, [r1, #16]
 8012012:	1b12      	subs	r2, r2, r4
 8012014:	d10e      	bne.n	8012034 <__mcmp+0x28>
 8012016:	f100 0314 	add.w	r3, r0, #20
 801201a:	3114      	adds	r1, #20
 801201c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012020:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012024:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012028:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801202c:	42a5      	cmp	r5, r4
 801202e:	d003      	beq.n	8012038 <__mcmp+0x2c>
 8012030:	d305      	bcc.n	801203e <__mcmp+0x32>
 8012032:	2201      	movs	r2, #1
 8012034:	4610      	mov	r0, r2
 8012036:	bd30      	pop	{r4, r5, pc}
 8012038:	4283      	cmp	r3, r0
 801203a:	d3f3      	bcc.n	8012024 <__mcmp+0x18>
 801203c:	e7fa      	b.n	8012034 <__mcmp+0x28>
 801203e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012042:	e7f7      	b.n	8012034 <__mcmp+0x28>

08012044 <__mdiff>:
 8012044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012048:	460c      	mov	r4, r1
 801204a:	4606      	mov	r6, r0
 801204c:	4611      	mov	r1, r2
 801204e:	4620      	mov	r0, r4
 8012050:	4617      	mov	r7, r2
 8012052:	f7ff ffdb 	bl	801200c <__mcmp>
 8012056:	1e05      	subs	r5, r0, #0
 8012058:	d110      	bne.n	801207c <__mdiff+0x38>
 801205a:	4629      	mov	r1, r5
 801205c:	4630      	mov	r0, r6
 801205e:	f7ff fd57 	bl	8011b10 <_Balloc>
 8012062:	b930      	cbnz	r0, 8012072 <__mdiff+0x2e>
 8012064:	4b39      	ldr	r3, [pc, #228]	; (801214c <__mdiff+0x108>)
 8012066:	4602      	mov	r2, r0
 8012068:	f240 2132 	movw	r1, #562	; 0x232
 801206c:	4838      	ldr	r0, [pc, #224]	; (8012150 <__mdiff+0x10c>)
 801206e:	f7fd fbef 	bl	800f850 <__assert_func>
 8012072:	2301      	movs	r3, #1
 8012074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801207c:	bfa4      	itt	ge
 801207e:	463b      	movge	r3, r7
 8012080:	4627      	movge	r7, r4
 8012082:	4630      	mov	r0, r6
 8012084:	6879      	ldr	r1, [r7, #4]
 8012086:	bfa6      	itte	ge
 8012088:	461c      	movge	r4, r3
 801208a:	2500      	movge	r5, #0
 801208c:	2501      	movlt	r5, #1
 801208e:	f7ff fd3f 	bl	8011b10 <_Balloc>
 8012092:	b920      	cbnz	r0, 801209e <__mdiff+0x5a>
 8012094:	4b2d      	ldr	r3, [pc, #180]	; (801214c <__mdiff+0x108>)
 8012096:	4602      	mov	r2, r0
 8012098:	f44f 7110 	mov.w	r1, #576	; 0x240
 801209c:	e7e6      	b.n	801206c <__mdiff+0x28>
 801209e:	693e      	ldr	r6, [r7, #16]
 80120a0:	60c5      	str	r5, [r0, #12]
 80120a2:	6925      	ldr	r5, [r4, #16]
 80120a4:	f107 0114 	add.w	r1, r7, #20
 80120a8:	f104 0914 	add.w	r9, r4, #20
 80120ac:	f100 0e14 	add.w	lr, r0, #20
 80120b0:	f107 0210 	add.w	r2, r7, #16
 80120b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80120b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80120bc:	46f2      	mov	sl, lr
 80120be:	2700      	movs	r7, #0
 80120c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80120c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80120c8:	fa1f f883 	uxth.w	r8, r3
 80120cc:	fa17 f78b 	uxtah	r7, r7, fp
 80120d0:	0c1b      	lsrs	r3, r3, #16
 80120d2:	eba7 0808 	sub.w	r8, r7, r8
 80120d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80120da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80120de:	fa1f f888 	uxth.w	r8, r8
 80120e2:	141f      	asrs	r7, r3, #16
 80120e4:	454d      	cmp	r5, r9
 80120e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80120ea:	f84a 3b04 	str.w	r3, [sl], #4
 80120ee:	d8e7      	bhi.n	80120c0 <__mdiff+0x7c>
 80120f0:	1b2b      	subs	r3, r5, r4
 80120f2:	3b15      	subs	r3, #21
 80120f4:	f023 0303 	bic.w	r3, r3, #3
 80120f8:	3304      	adds	r3, #4
 80120fa:	3415      	adds	r4, #21
 80120fc:	42a5      	cmp	r5, r4
 80120fe:	bf38      	it	cc
 8012100:	2304      	movcc	r3, #4
 8012102:	4419      	add	r1, r3
 8012104:	4473      	add	r3, lr
 8012106:	469e      	mov	lr, r3
 8012108:	460d      	mov	r5, r1
 801210a:	4565      	cmp	r5, ip
 801210c:	d30e      	bcc.n	801212c <__mdiff+0xe8>
 801210e:	f10c 0203 	add.w	r2, ip, #3
 8012112:	1a52      	subs	r2, r2, r1
 8012114:	f022 0203 	bic.w	r2, r2, #3
 8012118:	3903      	subs	r1, #3
 801211a:	458c      	cmp	ip, r1
 801211c:	bf38      	it	cc
 801211e:	2200      	movcc	r2, #0
 8012120:	441a      	add	r2, r3
 8012122:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012126:	b17b      	cbz	r3, 8012148 <__mdiff+0x104>
 8012128:	6106      	str	r6, [r0, #16]
 801212a:	e7a5      	b.n	8012078 <__mdiff+0x34>
 801212c:	f855 8b04 	ldr.w	r8, [r5], #4
 8012130:	fa17 f488 	uxtah	r4, r7, r8
 8012134:	1422      	asrs	r2, r4, #16
 8012136:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801213a:	b2a4      	uxth	r4, r4
 801213c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012140:	f84e 4b04 	str.w	r4, [lr], #4
 8012144:	1417      	asrs	r7, r2, #16
 8012146:	e7e0      	b.n	801210a <__mdiff+0xc6>
 8012148:	3e01      	subs	r6, #1
 801214a:	e7ea      	b.n	8012122 <__mdiff+0xde>
 801214c:	08017501 	.word	0x08017501
 8012150:	08017574 	.word	0x08017574

08012154 <__d2b>:
 8012154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012158:	4689      	mov	r9, r1
 801215a:	2101      	movs	r1, #1
 801215c:	ec57 6b10 	vmov	r6, r7, d0
 8012160:	4690      	mov	r8, r2
 8012162:	f7ff fcd5 	bl	8011b10 <_Balloc>
 8012166:	4604      	mov	r4, r0
 8012168:	b930      	cbnz	r0, 8012178 <__d2b+0x24>
 801216a:	4602      	mov	r2, r0
 801216c:	4b25      	ldr	r3, [pc, #148]	; (8012204 <__d2b+0xb0>)
 801216e:	4826      	ldr	r0, [pc, #152]	; (8012208 <__d2b+0xb4>)
 8012170:	f240 310a 	movw	r1, #778	; 0x30a
 8012174:	f7fd fb6c 	bl	800f850 <__assert_func>
 8012178:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801217c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012180:	bb35      	cbnz	r5, 80121d0 <__d2b+0x7c>
 8012182:	2e00      	cmp	r6, #0
 8012184:	9301      	str	r3, [sp, #4]
 8012186:	d028      	beq.n	80121da <__d2b+0x86>
 8012188:	4668      	mov	r0, sp
 801218a:	9600      	str	r6, [sp, #0]
 801218c:	f7ff fd8c 	bl	8011ca8 <__lo0bits>
 8012190:	9900      	ldr	r1, [sp, #0]
 8012192:	b300      	cbz	r0, 80121d6 <__d2b+0x82>
 8012194:	9a01      	ldr	r2, [sp, #4]
 8012196:	f1c0 0320 	rsb	r3, r0, #32
 801219a:	fa02 f303 	lsl.w	r3, r2, r3
 801219e:	430b      	orrs	r3, r1
 80121a0:	40c2      	lsrs	r2, r0
 80121a2:	6163      	str	r3, [r4, #20]
 80121a4:	9201      	str	r2, [sp, #4]
 80121a6:	9b01      	ldr	r3, [sp, #4]
 80121a8:	61a3      	str	r3, [r4, #24]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	bf14      	ite	ne
 80121ae:	2202      	movne	r2, #2
 80121b0:	2201      	moveq	r2, #1
 80121b2:	6122      	str	r2, [r4, #16]
 80121b4:	b1d5      	cbz	r5, 80121ec <__d2b+0x98>
 80121b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80121ba:	4405      	add	r5, r0
 80121bc:	f8c9 5000 	str.w	r5, [r9]
 80121c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80121c4:	f8c8 0000 	str.w	r0, [r8]
 80121c8:	4620      	mov	r0, r4
 80121ca:	b003      	add	sp, #12
 80121cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80121d4:	e7d5      	b.n	8012182 <__d2b+0x2e>
 80121d6:	6161      	str	r1, [r4, #20]
 80121d8:	e7e5      	b.n	80121a6 <__d2b+0x52>
 80121da:	a801      	add	r0, sp, #4
 80121dc:	f7ff fd64 	bl	8011ca8 <__lo0bits>
 80121e0:	9b01      	ldr	r3, [sp, #4]
 80121e2:	6163      	str	r3, [r4, #20]
 80121e4:	2201      	movs	r2, #1
 80121e6:	6122      	str	r2, [r4, #16]
 80121e8:	3020      	adds	r0, #32
 80121ea:	e7e3      	b.n	80121b4 <__d2b+0x60>
 80121ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80121f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80121f4:	f8c9 0000 	str.w	r0, [r9]
 80121f8:	6918      	ldr	r0, [r3, #16]
 80121fa:	f7ff fd35 	bl	8011c68 <__hi0bits>
 80121fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012202:	e7df      	b.n	80121c4 <__d2b+0x70>
 8012204:	08017501 	.word	0x08017501
 8012208:	08017574 	.word	0x08017574

0801220c <_calloc_r>:
 801220c:	b513      	push	{r0, r1, r4, lr}
 801220e:	434a      	muls	r2, r1
 8012210:	4611      	mov	r1, r2
 8012212:	9201      	str	r2, [sp, #4]
 8012214:	f7fd fc0c 	bl	800fa30 <_malloc_r>
 8012218:	4604      	mov	r4, r0
 801221a:	b118      	cbz	r0, 8012224 <_calloc_r+0x18>
 801221c:	9a01      	ldr	r2, [sp, #4]
 801221e:	2100      	movs	r1, #0
 8012220:	f7fd fbae 	bl	800f980 <memset>
 8012224:	4620      	mov	r0, r4
 8012226:	b002      	add	sp, #8
 8012228:	bd10      	pop	{r4, pc}

0801222a <_realloc_r>:
 801222a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801222c:	4607      	mov	r7, r0
 801222e:	4614      	mov	r4, r2
 8012230:	460e      	mov	r6, r1
 8012232:	b921      	cbnz	r1, 801223e <_realloc_r+0x14>
 8012234:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012238:	4611      	mov	r1, r2
 801223a:	f7fd bbf9 	b.w	800fa30 <_malloc_r>
 801223e:	b922      	cbnz	r2, 801224a <_realloc_r+0x20>
 8012240:	f7fd fba6 	bl	800f990 <_free_r>
 8012244:	4625      	mov	r5, r4
 8012246:	4628      	mov	r0, r5
 8012248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801224a:	f000 fa1b 	bl	8012684 <_malloc_usable_size_r>
 801224e:	42a0      	cmp	r0, r4
 8012250:	d20f      	bcs.n	8012272 <_realloc_r+0x48>
 8012252:	4621      	mov	r1, r4
 8012254:	4638      	mov	r0, r7
 8012256:	f7fd fbeb 	bl	800fa30 <_malloc_r>
 801225a:	4605      	mov	r5, r0
 801225c:	2800      	cmp	r0, #0
 801225e:	d0f2      	beq.n	8012246 <_realloc_r+0x1c>
 8012260:	4631      	mov	r1, r6
 8012262:	4622      	mov	r2, r4
 8012264:	f7fd fb64 	bl	800f930 <memcpy>
 8012268:	4631      	mov	r1, r6
 801226a:	4638      	mov	r0, r7
 801226c:	f7fd fb90 	bl	800f990 <_free_r>
 8012270:	e7e9      	b.n	8012246 <_realloc_r+0x1c>
 8012272:	4635      	mov	r5, r6
 8012274:	e7e7      	b.n	8012246 <_realloc_r+0x1c>

08012276 <__ssputs_r>:
 8012276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801227a:	688e      	ldr	r6, [r1, #8]
 801227c:	429e      	cmp	r6, r3
 801227e:	4682      	mov	sl, r0
 8012280:	460c      	mov	r4, r1
 8012282:	4690      	mov	r8, r2
 8012284:	461f      	mov	r7, r3
 8012286:	d838      	bhi.n	80122fa <__ssputs_r+0x84>
 8012288:	898a      	ldrh	r2, [r1, #12]
 801228a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801228e:	d032      	beq.n	80122f6 <__ssputs_r+0x80>
 8012290:	6825      	ldr	r5, [r4, #0]
 8012292:	6909      	ldr	r1, [r1, #16]
 8012294:	eba5 0901 	sub.w	r9, r5, r1
 8012298:	6965      	ldr	r5, [r4, #20]
 801229a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801229e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80122a2:	3301      	adds	r3, #1
 80122a4:	444b      	add	r3, r9
 80122a6:	106d      	asrs	r5, r5, #1
 80122a8:	429d      	cmp	r5, r3
 80122aa:	bf38      	it	cc
 80122ac:	461d      	movcc	r5, r3
 80122ae:	0553      	lsls	r3, r2, #21
 80122b0:	d531      	bpl.n	8012316 <__ssputs_r+0xa0>
 80122b2:	4629      	mov	r1, r5
 80122b4:	f7fd fbbc 	bl	800fa30 <_malloc_r>
 80122b8:	4606      	mov	r6, r0
 80122ba:	b950      	cbnz	r0, 80122d2 <__ssputs_r+0x5c>
 80122bc:	230c      	movs	r3, #12
 80122be:	f8ca 3000 	str.w	r3, [sl]
 80122c2:	89a3      	ldrh	r3, [r4, #12]
 80122c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122c8:	81a3      	strh	r3, [r4, #12]
 80122ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122d2:	6921      	ldr	r1, [r4, #16]
 80122d4:	464a      	mov	r2, r9
 80122d6:	f7fd fb2b 	bl	800f930 <memcpy>
 80122da:	89a3      	ldrh	r3, [r4, #12]
 80122dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80122e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122e4:	81a3      	strh	r3, [r4, #12]
 80122e6:	6126      	str	r6, [r4, #16]
 80122e8:	6165      	str	r5, [r4, #20]
 80122ea:	444e      	add	r6, r9
 80122ec:	eba5 0509 	sub.w	r5, r5, r9
 80122f0:	6026      	str	r6, [r4, #0]
 80122f2:	60a5      	str	r5, [r4, #8]
 80122f4:	463e      	mov	r6, r7
 80122f6:	42be      	cmp	r6, r7
 80122f8:	d900      	bls.n	80122fc <__ssputs_r+0x86>
 80122fa:	463e      	mov	r6, r7
 80122fc:	4632      	mov	r2, r6
 80122fe:	6820      	ldr	r0, [r4, #0]
 8012300:	4641      	mov	r1, r8
 8012302:	f7fd fb23 	bl	800f94c <memmove>
 8012306:	68a3      	ldr	r3, [r4, #8]
 8012308:	6822      	ldr	r2, [r4, #0]
 801230a:	1b9b      	subs	r3, r3, r6
 801230c:	4432      	add	r2, r6
 801230e:	60a3      	str	r3, [r4, #8]
 8012310:	6022      	str	r2, [r4, #0]
 8012312:	2000      	movs	r0, #0
 8012314:	e7db      	b.n	80122ce <__ssputs_r+0x58>
 8012316:	462a      	mov	r2, r5
 8012318:	f7ff ff87 	bl	801222a <_realloc_r>
 801231c:	4606      	mov	r6, r0
 801231e:	2800      	cmp	r0, #0
 8012320:	d1e1      	bne.n	80122e6 <__ssputs_r+0x70>
 8012322:	6921      	ldr	r1, [r4, #16]
 8012324:	4650      	mov	r0, sl
 8012326:	f7fd fb33 	bl	800f990 <_free_r>
 801232a:	e7c7      	b.n	80122bc <__ssputs_r+0x46>

0801232c <_svfiprintf_r>:
 801232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012330:	4698      	mov	r8, r3
 8012332:	898b      	ldrh	r3, [r1, #12]
 8012334:	061b      	lsls	r3, r3, #24
 8012336:	b09d      	sub	sp, #116	; 0x74
 8012338:	4607      	mov	r7, r0
 801233a:	460d      	mov	r5, r1
 801233c:	4614      	mov	r4, r2
 801233e:	d50e      	bpl.n	801235e <_svfiprintf_r+0x32>
 8012340:	690b      	ldr	r3, [r1, #16]
 8012342:	b963      	cbnz	r3, 801235e <_svfiprintf_r+0x32>
 8012344:	2140      	movs	r1, #64	; 0x40
 8012346:	f7fd fb73 	bl	800fa30 <_malloc_r>
 801234a:	6028      	str	r0, [r5, #0]
 801234c:	6128      	str	r0, [r5, #16]
 801234e:	b920      	cbnz	r0, 801235a <_svfiprintf_r+0x2e>
 8012350:	230c      	movs	r3, #12
 8012352:	603b      	str	r3, [r7, #0]
 8012354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012358:	e0d1      	b.n	80124fe <_svfiprintf_r+0x1d2>
 801235a:	2340      	movs	r3, #64	; 0x40
 801235c:	616b      	str	r3, [r5, #20]
 801235e:	2300      	movs	r3, #0
 8012360:	9309      	str	r3, [sp, #36]	; 0x24
 8012362:	2320      	movs	r3, #32
 8012364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012368:	f8cd 800c 	str.w	r8, [sp, #12]
 801236c:	2330      	movs	r3, #48	; 0x30
 801236e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012518 <_svfiprintf_r+0x1ec>
 8012372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012376:	f04f 0901 	mov.w	r9, #1
 801237a:	4623      	mov	r3, r4
 801237c:	469a      	mov	sl, r3
 801237e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012382:	b10a      	cbz	r2, 8012388 <_svfiprintf_r+0x5c>
 8012384:	2a25      	cmp	r2, #37	; 0x25
 8012386:	d1f9      	bne.n	801237c <_svfiprintf_r+0x50>
 8012388:	ebba 0b04 	subs.w	fp, sl, r4
 801238c:	d00b      	beq.n	80123a6 <_svfiprintf_r+0x7a>
 801238e:	465b      	mov	r3, fp
 8012390:	4622      	mov	r2, r4
 8012392:	4629      	mov	r1, r5
 8012394:	4638      	mov	r0, r7
 8012396:	f7ff ff6e 	bl	8012276 <__ssputs_r>
 801239a:	3001      	adds	r0, #1
 801239c:	f000 80aa 	beq.w	80124f4 <_svfiprintf_r+0x1c8>
 80123a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123a2:	445a      	add	r2, fp
 80123a4:	9209      	str	r2, [sp, #36]	; 0x24
 80123a6:	f89a 3000 	ldrb.w	r3, [sl]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f000 80a2 	beq.w	80124f4 <_svfiprintf_r+0x1c8>
 80123b0:	2300      	movs	r3, #0
 80123b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123ba:	f10a 0a01 	add.w	sl, sl, #1
 80123be:	9304      	str	r3, [sp, #16]
 80123c0:	9307      	str	r3, [sp, #28]
 80123c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123c6:	931a      	str	r3, [sp, #104]	; 0x68
 80123c8:	4654      	mov	r4, sl
 80123ca:	2205      	movs	r2, #5
 80123cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123d0:	4851      	ldr	r0, [pc, #324]	; (8012518 <_svfiprintf_r+0x1ec>)
 80123d2:	f7ed ff1d 	bl	8000210 <memchr>
 80123d6:	9a04      	ldr	r2, [sp, #16]
 80123d8:	b9d8      	cbnz	r0, 8012412 <_svfiprintf_r+0xe6>
 80123da:	06d0      	lsls	r0, r2, #27
 80123dc:	bf44      	itt	mi
 80123de:	2320      	movmi	r3, #32
 80123e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123e4:	0711      	lsls	r1, r2, #28
 80123e6:	bf44      	itt	mi
 80123e8:	232b      	movmi	r3, #43	; 0x2b
 80123ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123ee:	f89a 3000 	ldrb.w	r3, [sl]
 80123f2:	2b2a      	cmp	r3, #42	; 0x2a
 80123f4:	d015      	beq.n	8012422 <_svfiprintf_r+0xf6>
 80123f6:	9a07      	ldr	r2, [sp, #28]
 80123f8:	4654      	mov	r4, sl
 80123fa:	2000      	movs	r0, #0
 80123fc:	f04f 0c0a 	mov.w	ip, #10
 8012400:	4621      	mov	r1, r4
 8012402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012406:	3b30      	subs	r3, #48	; 0x30
 8012408:	2b09      	cmp	r3, #9
 801240a:	d94e      	bls.n	80124aa <_svfiprintf_r+0x17e>
 801240c:	b1b0      	cbz	r0, 801243c <_svfiprintf_r+0x110>
 801240e:	9207      	str	r2, [sp, #28]
 8012410:	e014      	b.n	801243c <_svfiprintf_r+0x110>
 8012412:	eba0 0308 	sub.w	r3, r0, r8
 8012416:	fa09 f303 	lsl.w	r3, r9, r3
 801241a:	4313      	orrs	r3, r2
 801241c:	9304      	str	r3, [sp, #16]
 801241e:	46a2      	mov	sl, r4
 8012420:	e7d2      	b.n	80123c8 <_svfiprintf_r+0x9c>
 8012422:	9b03      	ldr	r3, [sp, #12]
 8012424:	1d19      	adds	r1, r3, #4
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	9103      	str	r1, [sp, #12]
 801242a:	2b00      	cmp	r3, #0
 801242c:	bfbb      	ittet	lt
 801242e:	425b      	neglt	r3, r3
 8012430:	f042 0202 	orrlt.w	r2, r2, #2
 8012434:	9307      	strge	r3, [sp, #28]
 8012436:	9307      	strlt	r3, [sp, #28]
 8012438:	bfb8      	it	lt
 801243a:	9204      	strlt	r2, [sp, #16]
 801243c:	7823      	ldrb	r3, [r4, #0]
 801243e:	2b2e      	cmp	r3, #46	; 0x2e
 8012440:	d10c      	bne.n	801245c <_svfiprintf_r+0x130>
 8012442:	7863      	ldrb	r3, [r4, #1]
 8012444:	2b2a      	cmp	r3, #42	; 0x2a
 8012446:	d135      	bne.n	80124b4 <_svfiprintf_r+0x188>
 8012448:	9b03      	ldr	r3, [sp, #12]
 801244a:	1d1a      	adds	r2, r3, #4
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	9203      	str	r2, [sp, #12]
 8012450:	2b00      	cmp	r3, #0
 8012452:	bfb8      	it	lt
 8012454:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012458:	3402      	adds	r4, #2
 801245a:	9305      	str	r3, [sp, #20]
 801245c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012528 <_svfiprintf_r+0x1fc>
 8012460:	7821      	ldrb	r1, [r4, #0]
 8012462:	2203      	movs	r2, #3
 8012464:	4650      	mov	r0, sl
 8012466:	f7ed fed3 	bl	8000210 <memchr>
 801246a:	b140      	cbz	r0, 801247e <_svfiprintf_r+0x152>
 801246c:	2340      	movs	r3, #64	; 0x40
 801246e:	eba0 000a 	sub.w	r0, r0, sl
 8012472:	fa03 f000 	lsl.w	r0, r3, r0
 8012476:	9b04      	ldr	r3, [sp, #16]
 8012478:	4303      	orrs	r3, r0
 801247a:	3401      	adds	r4, #1
 801247c:	9304      	str	r3, [sp, #16]
 801247e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012482:	4826      	ldr	r0, [pc, #152]	; (801251c <_svfiprintf_r+0x1f0>)
 8012484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012488:	2206      	movs	r2, #6
 801248a:	f7ed fec1 	bl	8000210 <memchr>
 801248e:	2800      	cmp	r0, #0
 8012490:	d038      	beq.n	8012504 <_svfiprintf_r+0x1d8>
 8012492:	4b23      	ldr	r3, [pc, #140]	; (8012520 <_svfiprintf_r+0x1f4>)
 8012494:	bb1b      	cbnz	r3, 80124de <_svfiprintf_r+0x1b2>
 8012496:	9b03      	ldr	r3, [sp, #12]
 8012498:	3307      	adds	r3, #7
 801249a:	f023 0307 	bic.w	r3, r3, #7
 801249e:	3308      	adds	r3, #8
 80124a0:	9303      	str	r3, [sp, #12]
 80124a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124a4:	4433      	add	r3, r6
 80124a6:	9309      	str	r3, [sp, #36]	; 0x24
 80124a8:	e767      	b.n	801237a <_svfiprintf_r+0x4e>
 80124aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80124ae:	460c      	mov	r4, r1
 80124b0:	2001      	movs	r0, #1
 80124b2:	e7a5      	b.n	8012400 <_svfiprintf_r+0xd4>
 80124b4:	2300      	movs	r3, #0
 80124b6:	3401      	adds	r4, #1
 80124b8:	9305      	str	r3, [sp, #20]
 80124ba:	4619      	mov	r1, r3
 80124bc:	f04f 0c0a 	mov.w	ip, #10
 80124c0:	4620      	mov	r0, r4
 80124c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124c6:	3a30      	subs	r2, #48	; 0x30
 80124c8:	2a09      	cmp	r2, #9
 80124ca:	d903      	bls.n	80124d4 <_svfiprintf_r+0x1a8>
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d0c5      	beq.n	801245c <_svfiprintf_r+0x130>
 80124d0:	9105      	str	r1, [sp, #20]
 80124d2:	e7c3      	b.n	801245c <_svfiprintf_r+0x130>
 80124d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80124d8:	4604      	mov	r4, r0
 80124da:	2301      	movs	r3, #1
 80124dc:	e7f0      	b.n	80124c0 <_svfiprintf_r+0x194>
 80124de:	ab03      	add	r3, sp, #12
 80124e0:	9300      	str	r3, [sp, #0]
 80124e2:	462a      	mov	r2, r5
 80124e4:	4b0f      	ldr	r3, [pc, #60]	; (8012524 <_svfiprintf_r+0x1f8>)
 80124e6:	a904      	add	r1, sp, #16
 80124e8:	4638      	mov	r0, r7
 80124ea:	f7fd fcf5 	bl	800fed8 <_printf_float>
 80124ee:	1c42      	adds	r2, r0, #1
 80124f0:	4606      	mov	r6, r0
 80124f2:	d1d6      	bne.n	80124a2 <_svfiprintf_r+0x176>
 80124f4:	89ab      	ldrh	r3, [r5, #12]
 80124f6:	065b      	lsls	r3, r3, #25
 80124f8:	f53f af2c 	bmi.w	8012354 <_svfiprintf_r+0x28>
 80124fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124fe:	b01d      	add	sp, #116	; 0x74
 8012500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012504:	ab03      	add	r3, sp, #12
 8012506:	9300      	str	r3, [sp, #0]
 8012508:	462a      	mov	r2, r5
 801250a:	4b06      	ldr	r3, [pc, #24]	; (8012524 <_svfiprintf_r+0x1f8>)
 801250c:	a904      	add	r1, sp, #16
 801250e:	4638      	mov	r0, r7
 8012510:	f7fd ff86 	bl	8010420 <_printf_i>
 8012514:	e7eb      	b.n	80124ee <_svfiprintf_r+0x1c2>
 8012516:	bf00      	nop
 8012518:	08017338 	.word	0x08017338
 801251c:	08017342 	.word	0x08017342
 8012520:	0800fed9 	.word	0x0800fed9
 8012524:	08012277 	.word	0x08012277
 8012528:	0801733e 	.word	0x0801733e

0801252c <__sread>:
 801252c:	b510      	push	{r4, lr}
 801252e:	460c      	mov	r4, r1
 8012530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012534:	f000 f8ae 	bl	8012694 <_read_r>
 8012538:	2800      	cmp	r0, #0
 801253a:	bfab      	itete	ge
 801253c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801253e:	89a3      	ldrhlt	r3, [r4, #12]
 8012540:	181b      	addge	r3, r3, r0
 8012542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012546:	bfac      	ite	ge
 8012548:	6563      	strge	r3, [r4, #84]	; 0x54
 801254a:	81a3      	strhlt	r3, [r4, #12]
 801254c:	bd10      	pop	{r4, pc}

0801254e <__swrite>:
 801254e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012552:	461f      	mov	r7, r3
 8012554:	898b      	ldrh	r3, [r1, #12]
 8012556:	05db      	lsls	r3, r3, #23
 8012558:	4605      	mov	r5, r0
 801255a:	460c      	mov	r4, r1
 801255c:	4616      	mov	r6, r2
 801255e:	d505      	bpl.n	801256c <__swrite+0x1e>
 8012560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012564:	2302      	movs	r3, #2
 8012566:	2200      	movs	r2, #0
 8012568:	f000 f868 	bl	801263c <_lseek_r>
 801256c:	89a3      	ldrh	r3, [r4, #12]
 801256e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012576:	81a3      	strh	r3, [r4, #12]
 8012578:	4632      	mov	r2, r6
 801257a:	463b      	mov	r3, r7
 801257c:	4628      	mov	r0, r5
 801257e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012582:	f000 b817 	b.w	80125b4 <_write_r>

08012586 <__sseek>:
 8012586:	b510      	push	{r4, lr}
 8012588:	460c      	mov	r4, r1
 801258a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801258e:	f000 f855 	bl	801263c <_lseek_r>
 8012592:	1c43      	adds	r3, r0, #1
 8012594:	89a3      	ldrh	r3, [r4, #12]
 8012596:	bf15      	itete	ne
 8012598:	6560      	strne	r0, [r4, #84]	; 0x54
 801259a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801259e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80125a2:	81a3      	strheq	r3, [r4, #12]
 80125a4:	bf18      	it	ne
 80125a6:	81a3      	strhne	r3, [r4, #12]
 80125a8:	bd10      	pop	{r4, pc}

080125aa <__sclose>:
 80125aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125ae:	f000 b813 	b.w	80125d8 <_close_r>
	...

080125b4 <_write_r>:
 80125b4:	b538      	push	{r3, r4, r5, lr}
 80125b6:	4d07      	ldr	r5, [pc, #28]	; (80125d4 <_write_r+0x20>)
 80125b8:	4604      	mov	r4, r0
 80125ba:	4608      	mov	r0, r1
 80125bc:	4611      	mov	r1, r2
 80125be:	2200      	movs	r2, #0
 80125c0:	602a      	str	r2, [r5, #0]
 80125c2:	461a      	mov	r2, r3
 80125c4:	f7ef fd79 	bl	80020ba <_write>
 80125c8:	1c43      	adds	r3, r0, #1
 80125ca:	d102      	bne.n	80125d2 <_write_r+0x1e>
 80125cc:	682b      	ldr	r3, [r5, #0]
 80125ce:	b103      	cbz	r3, 80125d2 <_write_r+0x1e>
 80125d0:	6023      	str	r3, [r4, #0]
 80125d2:	bd38      	pop	{r3, r4, r5, pc}
 80125d4:	2003ee80 	.word	0x2003ee80

080125d8 <_close_r>:
 80125d8:	b538      	push	{r3, r4, r5, lr}
 80125da:	4d06      	ldr	r5, [pc, #24]	; (80125f4 <_close_r+0x1c>)
 80125dc:	2300      	movs	r3, #0
 80125de:	4604      	mov	r4, r0
 80125e0:	4608      	mov	r0, r1
 80125e2:	602b      	str	r3, [r5, #0]
 80125e4:	f7ef fd85 	bl	80020f2 <_close>
 80125e8:	1c43      	adds	r3, r0, #1
 80125ea:	d102      	bne.n	80125f2 <_close_r+0x1a>
 80125ec:	682b      	ldr	r3, [r5, #0]
 80125ee:	b103      	cbz	r3, 80125f2 <_close_r+0x1a>
 80125f0:	6023      	str	r3, [r4, #0]
 80125f2:	bd38      	pop	{r3, r4, r5, pc}
 80125f4:	2003ee80 	.word	0x2003ee80

080125f8 <_fstat_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	4d07      	ldr	r5, [pc, #28]	; (8012618 <_fstat_r+0x20>)
 80125fc:	2300      	movs	r3, #0
 80125fe:	4604      	mov	r4, r0
 8012600:	4608      	mov	r0, r1
 8012602:	4611      	mov	r1, r2
 8012604:	602b      	str	r3, [r5, #0]
 8012606:	f7ef fd80 	bl	800210a <_fstat>
 801260a:	1c43      	adds	r3, r0, #1
 801260c:	d102      	bne.n	8012614 <_fstat_r+0x1c>
 801260e:	682b      	ldr	r3, [r5, #0]
 8012610:	b103      	cbz	r3, 8012614 <_fstat_r+0x1c>
 8012612:	6023      	str	r3, [r4, #0]
 8012614:	bd38      	pop	{r3, r4, r5, pc}
 8012616:	bf00      	nop
 8012618:	2003ee80 	.word	0x2003ee80

0801261c <_isatty_r>:
 801261c:	b538      	push	{r3, r4, r5, lr}
 801261e:	4d06      	ldr	r5, [pc, #24]	; (8012638 <_isatty_r+0x1c>)
 8012620:	2300      	movs	r3, #0
 8012622:	4604      	mov	r4, r0
 8012624:	4608      	mov	r0, r1
 8012626:	602b      	str	r3, [r5, #0]
 8012628:	f7ef fd7f 	bl	800212a <_isatty>
 801262c:	1c43      	adds	r3, r0, #1
 801262e:	d102      	bne.n	8012636 <_isatty_r+0x1a>
 8012630:	682b      	ldr	r3, [r5, #0]
 8012632:	b103      	cbz	r3, 8012636 <_isatty_r+0x1a>
 8012634:	6023      	str	r3, [r4, #0]
 8012636:	bd38      	pop	{r3, r4, r5, pc}
 8012638:	2003ee80 	.word	0x2003ee80

0801263c <_lseek_r>:
 801263c:	b538      	push	{r3, r4, r5, lr}
 801263e:	4d07      	ldr	r5, [pc, #28]	; (801265c <_lseek_r+0x20>)
 8012640:	4604      	mov	r4, r0
 8012642:	4608      	mov	r0, r1
 8012644:	4611      	mov	r1, r2
 8012646:	2200      	movs	r2, #0
 8012648:	602a      	str	r2, [r5, #0]
 801264a:	461a      	mov	r2, r3
 801264c:	f7ef fd78 	bl	8002140 <_lseek>
 8012650:	1c43      	adds	r3, r0, #1
 8012652:	d102      	bne.n	801265a <_lseek_r+0x1e>
 8012654:	682b      	ldr	r3, [r5, #0]
 8012656:	b103      	cbz	r3, 801265a <_lseek_r+0x1e>
 8012658:	6023      	str	r3, [r4, #0]
 801265a:	bd38      	pop	{r3, r4, r5, pc}
 801265c:	2003ee80 	.word	0x2003ee80

08012660 <__ascii_mbtowc>:
 8012660:	b082      	sub	sp, #8
 8012662:	b901      	cbnz	r1, 8012666 <__ascii_mbtowc+0x6>
 8012664:	a901      	add	r1, sp, #4
 8012666:	b142      	cbz	r2, 801267a <__ascii_mbtowc+0x1a>
 8012668:	b14b      	cbz	r3, 801267e <__ascii_mbtowc+0x1e>
 801266a:	7813      	ldrb	r3, [r2, #0]
 801266c:	600b      	str	r3, [r1, #0]
 801266e:	7812      	ldrb	r2, [r2, #0]
 8012670:	1e10      	subs	r0, r2, #0
 8012672:	bf18      	it	ne
 8012674:	2001      	movne	r0, #1
 8012676:	b002      	add	sp, #8
 8012678:	4770      	bx	lr
 801267a:	4610      	mov	r0, r2
 801267c:	e7fb      	b.n	8012676 <__ascii_mbtowc+0x16>
 801267e:	f06f 0001 	mvn.w	r0, #1
 8012682:	e7f8      	b.n	8012676 <__ascii_mbtowc+0x16>

08012684 <_malloc_usable_size_r>:
 8012684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012688:	1f18      	subs	r0, r3, #4
 801268a:	2b00      	cmp	r3, #0
 801268c:	bfbc      	itt	lt
 801268e:	580b      	ldrlt	r3, [r1, r0]
 8012690:	18c0      	addlt	r0, r0, r3
 8012692:	4770      	bx	lr

08012694 <_read_r>:
 8012694:	b538      	push	{r3, r4, r5, lr}
 8012696:	4d07      	ldr	r5, [pc, #28]	; (80126b4 <_read_r+0x20>)
 8012698:	4604      	mov	r4, r0
 801269a:	4608      	mov	r0, r1
 801269c:	4611      	mov	r1, r2
 801269e:	2200      	movs	r2, #0
 80126a0:	602a      	str	r2, [r5, #0]
 80126a2:	461a      	mov	r2, r3
 80126a4:	f7ef fcec 	bl	8002080 <_read>
 80126a8:	1c43      	adds	r3, r0, #1
 80126aa:	d102      	bne.n	80126b2 <_read_r+0x1e>
 80126ac:	682b      	ldr	r3, [r5, #0]
 80126ae:	b103      	cbz	r3, 80126b2 <_read_r+0x1e>
 80126b0:	6023      	str	r3, [r4, #0]
 80126b2:	bd38      	pop	{r3, r4, r5, pc}
 80126b4:	2003ee80 	.word	0x2003ee80

080126b8 <__ascii_wctomb>:
 80126b8:	b149      	cbz	r1, 80126ce <__ascii_wctomb+0x16>
 80126ba:	2aff      	cmp	r2, #255	; 0xff
 80126bc:	bf85      	ittet	hi
 80126be:	238a      	movhi	r3, #138	; 0x8a
 80126c0:	6003      	strhi	r3, [r0, #0]
 80126c2:	700a      	strbls	r2, [r1, #0]
 80126c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80126c8:	bf98      	it	ls
 80126ca:	2001      	movls	r0, #1
 80126cc:	4770      	bx	lr
 80126ce:	4608      	mov	r0, r1
 80126d0:	4770      	bx	lr
	...

080126d4 <_init>:
 80126d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126d6:	bf00      	nop
 80126d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126da:	bc08      	pop	{r3}
 80126dc:	469e      	mov	lr, r3
 80126de:	4770      	bx	lr

080126e0 <_fini>:
 80126e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e2:	bf00      	nop
 80126e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126e6:	bc08      	pop	{r3}
 80126e8:	469e      	mov	lr, r3
 80126ea:	4770      	bx	lr
